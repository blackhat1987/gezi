#define private public
#define protected public
#include "python_util.h"
// This file has been generated by Py++.

#include "boost/python.hpp"

#include "boost/python/suite/indexing/vector_indexing_suite.hpp"

#include "common_util.h"

#include "string_util.h"

#include "encoding_convert.h"

namespace bp = boost::python;

BOOST_PYTHON_MODULE(libstring_util){
DEF_VEC(ivec);
DEF_VEC(dvec);
DEF_VEC(uvec);
DEF_VEC(svec);
DEF_VEC(ulvec);
DEF_MAP(id_map);
DEF_MAP(sd_map);
DEF_MAP(si_map);
DEF_MAP(ss_map);
DEF_PAIR(ii_pair);
DEF_PAIR(si_pair);
DEF_PAIR(wsi_pair);
DEF_VEC(si_pair_vec);
DEF_VEC(wsi_pair_vec);
DEF_SET(iset);
DEF_SET(lset);
DEF_SET(ulset);

{ //::std::vector< std::string >
typedef bp::class_< std::vector< std::string > > vector_less__std_scope_string__greater__exposer_t;
vector_less__std_scope_string__greater__exposer_t vector_less__std_scope_string__greater__exposer = vector_less__std_scope_string__greater__exposer_t( "vector_less__std_scope_string__greater_" );
bp::scope vector_less__std_scope_string__greater__scope( vector_less__std_scope_string__greater__exposer );
vector_less__std_scope_string__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< std::string >, true >() )
VEC_METHOD(::std::vector< std::string >);
}

{ //::std::vector< int >
typedef bp::class_< std::vector< int > > vector_less__int__greater__exposer_t;
vector_less__int__greater__exposer_t vector_less__int__greater__exposer = vector_less__int__greater__exposer_t( "vector_less__int__greater_" );
bp::scope vector_less__int__greater__scope( vector_less__int__greater__exposer );
vector_less__int__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< int >, true >() )
VEC_METHOD(::std::vector< int >);
}

{ //::gezi::GetOutputFileNameWithSuffix

typedef ::std::string ( *GetOutputFileNameWithSuffix_function_type )( ::std::string,::std::string,bool );

bp::def(
"GetOutputFileNameWithSuffix"
, GetOutputFileNameWithSuffix_function_type( &::gezi::GetOutputFileNameWithSuffix )
, ( bp::arg("infile"), bp::arg("suffix"), bp::arg("removeTxt")=(bool)(false) ) );

}

{ //::gezi::GetOutputFileNameWithSuffix

typedef ::std::string ( *GetOutputFileNameWithSuffix_function_type )( ::std::string,::std::string,bool );

bp::def(
"GetOutputFileNameWithSuffix"
, GetOutputFileNameWithSuffix_function_type( &::gezi::GetOutputFileNameWithSuffix )
, ( bp::arg("infile"), bp::arg("suffix"), bp::arg("removeTxt")=(bool)(false) ) );

}

{ //::gezi::all_en

typedef bool ( *all_en_function_type )( ::std::string );

bp::def(
"all_en"
, all_en_function_type( &::gezi::all_en )
, ( bp::arg("phrase") ) );

}

{ //::gezi::all_en

typedef bool ( *all_en_function_type )( ::std::string );

bp::def(
"all_en"
, all_en_function_type( &::gezi::all_en )
, ( bp::arg("phrase") ) );

}

{ //::gezi::arg

typedef ::std::string ( *arg_function_type )( ::std::string );

bp::def(
"arg"
, arg_function_type( &::gezi::arg )
, ( bp::arg("input") ) );

}

{ //::gezi::arg

typedef ::std::string ( *arg_function_type )( ::std::string );

bp::def(
"arg"
, arg_function_type( &::gezi::arg )
, ( bp::arg("input") ) );

}

{ //::gezi::conf_trim

typedef ::std::string ( *conf_trim_function_type )( ::std::string );

bp::def(
"conf_trim"
, conf_trim_function_type( &::gezi::conf_trim )
, ( bp::arg("input") ) );

}

{ //::gezi::conf_trim

typedef ::std::string ( *conf_trim_function_type )( ::std::string );

bp::def(
"conf_trim"
, conf_trim_function_type( &::gezi::conf_trim )
, ( bp::arg("input") ) );

}

{ //::gezi::contains

typedef bool ( *contains_function_type )( ::std::string,char );

bp::def(
"contains"
, contains_function_type( &::gezi::contains )
, ( bp::arg("input"), bp::arg("part") ) );

}

{ //::gezi::contains

typedef bool ( *contains_function_type )( ::std::string,::std::string );

bp::def(
"contains"
, contains_function_type( &::gezi::contains )
, ( bp::arg("input"), bp::arg("part") ) );

}

{ //::gezi::contains

typedef bool ( *contains_function_type )( ::std::string,char );

bp::def(
"contains"
, contains_function_type( &::gezi::contains )
, ( bp::arg("input"), bp::arg("part") ) );

}

{ //::gezi::contains

typedef bool ( *contains_function_type )( ::std::string,::std::string );

bp::def(
"contains"
, contains_function_type( &::gezi::contains )
, ( bp::arg("input"), bp::arg("part") ) );

}

{ //::gezi::endswith

typedef bool ( *endswith_function_type )( ::std::string,::std::string );

bp::def(
"endswith"
, endswith_function_type( &::gezi::endswith )
, ( bp::arg("input"), bp::arg("part") ) );

}

{ //::gezi::endswith

typedef bool ( *endswith_function_type )( ::std::string,::std::string );

bp::def(
"endswith"
, endswith_function_type( &::gezi::endswith )
, ( bp::arg("input"), bp::arg("part") ) );

}

{ //::gezi::erase

typedef ::std::string ( *erase_function_type )( ::std::string,::std::string );

bp::def(
"erase"
, erase_function_type( &::gezi::erase )
, ( bp::arg("content"), bp::arg("chars") ) );

}

{ //::gezi::erase

typedef ::std::string ( *erase_function_type )( ::std::string,::std::string );

bp::def(
"erase"
, erase_function_type( &::gezi::erase )
, ( bp::arg("content"), bp::arg("chars") ) );

}

{ //::gezi::erase_chars

typedef ::std::string ( *erase_chars_function_type )( ::std::string,::std::string );

bp::def(
"erase_chars"
, erase_chars_function_type( &::gezi::erase_chars )
, ( bp::arg("content"), bp::arg("chars") ) );

}

{ //::gezi::erase_chars

typedef ::std::string ( *erase_chars_function_type )( ::std::string,::std::string );

bp::def(
"erase_chars"
, erase_chars_function_type( &::gezi::erase_chars )
, ( bp::arg("content"), bp::arg("chars") ) );

}

{ //::gezi::erase_from

typedef ::std::string ( *erase_from_function_type )( ::std::string,::std::string );

bp::def(
"erase_from"
, erase_from_function_type( &::gezi::erase_from )
, ( bp::arg("content"), bp::arg("part") ) );

}

{ //::gezi::erase_from

typedef ::std::string ( *erase_from_function_type )( ::std::string,::std::string );

bp::def(
"erase_from"
, erase_from_function_type( &::gezi::erase_from )
, ( bp::arg("content"), bp::arg("part") ) );

}

{ //::gezi::extract_chinese

typedef ::std::string ( *extract_chinese_function_type )( ::std::string );

bp::def(
"extract_chinese"
, extract_chinese_function_type( &::gezi::extract_chinese )
, ( bp::arg("temp") ) );

}

{ //::gezi::extract_chinese

typedef ::std::string ( *extract_chinese_function_type )( ::std::string );

bp::def(
"extract_chinese"
, extract_chinese_function_type( &::gezi::extract_chinese )
, ( bp::arg("temp") ) );

}

{ //::gezi::extract_gbk_dual

typedef ::std::string ( *extract_gbk_dual_function_type )( ::std::string );

bp::def(
"extract_gbk_dual"
, extract_gbk_dual_function_type( &::gezi::extract_gbk_dual )
, ( bp::arg("temp") ) );

}

{ //::gezi::extract_gbk_dual

typedef ::std::string ( *extract_gbk_dual_function_type )( ::std::string );

bp::def(
"extract_gbk_dual"
, extract_gbk_dual_function_type( &::gezi::extract_gbk_dual )
, ( bp::arg("temp") ) );

}

{ //::gezi::extract_suspect_symb

typedef ::std::string ( *extract_suspect_symb_function_type )( ::std::string );

bp::def(
"extract_suspect_symb"
, extract_suspect_symb_function_type( &::gezi::extract_suspect_symb )
, ( bp::arg("temp") ) );

}

{ //::gezi::extract_suspect_symb

typedef ::std::string ( *extract_suspect_symb_function_type )( ::std::string );

bp::def(
"extract_suspect_symb"
, extract_suspect_symb_function_type( &::gezi::extract_suspect_symb )
, ( bp::arg("temp") ) );

}

{ //::gezi::filter_str

typedef ::std::string ( *filter_str_function_type )( ::std::string,bool );

bp::def(
"filter_str"
, filter_str_function_type( &::gezi::filter_str )
, ( bp::arg("temp"), bp::arg("withSpace")=(bool)(false) ) );

}

{ //::gezi::filter_str

typedef ::std::string ( *filter_str_function_type )( ::std::string,bool );

bp::def(
"filter_str"
, filter_str_function_type( &::gezi::filter_str )
, ( bp::arg("temp"), bp::arg("withSpace")=(bool)(false) ) );

}

{ //::gezi::first

typedef ::std::string ( *first_function_type )( ::std::string,int );

bp::def(
"first"
, first_function_type( &::gezi::first )
, ( bp::arg("input"), bp::arg("length") ) );

}

{ //::gezi::first

typedef ::std::string ( *first_function_type )( ::std::string,int );

bp::def(
"first"
, first_function_type( &::gezi::first )
, ( bp::arg("input"), bp::arg("length") ) );

}

{ //::gezi::gbk2utf8

typedef ::std::string ( *gbk2utf8_function_type )( ::std::string,int );

bp::def(
"gbk2utf8"
, gbk2utf8_function_type( &::gezi::gbk2utf8 )
, ( bp::arg("src"), bp::arg("flags")=int(::uconv_flags_t::UCONV_INVCHAR_IGNORE) ) );

}

{ //::gezi::gbk_substr

typedef ::std::string ( *gbk_substr_function_type )( ::std::string,int,::size_t );

bp::def(
"gbk_substr"
, gbk_substr_function_type( &::gezi::gbk_substr )
, ( bp::arg("input"), bp::arg("start_"), bp::arg("len")=(::size_t)(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) ) );

}

{ //::gezi::gbk_substr

typedef ::std::string ( *gbk_substr_function_type )( ::std::string,int,::size_t );

bp::def(
"gbk_substr"
, gbk_substr_function_type( &::gezi::gbk_substr )
, ( bp::arg("input"), bp::arg("start_"), bp::arg("len")=(::size_t)(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) ) );

}

{ //::gezi::gbk_to_utf8

typedef ::std::string ( *gbk_to_utf8_function_type )( ::std::string,int );

bp::def(
"gbk_to_utf8"
, gbk_to_utf8_function_type( &::gezi::gbk_to_utf8 )
, ( bp::arg("src"), bp::arg("flags")=int(::uconv_flags_t::UCONV_INVCHAR_IGNORE) ) );

}

{ //::gezi::get_skip_bigram

typedef void ( *get_skip_bigram_function_type )( ::svec const &,::svec &,int,::std::string );

bp::def(
"get_skip_bigram"
, get_skip_bigram_function_type( &::gezi::get_skip_bigram )
, ( bp::arg("l"), bp::arg("li"), bp::arg("n"), bp::arg("sep")="\001" ) );

}

{ //::gezi::get_skip_bigram

typedef void ( *get_skip_bigram_function_type )( ::svec const &,::svec &,int,::std::string );

bp::def(
"get_skip_bigram"
, get_skip_bigram_function_type( &::gezi::get_skip_bigram )
, ( bp::arg("l"), bp::arg("li"), bp::arg("n"), bp::arg("sep")="\001" ) );

}

{ //::gezi::get_skipn_bigram

typedef void ( *get_skipn_bigram_function_type )( ::svec const &,::svec &,int,::std::string );

bp::def(
"get_skipn_bigram"
, get_skipn_bigram_function_type( &::gezi::get_skipn_bigram )
, ( bp::arg("l"), bp::arg("li"), bp::arg("n"), bp::arg("sep")="\001" ) );

}

{ //::gezi::get_skipn_bigram

typedef void ( *get_skipn_bigram_function_type )( ::svec const &,::svec &,int,::std::string );

bp::def(
"get_skipn_bigram"
, get_skipn_bigram_function_type( &::gezi::get_skipn_bigram )
, ( bp::arg("l"), bp::arg("li"), bp::arg("n"), bp::arg("sep")="\001" ) );

}

{ //::gezi::get_words

typedef ::std::vector< std::string > ( *get_words_function_type )( ::std::vector< std::string > const &,int,::std::string );

bp::def(
"get_words"
, get_words_function_type( &::gezi::get_words )
, ( bp::arg("l"), bp::arg("ngram")=(int)(3), bp::arg("sep")="\001" ) );

}

{ //::gezi::get_words

typedef ::std::vector< std::string > ( *get_words_function_type )( ::std::vector< std::string > const &,int,::std::string );

bp::def(
"get_words"
, get_words_function_type( &::gezi::get_words )
, ( bp::arg("l"), bp::arg("ngram")=(int)(3), bp::arg("sep")="\001" ) );

}

{ //::gezi::is_alpha_only

typedef bool ( *is_alpha_only_function_type )( ::std::string );

bp::def(
"is_alpha_only"
, is_alpha_only_function_type( &::gezi::is_alpha_only )
, ( bp::arg("input") ) );

}

{ //::gezi::is_alpha_only

typedef bool ( *is_alpha_only_function_type )( ::std::string );

bp::def(
"is_alpha_only"
, is_alpha_only_function_type( &::gezi::is_alpha_only )
, ( bp::arg("input") ) );

}

{ //::gezi::is_en_dominate

typedef bool ( *is_en_dominate_function_type )( ::std::string,int );

bp::def(
"is_en_dominate"
, is_en_dominate_function_type( &::gezi::is_en_dominate )
, ( bp::arg("phrase"), bp::arg("var")=(int)(3) ) );

}

{ //::gezi::is_en_dominate

typedef bool ( *is_en_dominate_function_type )( ::std::string,int );

bp::def(
"is_en_dominate"
, is_en_dominate_function_type( &::gezi::is_en_dominate )
, ( bp::arg("phrase"), bp::arg("var")=(int)(3) ) );

}

{ //::gezi::is_gb2312

typedef bool ( *is_gb2312_function_type )( unsigned char,unsigned char );

bp::def(
"is_gb2312"
, is_gb2312_function_type( &::gezi::is_gb2312 )
, ( bp::arg("ch1"), bp::arg("ch2") ) );

}

{ //::gezi::is_gb2312

typedef bool ( *is_gb2312_function_type )( unsigned char,unsigned char );

bp::def(
"is_gb2312"
, is_gb2312_function_type( &::gezi::is_gb2312 )
, ( bp::arg("ch1"), bp::arg("ch2") ) );

}

{ //::gezi::is_gbk_ch

typedef bool ( *is_gbk_ch_function_type )( unsigned char,unsigned char );

bp::def(
"is_gbk_ch"
, is_gbk_ch_function_type( &::gezi::is_gbk_ch )
, ( bp::arg("ch1"), bp::arg("ch2") ) );

}

{ //::gezi::is_gbk_ch

typedef bool ( *is_gbk_ch_function_type )( ::std::string );

bp::def(
"is_gbk_ch"
, is_gbk_ch_function_type( &::gezi::is_gbk_ch )
, ( bp::arg("phrase") ) );

}

{ //::gezi::is_gbk_ch

typedef bool ( *is_gbk_ch_function_type )( unsigned char,unsigned char );

bp::def(
"is_gbk_ch"
, is_gbk_ch_function_type( &::gezi::is_gbk_ch )
, ( bp::arg("ch1"), bp::arg("ch2") ) );

}

{ //::gezi::is_gbk_ch

typedef bool ( *is_gbk_ch_function_type )( ::std::string );

bp::def(
"is_gbk_ch"
, is_gbk_ch_function_type( &::gezi::is_gbk_ch )
, ( bp::arg("phrase") ) );

}

{ //::gezi::json_empty

typedef bool ( *json_empty_function_type )( ::std::string );

bp::def(
"json_empty"
, json_empty_function_type( &::gezi::json_empty )
, ( bp::arg("value") ) );

}

{ //::gezi::json_empty

typedef bool ( *json_empty_function_type )( ::std::string );

bp::def(
"json_empty"
, json_empty_function_type( &::gezi::json_empty )
, ( bp::arg("value") ) );

}

{ //::gezi::last

typedef ::std::string ( *last_function_type )( ::std::string,int );

bp::def(
"last"
, last_function_type( &::gezi::last )
, ( bp::arg("input"), bp::arg("length") ) );

}

{ //::gezi::last

typedef ::std::string ( *last_function_type )( ::std::string,int );

bp::def(
"last"
, last_function_type( &::gezi::last )
, ( bp::arg("input"), bp::arg("length") ) );

}

{ //::gezi::max

typedef ::std::string ( *max_function_type )( ::std::string,int );

bp::def(
"max"
, max_function_type( &::gezi::max )
, ( bp::arg("input"), bp::arg("length") ) );

}

{ //::gezi::max

typedef ::std::string ( *max_function_type )( ::std::string,int );

bp::def(
"max"
, max_function_type( &::gezi::max )
, ( bp::arg("input"), bp::arg("length") ) );

}

{ //::gezi::normalize_feature_str

typedef void ( *normalize_feature_str_function_type )( ::std::string & );

bp::def(
"normalize_feature_str"
, normalize_feature_str_function_type( &::gezi::normalize_feature_str )
, ( bp::arg("feature_str") ) );

}

{ //::gezi::normalize_feature_str

typedef void ( *normalize_feature_str_function_type )( ::std::string & );

bp::def(
"normalize_feature_str"
, normalize_feature_str_function_type( &::gezi::normalize_feature_str )
, ( bp::arg("feature_str") ) );

}

{ //::gezi::normalize_str

typedef ::std::string ( *normalize_str_function_type )( ::std::string,bool );

bp::def(
"normalize_str"
, normalize_str_function_type( &::gezi::normalize_str )
, ( bp::arg("input"), bp::arg("withSpace")=(bool)(false) ) );

}

{ //::gezi::normalize_str

typedef ::std::string ( *normalize_str_function_type )( ::std::string,bool );

bp::def(
"normalize_str"
, normalize_str_function_type( &::gezi::normalize_str )
, ( bp::arg("input"), bp::arg("withSpace")=(bool)(false) ) );

}

{ //::gezi::pad_right

typedef ::std::string ( *pad_right_function_type )( ::std::string,int );

bp::def(
"pad_right"
, pad_right_function_type( &::gezi::pad_right )
, ( bp::arg("input"), bp::arg("count") ) );

}

{ //::gezi::pad_right

typedef ::std::string ( *pad_right_function_type )( ::std::string,int );

bp::def(
"pad_right"
, pad_right_function_type( &::gezi::pad_right )
, ( bp::arg("input"), bp::arg("count") ) );

}

{ //::gezi::remove_dupspace

typedef ::std::string ( *remove_dupspace_function_type )( ::std::string );

bp::def(
"remove_dupspace"
, remove_dupspace_function_type( &::gezi::remove_dupspace )
, ( bp::arg("input") ) );

}

{ //::gezi::remove_dupspace

typedef ::std::string ( *remove_dupspace_function_type )( ::std::string );

bp::def(
"remove_dupspace"
, remove_dupspace_function_type( &::gezi::remove_dupspace )
, ( bp::arg("input") ) );

}

{ //::gezi::remove_space_cn

typedef ::std::string ( *remove_space_cn_function_type )( ::std::string );

bp::def(
"remove_space_cn"
, remove_space_cn_function_type( &::gezi::remove_space_cn )
, ( bp::arg("phrase") ) );

}

{ //::gezi::remove_space_cn

typedef ::std::string ( *remove_space_cn_function_type )( ::std::string );

bp::def(
"remove_space_cn"
, remove_space_cn_function_type( &::gezi::remove_space_cn )
, ( bp::arg("phrase") ) );

}

{ //::gezi::remove_space_cnonly

typedef ::std::string ( *remove_space_cnonly_function_type )( ::std::string );

bp::def(
"remove_space_cnonly"
, remove_space_cnonly_function_type( &::gezi::remove_space_cnonly )
, ( bp::arg("phrase") ) );

}

{ //::gezi::remove_space_cnonly

typedef ::std::string ( *remove_space_cnonly_function_type )( ::std::string );

bp::def(
"remove_space_cnonly"
, remove_space_cnonly_function_type( &::gezi::remove_space_cnonly )
, ( bp::arg("phrase") ) );

}

{ //::gezi::replace

typedef ::std::string ( *replace_function_type )( ::std::string,char,char );

bp::def(
"replace"
, replace_function_type( &::gezi::replace )
, ( bp::arg("input"), bp::arg("a"), bp::arg("b") ) );

}

{ //::gezi::replace

typedef ::std::string ( *replace_function_type )( ::std::string,char,char );

bp::def(
"replace"
, replace_function_type( &::gezi::replace )
, ( bp::arg("input"), bp::arg("a"), bp::arg("b") ) );

}

{ //::gezi::replace_chars

typedef ::std::string ( *replace_chars_function_type )( ::std::string,::std::string,char );

bp::def(
"replace_chars"
, replace_chars_function_type( &::gezi::replace_chars )
, ( bp::arg("content"), bp::arg("chars"), bp::arg("dest") ) );

}

{ //::gezi::replace_chars

typedef ::std::string ( *replace_chars_function_type )( ::std::string,::std::string,char );

bp::def(
"replace_chars"
, replace_chars_function_type( &::gezi::replace_chars )
, ( bp::arg("content"), bp::arg("chars"), bp::arg("dest") ) );

}

{ //::gezi::replace_special_whitespace

typedef ::std::string ( *replace_special_whitespace_function_type )( ::std::string,char const );

bp::def(
"replace_special_whitespace"
, replace_special_whitespace_function_type( &::gezi::replace_special_whitespace )
, ( bp::arg("s"), bp::arg("rep")=(char const)(' ') ) );

}

{ //::gezi::replace_special_whitespace

typedef ::std::string ( *replace_special_whitespace_function_type )( ::std::string,char const );

bp::def(
"replace_special_whitespace"
, replace_special_whitespace_function_type( &::gezi::replace_special_whitespace )
, ( bp::arg("s"), bp::arg("rep")=(char const)(' ') ) );

}

{ //::gezi::startswith

typedef bool ( *startswith_function_type )( ::std::string,::std::string );

bp::def(
"startswith"
, startswith_function_type( &::gezi::startswith )
, ( bp::arg("input"), bp::arg("part") ) );

}

{ //::gezi::startswith

typedef bool ( *startswith_function_type )( ::std::string,char );

bp::def(
"startswith"
, startswith_function_type( &::gezi::startswith )
, ( bp::arg("input"), bp::arg("part") ) );

}

{ //::gezi::startswith

typedef bool ( *startswith_function_type )( ::std::string,::std::string );

bp::def(
"startswith"
, startswith_function_type( &::gezi::startswith )
, ( bp::arg("input"), bp::arg("part") ) );

}

{ //::gezi::startswith

typedef bool ( *startswith_function_type )( ::std::string,char );

bp::def(
"startswith"
, startswith_function_type( &::gezi::startswith )
, ( bp::arg("input"), bp::arg("part") ) );

}

{ //::gezi::str_replace_all

typedef ::std::string ( *str_replace_all_function_type )( ::std::string,::std::string,::std::string );

bp::def(
"str_replace_all"
, str_replace_all_function_type( &::gezi::str_replace_all )
, ( bp::arg("tstr"), bp::arg("old_value"), bp::arg("new_value") ) );

}

{ //::gezi::str_replace_all

typedef ::std::string ( *str_replace_all_function_type )( ::std::string,::std::string,::std::string );

bp::def(
"str_replace_all"
, str_replace_all_function_type( &::gezi::str_replace_all )
, ( bp::arg("tstr"), bp::arg("old_value"), bp::arg("new_value") ) );

}

{ //::gezi::to_cnvec

typedef ::std::vector< std::string > ( *to_cnvec_function_type )( ::std::string );

bp::def(
"to_cnvec"
, to_cnvec_function_type( &::gezi::to_cnvec )
, ( bp::arg("line") ) );

}

{ //::gezi::to_cnvec

typedef ::std::vector< std::string > ( *to_cnvec_function_type )( ::std::string );

bp::def(
"to_cnvec"
, to_cnvec_function_type( &::gezi::to_cnvec )
, ( bp::arg("line") ) );

}

{ //::gezi::to_gbk

typedef ::std::string ( *to_gbk_function_type )( ::std::string,int );

bp::def(
"to_gbk"
, to_gbk_function_type( &::gezi::to_gbk )
, ( bp::arg("src"), bp::arg("flags")=int(::uconv_flags_t::UCONV_INVCHAR_IGNORE) ) );

}

{ //::gezi::to_utf8

typedef ::std::string ( *to_utf8_function_type )( ::std::string,int );

bp::def(
"to_utf8"
, to_utf8_function_type( &::gezi::to_utf8 )
, ( bp::arg("src"), bp::arg("flags")=int(::uconv_flags_t::UCONV_INVCHAR_IGNORE) ) );

}

{ //::gezi::unicode_index

typedef ::std::vector< int > ( *unicode_index_function_type )( ::std::string );

bp::def(
"unicode_index"
, unicode_index_function_type( &::gezi::unicode_index )
, ( bp::arg("input") ) );

}

{ //::gezi::unicode_index

typedef ::std::vector< int > ( *unicode_index_function_type )( ::std::string );

bp::def(
"unicode_index"
, unicode_index_function_type( &::gezi::unicode_index )
, ( bp::arg("input") ) );

}

{ //::gezi::utf82gbk

typedef ::std::string ( *utf82gbk_function_type )( ::std::string,int );

bp::def(
"utf82gbk"
, utf82gbk_function_type( &::gezi::utf82gbk )
, ( bp::arg("src"), bp::arg("flags")=int(::uconv_flags_t::UCONV_INVCHAR_IGNORE) ) );

}

{ //::gezi::utf8_to_gbk

typedef ::std::string ( *utf8_to_gbk_function_type )( ::std::string,int );

bp::def(
"utf8_to_gbk"
, utf8_to_gbk_function_type( &::gezi::utf8_to_gbk )
, ( bp::arg("src"), bp::arg("flags")=int(::uconv_flags_t::UCONV_INVCHAR_IGNORE) ) );

}

{ //::gezi::wchar_count

typedef int ( *wchar_count_function_type )( char const *,int );

bp::def(
"wchar_count"
, wchar_count_function_type( &::gezi::wchar_count )
, ( bp::arg("buf"), bp::arg("len") ) );

}

{ //::gezi::wchar_count

typedef int ( *wchar_count_function_type )( char const *,int );

bp::def(
"wchar_count"
, wchar_count_function_type( &::gezi::wchar_count )
, ( bp::arg("buf"), bp::arg("len") ) );

}

{ //::gezi::word_count

typedef int ( *word_count_function_type )( ::std::string );

bp::def(
"word_count"
, word_count_function_type( &::gezi::word_count )
, ( bp::arg("phrase") ) );

}

{ //::gezi::word_count

typedef int ( *word_count_function_type )( ::std::string );

bp::def(
"word_count"
, word_count_function_type( &::gezi::word_count )
, ( bp::arg("phrase") ) );

}

bp::scope().attr("kSmallStringLength") = gezi::kSmallStringLength;
}

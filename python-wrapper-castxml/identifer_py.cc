#define private public
#define protected public
#include "python_util.h"
// This file has been generated by Py++.

#include "boost/python.hpp"

#include "boost/python/suite/indexing/vector_indexing_suite.hpp"

#include "common_util.h"

#include "Identifer.h"
const int gezi::Identifer::NullId;

namespace bp = boost::python;

BOOST_PYTHON_MODULE(libidentifer){
DEF_VEC(ivec);
DEF_VEC(dvec);
DEF_VEC(uvec);
DEF_VEC(svec);
DEF_VEC(ulvec);
DEF_MAP(id_map);
DEF_MAP(sd_map);
DEF_MAP(si_map);

{ //::std::vector< std::string >
typedef bp::class_< std::vector< std::string > > vector_less__std_scope_string__greater__exposer_t;
vector_less__std_scope_string__greater__exposer_t vector_less__std_scope_string__greater__exposer = vector_less__std_scope_string__greater__exposer_t( "vector_less__std_scope_string__greater_" );
bp::scope vector_less__std_scope_string__greater__scope( vector_less__std_scope_string__greater__exposer );
vector_less__std_scope_string__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< std::string >, true >() )
VEC_METHOD(::std::vector< std::string >);
}

bp::class_< gezi::Identifer >( "Identifer" )
.def(
"Load"
, (void ( ::gezi::Identifer::* )( ::std::string ) )( &::gezi::Identifer::Load )
, ( bp::arg("path") ) )
.def(
"Save"
, (void ( ::gezi::Identifer::* )( ::std::string ) )( &::gezi::Identifer::Save )
, ( bp::arg("path") ) )
.def(
"add"
, (int ( ::gezi::Identifer::* )( ::std::string ) )( &::gezi::Identifer::add )
, ( bp::arg("f") ) )
.def(
"add"
, (int ( ::gezi::Identifer::* )( ::std::string,bool & ) )( &::gezi::Identifer::add )
, ( bp::arg("f"), bp::arg("isnew") ) )
.def(
"add_unique"
, (int ( ::gezi::Identifer::* )( ::std::string ) )( &::gezi::Identifer::add_unique )
, ( bp::arg("f") ) )
.def(
"clear"
, (void ( ::gezi::Identifer::* )(  ) )( &::gezi::Identifer::clear ) )
.def(
"empty"
, (bool ( ::gezi::Identifer::* )(  ) const)( &::gezi::Identifer::empty ) )
.def(
"has"
, (bool ( ::gezi::Identifer::* )( ::std::string ) const)( &::gezi::Identifer::has )
, ( bp::arg("f") ) )
.def(
"id"
, (int ( ::gezi::Identifer::* )( ::std::string ) const)( &::gezi::Identifer::id )
, ( bp::arg("f") ) )
.def(
"key"
, (::std::string ( ::gezi::Identifer::* )( int ) const)( &::gezi::Identifer::key )
, ( bp::arg("id") ) )
.def(
"keys"
, (::std::vector< std::string > & ( ::gezi::Identifer::* )(  ) )( &::gezi::Identifer::keys )
, bp::return_internal_reference<>())
.def(
"last"
, (::std::string ( ::gezi::Identifer::* )(  ) )( &::gezi::Identifer::last ) )
.def(
"load"
, (bool ( ::gezi::Identifer::* )( ::std::string,::std::string ) )( &::gezi::Identifer::load )
, ( bp::arg("file"), bp::arg("sep")="\011" ) )
.def(
"null_id"
, (int const (*)(  ))( &::gezi::Identifer::null_id ) )
.def(
"__call__"
, (int const ( ::gezi::Identifer::* )( ::std::string ) const)( &::gezi::Identifer::operator() )
, ( bp::arg("key") ) )
.def(
"__getitem__"
, (::std::string ( ::gezi::Identifer::* )( int ) const)( &::gezi::Identifer::operator[] )
, ( bp::arg("id") ) )
.def(
"save"
, (void ( ::gezi::Identifer::* )( ::std::string ) )( &::gezi::Identifer::save )
, ( bp::arg("file") ) )
.def(
"size"
, (::size_t ( ::gezi::Identifer::* )(  ) const)( &::gezi::Identifer::size ) )
.def(
"words"
, (::std::vector< std::string > & ( ::gezi::Identifer::* )(  ) )( &::gezi::Identifer::words )
, bp::return_internal_reference<>())
.def_readonly( "NullId", gezi::Identifer::NullId )
.staticmethod( "null_id" );

bp::class_< gezi::ValueIdentifer< double >, bp::bases< gezi::Identifer > >( "DoubleIdentifer" )
.def(
"Load"
, (void ( ::gezi::ValueIdentifer<double>::* )( ::std::string ) )( &::gezi::ValueIdentifer< double >::Load )
, ( bp::arg("file") ) )
.def(
"Save"
, (void ( ::gezi::ValueIdentifer<double>::* )( ::std::string ) )( &::gezi::ValueIdentifer< double >::Save )
, ( bp::arg("file") ) )
.def(
"get_value"
, (double ( ::gezi::ValueIdentifer<double>::* )( ::std::string ) const)( &::gezi::ValueIdentifer< double >::get_value )
, ( bp::arg("key") ) )
.def(
"load"
, (bool ( ::gezi::ValueIdentifer<double>::* )( ::std::string,int,::std::string ) )( &::gezi::ValueIdentifer< double >::load )
, ( bp::arg("file"), bp::arg("index")=(int)(1), bp::arg("sep")="\011" ) )
.def(
"value"
, (double ( ::gezi::ValueIdentifer<double>::* )( int ) const)( &::gezi::ValueIdentifer< double >::value )
, ( bp::arg("index") ) );

//    bp::class_< gezi::PyHack_DoubleIdentifer, bp::bases< gezi::ValueIdentifer< double > > >( "PyHack_DoubleIdentifer" );

bp::class_< gezi::ValueIdentifer< int >, bp::bases< gezi::Identifer > >( "IntIdentifer" )
.def(
"Load"
, (void ( ::gezi::ValueIdentifer<int>::* )( ::std::string ) )( &::gezi::ValueIdentifer< int >::Load )
, ( bp::arg("file") ) )
.def(
"Save"
, (void ( ::gezi::ValueIdentifer<int>::* )( ::std::string ) )( &::gezi::ValueIdentifer< int >::Save )
, ( bp::arg("file") ) )
.def(
"get_value"
, (int ( ::gezi::ValueIdentifer<int>::* )( ::std::string ) const)( &::gezi::ValueIdentifer< int >::get_value )
, ( bp::arg("key") ) )
.def(
"load"
, (bool ( ::gezi::ValueIdentifer<int>::* )( ::std::string,int,::std::string ) )( &::gezi::ValueIdentifer< int >::load )
, ( bp::arg("file"), bp::arg("index")=(int)(1), bp::arg("sep")="\011" ) )
.def(
"value"
, (int ( ::gezi::ValueIdentifer<int>::* )( int ) const)( &::gezi::ValueIdentifer< int >::value )
, ( bp::arg("index") ) );

//    bp::class_< gezi::PyHack_IntIndentifer, bp::bases< gezi::ValueIdentifer< int > > >( "PyHack_IntIndentifer" );
}

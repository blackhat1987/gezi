#define private public
#define protected public
#include "python_util.h"
// This file has been generated by Py++.

#include "boost/python.hpp"

#include "boost/python/suite/indexing/vector_indexing_suite.hpp"

#include "boost/python/suite/indexing/map_indexing_suite.hpp"

#include "common_util.h"

#include "log_util.h"

#include "MatchDict.h"

namespace bp = boost::python;

BOOST_PYTHON_MODULE(libmatch_dict){
DEF_VEC(ivec);
DEF_VEC(dvec);
DEF_VEC(uvec);
DEF_VEC(svec);
DEF_VEC(ulvec);
DEF_MAP(id_map);
DEF_MAP(sd_map);
DEF_MAP(si_map);
DEF_MAP(ss_map);
DEF_PAIR(ii_pair);
DEF_PAIR(si_pair);
DEF_PAIR(wsi_pair);
DEF_VEC(si_pair_vec);
DEF_VEC(wsi_pair_vec);
DEF_SET(sset);
DEF_SET(iset);
DEF_SET(lset);
DEF_SET(ulset);

{ //::std::vector< std::string >
typedef bp::class_< std::vector< std::string > > vector_less__std_scope_string__greater__exposer_t;
vector_less__std_scope_string__greater__exposer_t vector_less__std_scope_string__greater__exposer = vector_less__std_scope_string__greater__exposer_t( "vector_less__std_scope_string__greater_" );
bp::scope vector_less__std_scope_string__greater__scope( vector_less__std_scope_string__greater__exposer );
vector_less__std_scope_string__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< std::string >, true >() )
VEC_METHOD(::std::vector< std::string >);
}

bp::class_< std::vector< gezi::MatchDict::Node > >("vector_less__gezi_scope_MatchDict_scope_Node__greater_")
.def( bp::vector_indexing_suite< ::std::vector< gezi::MatchDict::Node > >() )
VEC_METHOD(::std::vector< gezi::MatchDict::Node >);

bp::class_< std::map< std::string, int > >("map_less__std_scope_string_comma__int__greater_")
.def( bp::map_indexing_suite< ::std::map< std::string, int >, true >() )
MAP_METHOD(::std::map< std::string COMMA  int >);

{ //::gezi::MatchDict
typedef bp::class_< gezi::MatchDict > MatchDict_exposer_t;
MatchDict_exposer_t MatchDict_exposer = MatchDict_exposer_t( "MatchDict", bp::init< >() );
bp::scope MatchDict_scope( MatchDict_exposer );
bp::class_< gezi::MatchDict::Node >( "Node" )
.def( bp::self == bp::self )
.def_readwrite( "offset", &gezi::MatchDict::Node::offset )
.def_readwrite( "length", &gezi::MatchDict::Node::length )
.def_readwrite( "property", &gezi::MatchDict::Node::property )
.def_readwrite( "word", &gezi::MatchDict::Node::word );
MatchDict_exposer.def( bp::init< std::string >(( bp::arg("file") )) );
bp::implicitly_convertible< std::string, gezi::MatchDict >();
{ //::gezi::MatchDict::Load

typedef bool ( ::gezi::MatchDict::*Load_function_type)( ::std::string ) ;

MatchDict_exposer.def(
"Load"
, Load_function_type( &::gezi::MatchDict::Load )
, ( bp::arg("file") ) );

}
{ //::gezi::MatchDict::SearchCount

typedef int ( ::gezi::MatchDict::*SearchCount_function_type)( ::std::string,int ) ;

MatchDict_exposer.def(
"SearchCount"
, SearchCount_function_type( &::gezi::MatchDict::SearchCount )
, ( bp::arg("text"), bp::arg("strategy")=(int)(gezi::MATCH_DICT_SEARCH_LONGEST) ) );

}
{ //::gezi::MatchDict::free_dm_pack

typedef void ( *free_dm_pack_function_type )(  );

MatchDict_exposer.def(
"free_dm_pack"
, free_dm_pack_function_type( &::gezi::MatchDict::free_dm_pack ) );

}
{ //::gezi::MatchDict::has_word

typedef bool ( ::gezi::MatchDict::*has_word_function_type)( ::std::string,int,int ) ;

MatchDict_exposer.def(
"has_word"
, has_word_function_type( &::gezi::MatchDict::has_word )
, ( bp::arg("text"), bp::arg("type")=(int)(1), bp::arg("strategy")=(int)(gezi::MATCH_DICT_SEARCH_LONGEST) ) );

}
{ //::gezi::MatchDict::init

typedef bool ( ::gezi::MatchDict::*init_function_type)( ::std::string ) ;

MatchDict_exposer.def(
"init"
, init_function_type( &::gezi::MatchDict::init )
, ( bp::arg("file") ) );

}
{ //::gezi::MatchDict::load

typedef bool ( ::gezi::MatchDict::*load_function_type)( ::std::string ) ;

MatchDict_exposer.def(
"load"
, load_function_type( &::gezi::MatchDict::load )
, ( bp::arg("file") ) );

}
{ //::gezi::MatchDict::search

typedef int ( ::gezi::MatchDict::*search_function_type)( ::std::string,::dm_pack_t *,int ) ;

MatchDict_exposer.def(
"search"
, search_function_type( &::gezi::MatchDict::search )
, ( bp::arg("text"), bp::arg("result"), bp::arg("strategy")=(int)(gezi::MATCH_DICT_SEARCH_LONGEST) ) );

}
{ //::gezi::MatchDict::search

typedef ::std::vector< gezi::MatchDict::Node > ( ::gezi::MatchDict::*search_function_type)( ::std::string,int ) ;

MatchDict_exposer.def(
"search"
, search_function_type( &::gezi::MatchDict::search )
, ( bp::arg("text"), bp::arg("strategy")=(int)(gezi::MATCH_DICT_SEARCH_LONGEST) ) );

}
{ //::gezi::MatchDict::search_count

typedef int ( ::gezi::MatchDict::*search_count_function_type)( ::std::string,::dm_pack_t *,int ) ;

MatchDict_exposer.def(
"search_count"
, search_count_function_type( &::gezi::MatchDict::search_count )
, ( bp::arg("text"), bp::arg("result"), bp::arg("strategy")=(int)(gezi::MATCH_DICT_SEARCH_LONGEST) ) );

}
{ //::gezi::MatchDict::search_count

typedef int ( ::gezi::MatchDict::*search_count_function_type)( ::std::string,int ) ;

MatchDict_exposer.def(
"search_count"
, search_count_function_type( &::gezi::MatchDict::search_count )
, ( bp::arg("text"), bp::arg("strategy")=(int)(gezi::MATCH_DICT_SEARCH_LONGEST) ) );

}
{ //::gezi::MatchDict::search_properties

typedef ::std::map< std::string, int > ( ::gezi::MatchDict::*search_properties_function_type)( ::std::string,int,bool ) ;

MatchDict_exposer.def(
"search_properties"
, search_properties_function_type( &::gezi::MatchDict::search_properties )
, ( bp::arg("text"), bp::arg("strategy")=(int)(gezi::MATCH_DICT_SEARCH_LONGEST), bp::arg("count_property")=(bool)(false) ) );

}
{ //::gezi::MatchDict::search_words

typedef ::std::set< std::string > ( ::gezi::MatchDict::*search_words_function_type)( ::std::string,int ) ;

MatchDict_exposer.def(
"search_words"
, search_words_function_type( &::gezi::MatchDict::search_words )
, ( bp::arg("text"), bp::arg("strategy")=(int)(gezi::MATCH_DICT_SEARCH_LONGEST) ) );

}
{ //::gezi::MatchDict::search_words_byseq

typedef ::std::vector< std::string > ( ::gezi::MatchDict::*search_words_byseq_function_type)( ::std::string,int ) ;

MatchDict_exposer.def(
"search_words_byseq"
, search_words_byseq_function_type( &::gezi::MatchDict::search_words_byseq )
, ( bp::arg("text"), bp::arg("strategy")=(int)(gezi::MATCH_DICT_SEARCH_LONGEST) ) );

}
{ //::gezi::MatchDict::set_dm_pack

typedef void ( *set_dm_pack_function_type )( int );

MatchDict_exposer.def(
"set_dm_pack"
, set_dm_pack_function_type( &::gezi::MatchDict::set_dm_pack )
, ( bp::arg("maxMatchCount") ) );

}
MatchDict_exposer.staticmethod( "free_dm_pack" );
MatchDict_exposer.staticmethod( "set_dm_pack" );
}

{ //::gezi::MatchSearcher
typedef bp::class_< gezi::MatchSearcher > MatchSearcher_exposer_t;
MatchSearcher_exposer_t MatchSearcher_exposer = MatchSearcher_exposer_t( "MatchSearcher", bp::init< gezi::MatchDict *, bp::optional< int > >(( bp::arg("dict"), bp::arg("maxMatchCount")=(int)(1000) )) );
bp::scope MatchSearcher_scope( MatchSearcher_exposer );
bp::implicitly_convertible< gezi::MatchDict *, gezi::MatchSearcher >();
MatchSearcher_exposer.def( bp::init< gezi::MatchDict const &, bp::optional< int > >(( bp::arg("dict"), bp::arg("maxMatchCount")=(int)(1000) )) );
bp::implicitly_convertible< gezi::MatchDict const &, gezi::MatchSearcher >();
{ //::gezi::MatchSearcher::has_word

typedef bool ( ::gezi::MatchSearcher::*has_word_function_type)( ::std::string ) ;

MatchSearcher_exposer.def(
"has_word"
, has_word_function_type( &::gezi::MatchSearcher::has_word )
, ( bp::arg("text") ) );

}
{ //::gezi::MatchSearcher::max_match_count

typedef int ( ::gezi::MatchSearcher::*max_match_count_function_type)(  ) ;

MatchSearcher_exposer.def(
"max_match_count"
, max_match_count_function_type( &::gezi::MatchSearcher::max_match_count ) );

}
{ //::gezi::MatchSearcher::result

typedef ::dm_pack_t * ( ::gezi::MatchSearcher::*result_function_type)(  ) ;

MatchSearcher_exposer.def(
"result"
, result_function_type( &::gezi::MatchSearcher::result )
, bp::return_internal_reference<>());

}
{ //::gezi::MatchSearcher::search

typedef ::dm_pack_t * ( ::gezi::MatchSearcher::*search_function_type)( ::gezi::MatchDict const &,::std::string ) ;

MatchSearcher_exposer.def(
"search"
, search_function_type( &::gezi::MatchSearcher::search )
, ( bp::arg("dict"), bp::arg("text") )
, bp::return_internal_reference<>());

}
{ //::gezi::MatchSearcher::search

typedef ::dm_pack_t * ( ::gezi::MatchSearcher::*search_function_type)( ::gezi::MatchDict *,::std::string ) ;

MatchSearcher_exposer.def(
"search"
, search_function_type( &::gezi::MatchSearcher::search )
, ( bp::arg("dict"), bp::arg("text") )
, bp::return_internal_reference<>());

}
{ //::gezi::MatchSearcher::search

typedef ::dm_pack_t * ( ::gezi::MatchSearcher::*search_function_type)( ::std::string ) ;

MatchSearcher_exposer.def(
"search"
, search_function_type( &::gezi::MatchSearcher::search )
, ( bp::arg("text") )
, bp::return_internal_reference<>());

}
{ //::gezi::MatchSearcher::search_count

typedef int ( ::gezi::MatchSearcher::*search_count_function_type)( ::gezi::MatchDict const &,::std::string ) ;

MatchSearcher_exposer.def(
"search_count"
, search_count_function_type( &::gezi::MatchSearcher::search_count )
, ( bp::arg("dict"), bp::arg("text") ) );

}
{ //::gezi::MatchSearcher::search_count

typedef int ( ::gezi::MatchSearcher::*search_count_function_type)( ::gezi::MatchDict *,::std::string ) ;

MatchSearcher_exposer.def(
"search_count"
, search_count_function_type( &::gezi::MatchSearcher::search_count )
, ( bp::arg("dict"), bp::arg("text") ) );

}
{ //::gezi::MatchSearcher::search_count

typedef int ( ::gezi::MatchSearcher::*search_count_function_type)( ::std::string ) ;

MatchSearcher_exposer.def(
"search_count"
, search_count_function_type( &::gezi::MatchSearcher::search_count )
, ( bp::arg("text") ) );

}
}

bp::scope().attr("MATCH_DICT_SEARCH_ALL") = gezi::MATCH_DICT_SEARCH_ALL;

bp::scope().attr("MATCH_DICT_SEARCH_LONGEST") = gezi::MATCH_DICT_SEARCH_LONGEST;
}

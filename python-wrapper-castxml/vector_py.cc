// This file has been generated by Py++.

#include "boost/python.hpp"

#include "boost/python/suite/indexing/vector_indexing_suite.hpp"

#include "boost/python/suite/indexing/map_indexing_suite.hpp"

#include "include.python/common_util.h"

#include "include.python/Numeric/Vector/Vector.h"

namespace bp = boost::python;

BOOST_PYTHON_MODULE(libvector){
    { //::std::vector< int >
        typedef bp::class_< std::vector< int > > vector_less__int__greater__exposer_t;
        vector_less__int__greater__exposer_t vector_less__int__greater__exposer = vector_less__int__greater__exposer_t( "vector_less__int__greater_" );
        bp::scope vector_less__int__greater__scope( vector_less__int__greater__exposer );
        vector_less__int__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< int >, true >() );
    }

    { //::std::vector< double >
        typedef bp::class_< std::vector< double > > vector_less__double__greater__exposer_t;
        vector_less__double__greater__exposer_t vector_less__double__greater__exposer = vector_less__double__greater__exposer_t( "vector_less__double__greater_" );
        bp::scope vector_less__double__greater__scope( vector_less__double__greater__exposer );
        vector_less__double__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< double >, true >() );
    }

    { //::std::map< int, double >
        typedef bp::class_< std::map< int, double > > map_less__int_comma__double__greater__exposer_t;
        map_less__int_comma__double__greater__exposer_t map_less__int_comma__double__greater__exposer = map_less__int_comma__double__greater__exposer_t( "map_less__int_comma__double__greater_" );
        bp::scope map_less__int_comma__double__greater__scope( map_less__int_comma__double__greater__exposer );
        map_less__int_comma__double__greater__exposer.def( bp::map_indexing_suite< ::std::map< int, double >, true >() );
    }

    bp::class_< gezi::PyHack_Vectors >( "PyHack_Vectors" );

    { //::gezi::Vector
        typedef bp::class_< gezi::Vector > Vector_exposer_t;
        Vector_exposer_t Vector_exposer = Vector_exposer_t( "Vector", bp::init< >() );
        bp::scope Vector_scope( Vector_exposer );
        Vector_exposer.def( bp::init< gezi::Vector const & >(( bp::arg("arg0") )) );
        Vector_exposer.def( bp::init< gezi::Vector::index_type >(( bp::arg("length_") )) );
        bp::implicitly_convertible< gezi::Vector::index_type, gezi::Vector >();
        Vector_exposer.def( bp::init< gezi::Vector::value_type, int >(( bp::arg("value_"), bp::arg("length_") )) );
        Vector_exposer.def( bp::init< gezi::Vector::index_type, gezi::Vector::value_type >(( bp::arg("length_"), bp::arg("value_") )) );
        Vector_exposer.def( bp::init< std::map< int, double > const & >(( bp::arg("m") )) );
        bp::implicitly_convertible< std::map< int, double > const &, gezi::Vector >();
        Vector_exposer.def( bp::init< gezi::Vector::index_type, ivec &, std::vector< double > & >(( bp::arg("length_"), bp::arg("indices_"), bp::arg("values_") )) );
        Vector_exposer.def( bp::init< ivec &, std::vector< double > &, bp::optional< gezi::Vector::index_type > >(( bp::arg("indices_"), bp::arg("values_"), bp::arg("length_")=(::gezi::Vector::index_type)(1024000) )) );
        Vector_exposer.def( bp::init< std::vector< double > & >(( bp::arg("values_") )) );
        bp::implicitly_convertible< std::vector< double > &, gezi::Vector >();
        Vector_exposer.def( bp::init< std::string, bp::optional< gezi::Vector::index_type, gezi::Vector::index_type, std::string, bool > >(( bp::arg("input"), bp::arg("startIndex")=(::gezi::Vector::index_type)(0), bp::arg("length_")=(::gezi::Vector::index_type)(1024000), bp::arg("sep")=",\t ", bp::arg("indexOnly")=(bool)(false) )) );
        bp::implicitly_convertible< std::string, gezi::Vector >();
        Vector_exposer.def( bp::init< gezi::Vector::iterator, gezi::Vector::iterator >(( bp::arg("first"), bp::arg("end") )) );
        { //::gezi::Vector::Add
        
            typedef void ( ::gezi::Vector::*Add_function_type)( ::gezi::Vector::value_type ) ;
            
            Vector_exposer.def( 
                "Add"
                , Add_function_type( &::gezi::Vector::Add )
                , ( bp::arg("value") ) );
        
        }
        { //::gezi::Vector::Add
        
            typedef void ( ::gezi::Vector::*Add_function_type)( ::gezi::Vector::index_type,::gezi::Vector::value_type ) ;
            
            Vector_exposer.def( 
                "Add"
                , Add_function_type( &::gezi::Vector::Add )
                , ( bp::arg("index"), bp::arg("value") ) );
        
        }
        { //::gezi::Vector::Add
        
            typedef void ( ::gezi::Vector::*Add_function_type)( ::gezi::Vector const & ) ;
            
            Vector_exposer.def( 
                "Add"
                , Add_function_type( &::gezi::Vector::Add )
                , ( bp::arg("other") ) );
        
        }
        { //::gezi::Vector::AddMap
        
            typedef void ( ::gezi::Vector::*AddMap_function_type)( ::std::map< int, double > const & ) ;
            
            Vector_exposer.def( 
                "AddMap"
                , AddMap_function_type( &::gezi::Vector::AddMap )
                , ( bp::arg("m") ) );
        
        }
        { //::gezi::Vector::AllStr
        
            typedef ::std::string ( ::gezi::Vector::*AllStr_function_type)( ::std::string ) const;
            
            Vector_exposer.def( 
                "AllStr"
                , AllStr_function_type( &::gezi::Vector::AllStr )
                , ( bp::arg("sep")="," ) );
        
        }
        { //::gezi::Vector::CheckInvariants
        
            typedef void ( ::gezi::Vector::*CheckInvariants_function_type)(  ) ;
            
            Vector_exposer.def( 
                "CheckInvariants"
                , CheckInvariants_function_type( &::gezi::Vector::CheckInvariants ) );
        
        }
        { //::gezi::Vector::Clear
        
            typedef void ( ::gezi::Vector::*Clear_function_type)(  ) ;
            
            Vector_exposer.def( 
                "Clear"
                , Clear_function_type( &::gezi::Vector::Clear ) );
        
        }
        { //::gezi::Vector::Count
        
            typedef int ( ::gezi::Vector::*Count_function_type)(  ) const;
            
            Vector_exposer.def( 
                "Count"
                , Count_function_type( &::gezi::Vector::Count ) );
        
        }
        { //::gezi::Vector::DenseStr
        
            typedef ::std::string ( ::gezi::Vector::*DenseStr_function_type)( ::std::string ) const;
            
            Vector_exposer.def( 
                "DenseStr"
                , DenseStr_function_type( &::gezi::Vector::DenseStr )
                , ( bp::arg("sep")="," ) );
        
        }
        { //::gezi::Vector::Densify
        
            typedef void ( ::gezi::Vector::*Densify_function_type)( ::gezi::Vector::value_type ) ;
            
            Vector_exposer.def( 
                "Densify"
                , Densify_function_type( &::gezi::Vector::Densify )
                , ( bp::arg("maxSparsity") ) );
        
        }
        { //::gezi::Vector::Densify
        
            typedef void ( ::gezi::Vector::*Densify_function_type)(  ) ;
            
            Vector_exposer.def( 
                "Densify"
                , Densify_function_type( &::gezi::Vector::Densify ) );
        
        }
        { //::gezi::Vector::Empty
        
            typedef bool ( ::gezi::Vector::*Empty_function_type)(  ) const;
            
            Vector_exposer.def( 
                "Empty"
                , Empty_function_type( &::gezi::Vector::Empty ) );
        
        }
        { //::gezi::Vector::ForceDense
        
            typedef void ( ::gezi::Vector::*ForceDense_function_type)(  ) ;
            
            Vector_exposer.def( 
                "ForceDense"
                , ForceDense_function_type( &::gezi::Vector::ForceDense ) );
        
        }
        { //::gezi::Vector::ForceSparse
        
            typedef void ( ::gezi::Vector::*ForceSparse_function_type)(  ) ;
            
            Vector_exposer.def( 
                "ForceSparse"
                , ForceSparse_function_type( &::gezi::Vector::ForceSparse ) );
        
        }
        { //::gezi::Vector::Index
        
            typedef ::gezi::Vector::index_type ( ::gezi::Vector::*Index_function_type)( ::gezi::Vector::index_type ) const;
            
            Vector_exposer.def( 
                "Index"
                , Index_function_type( &::gezi::Vector::Index )
                , ( bp::arg("index") ) );
        
        }
        { //::gezi::Vector::Indices
        
            typedef ::ivec const & ( ::gezi::Vector::*Indices_function_type)(  ) const;
            
            Vector_exposer.def( 
                "Indices"
                , Indices_function_type( &::gezi::Vector::Indices )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::gezi::Vector::Indices
        
            typedef ::ivec & ( ::gezi::Vector::*Indices_function_type)(  ) ;
            
            Vector_exposer.def( 
                "Indices"
                , Indices_function_type( &::gezi::Vector::Indices )
                    /* undefined call policies */ );
        
        }
        { //::gezi::Vector::Init
        
            typedef void ( ::gezi::Vector::*Init_function_type)( ::std::string,::gezi::Vector::index_type,::gezi::Vector::index_type,::std::string,bool ) ;
            
            Vector_exposer.def( 
                "Init"
                , Init_function_type( &::gezi::Vector::Init )
                , ( bp::arg("input"), bp::arg("startIndex")=(::gezi::Vector::index_type)(0), bp::arg("length_")=(::gezi::Vector::index_type)(0), bp::arg("sep")=",\t ", bp::arg("indexOnly")=(bool)(false) ) );
        
        }
        { //::gezi::Vector::Init
        
            typedef void ( ::gezi::Vector::*Init_function_type)( ::gezi::Vector::index_type,::std::vector< int > &,::std::vector< double > & ) ;
            
            Vector_exposer.def( 
                "Init"
                , Init_function_type( &::gezi::Vector::Init )
                , ( bp::arg("length_"), bp::arg("indices_"), bp::arg("values_") ) );
        
        }
        { //::gezi::Vector::Init
        
            typedef void ( ::gezi::Vector::*Init_function_type)( ::std::vector< double > & ) ;
            
            Vector_exposer.def( 
                "Init"
                , Init_function_type( &::gezi::Vector::Init )
                , ( bp::arg("values_") ) );
        
        }
        { //::gezi::Vector::IsDense
        
            typedef bool ( ::gezi::Vector::*IsDense_function_type)(  ) const;
            
            Vector_exposer.def( 
                "IsDense"
                , IsDense_function_type( &::gezi::Vector::IsDense ) );
        
        }
        { //::gezi::Vector::IsSparse
        
            typedef bool ( ::gezi::Vector::*IsSparse_function_type)(  ) const;
            
            Vector_exposer.def( 
                "IsSparse"
                , IsSparse_function_type( &::gezi::Vector::IsSparse ) );
        
        }
        { //::gezi::Vector::Length
        
            typedef int ( ::gezi::Vector::*Length_function_type)(  ) const;
            
            Vector_exposer.def( 
                "Length"
                , Length_function_type( &::gezi::Vector::Length ) );
        
        }
        { //::gezi::Vector::MakeDense
        
            typedef void ( ::gezi::Vector::*MakeDense_function_type)(  ) ;
            
            Vector_exposer.def( 
                "MakeDense"
                , MakeDense_function_type( &::gezi::Vector::MakeDense ) );
        
        }
        { //::gezi::Vector::MakeSparse
        
            typedef void ( ::gezi::Vector::*MakeSparse_function_type)(  ) ;
            
            Vector_exposer.def( 
                "MakeSparse"
                , MakeSparse_function_type( &::gezi::Vector::MakeSparse ) );
        
        }
        { //::gezi::Vector::Norm
        
            typedef ::gezi::Vector::value_type ( ::gezi::Vector::*Norm_function_type)(  ) const;
            
            Vector_exposer.def( 
                "Norm"
                , Norm_function_type( &::gezi::Vector::Norm ) );
        
        }
        { //::gezi::Vector::NumNonZeros
        
            typedef int ( ::gezi::Vector::*NumNonZeros_function_type)(  ) ;
            
            Vector_exposer.def( 
                "NumNonZeros"
                , NumNonZeros_function_type( &::gezi::Vector::NumNonZeros ) );
        
        }
        { //::gezi::Vector::PrepareDense
        
            typedef void ( ::gezi::Vector::*PrepareDense_function_type)(  ) ;
            
            Vector_exposer.def( 
                "PrepareDense"
                , PrepareDense_function_type( &::gezi::Vector::PrepareDense ) );
        
        }
        { //::gezi::Vector::Resize
        
            typedef void ( ::gezi::Vector::*Resize_function_type)( ::gezi::Vector::index_type,::gezi::Vector::value_type ) ;
            
            Vector_exposer.def( 
                "Resize"
                , Resize_function_type( &::gezi::Vector::Resize )
                , ( bp::arg("length_"), bp::arg("value_")=0 ) );
        
        }
        { //::gezi::Vector::ScaleBy
        
            typedef void ( ::gezi::Vector::*ScaleBy_function_type)( ::gezi::Vector::value_type ) ;
            
            Vector_exposer.def( 
                "ScaleBy"
                , ScaleBy_function_type( &::gezi::Vector::ScaleBy )
                , ( bp::arg("d") ) );
        
        }
        { //::gezi::Vector::SetIndex
        
            typedef void ( ::gezi::Vector::*SetIndex_function_type)( ::gezi::Vector::index_type,::gezi::Vector::index_type ) ;
            
            Vector_exposer.def( 
                "SetIndex"
                , SetIndex_function_type( &::gezi::Vector::SetIndex )
                , ( bp::arg("index"), bp::arg("indexValue") ) );
        
        }
        { //::gezi::Vector::SetLength
        
            typedef void ( ::gezi::Vector::*SetLength_function_type)( int ) ;
            
            Vector_exposer.def( 
                "SetLength"
                , SetLength_function_type( &::gezi::Vector::SetLength )
                , ( bp::arg("length_") ) );
        
        }
        { //::gezi::Vector::SetValue
        
            typedef void ( ::gezi::Vector::*SetValue_function_type)( ::gezi::Vector::index_type,::gezi::Vector::value_type ) ;
            
            Vector_exposer.def( 
                "SetValue"
                , SetValue_function_type( &::gezi::Vector::SetValue )
                , ( bp::arg("index"), bp::arg("value") ) );
        
        }
        { //::gezi::Vector::Sparsify
        
            typedef void ( ::gezi::Vector::*Sparsify_function_type)( ::gezi::Vector::value_type ) ;
            
            Vector_exposer.def( 
                "Sparsify"
                , Sparsify_function_type( &::gezi::Vector::Sparsify )
                , ( bp::arg("maxSparsity") ) );
        
        }
        { //::gezi::Vector::Sparsify
        
            typedef void ( ::gezi::Vector::*Sparsify_function_type)(  ) ;
            
            Vector_exposer.def( 
                "Sparsify"
                , Sparsify_function_type( &::gezi::Vector::Sparsify ) );
        
        }
        { //::gezi::Vector::SquaredNorm
        
            typedef ::gezi::Vector::value_type ( ::gezi::Vector::*SquaredNorm_function_type)(  ) const;
            
            Vector_exposer.def( 
                "SquaredNorm"
                , SquaredNorm_function_type( &::gezi::Vector::SquaredNorm ) );
        
        }
        { //::gezi::Vector::Str
        
            typedef ::std::string ( ::gezi::Vector::*Str_function_type)( ::std::string ) const;
            
            Vector_exposer.def( 
                "Str"
                , Str_function_type( &::gezi::Vector::Str )
                , ( bp::arg("sep")="," ) );
        
        }
        { //::gezi::Vector::Subtract
        
            typedef void ( ::gezi::Vector::*Subtract_function_type)( ::gezi::Vector const & ) ;
            
            Vector_exposer.def( 
                "Subtract"
                , Subtract_function_type( &::gezi::Vector::Subtract )
                , ( bp::arg("other") ) );
        
        }
        { //::gezi::Vector::Swap
        
            typedef void ( ::gezi::Vector::*Swap_function_type)( ::gezi::Vector & ) ;
            
            Vector_exposer.def( 
                "Swap"
                , Swap_function_type( &::gezi::Vector::Swap )
                , ( bp::arg("other") ) );
        
        }
        { //::gezi::Vector::ToDense
        
            typedef void ( ::gezi::Vector::*ToDense_function_type)( ::std::vector< double > & ) ;
            
            Vector_exposer.def( 
                "ToDense"
                , ToDense_function_type( &::gezi::Vector::ToDense )
                , ( bp::arg("values_") ) );
        
        }
        { //::gezi::Vector::ToDense
        
            typedef void ( ::gezi::Vector::*ToDense_function_type)(  ) ;
            
            Vector_exposer.def( 
                "ToDense"
                , ToDense_function_type( &::gezi::Vector::ToDense ) );
        
        }
        { //::gezi::Vector::ToSparse
        
            typedef void ( ::gezi::Vector::*ToSparse_function_type)(  ) ;
            
            Vector_exposer.def( 
                "ToSparse"
                , ToSparse_function_type( &::gezi::Vector::ToSparse ) );
        
        }
        { //::gezi::Vector::Value
        
            typedef ::gezi::Vector::value_type ( ::gezi::Vector::*Value_function_type)( ::gezi::Vector::index_type ) const;
            
            Vector_exposer.def( 
                "Value"
                , Value_function_type( &::gezi::Vector::Value )
                , ( bp::arg("index") ) );
        
        }
        { //::gezi::Vector::Values
        
            typedef ::std::vector< double > const & ( ::gezi::Vector::*Values_function_type)(  ) const;
            
            Vector_exposer.def( 
                "Values"
                , Values_function_type( &::gezi::Vector::Values )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::gezi::Vector::Values
        
            typedef ::std::vector< double > & ( ::gezi::Vector::*Values_function_type)(  ) ;
            
            Vector_exposer.def( 
                "Values"
                , Values_function_type( &::gezi::Vector::Values )
                    /* undefined call policies */ );
        
        }
        { //::gezi::Vector::back
        
            typedef ::gezi::Vector::value_type ( ::gezi::Vector::*back_function_type)(  ) ;
            
            Vector_exposer.def( 
                "back"
                , back_function_type( &::gezi::Vector::back ) );
        
        }
        { //::gezi::Vector::clear
        
            typedef void ( ::gezi::Vector::*clear_function_type)(  ) ;
            
            Vector_exposer.def( 
                "clear"
                , clear_function_type( &::gezi::Vector::clear ) );
        
        }
        { //::gezi::Vector::dot
        
            typedef ::Float ( ::gezi::Vector::*dot_function_type)( ::gezi::Vector const & ) const;
            
            Vector_exposer.def( 
                "dot"
                , dot_function_type( &::gezi::Vector::dot )
                , ( bp::arg("other") ) );
        
        }
        { //::gezi::Vector::empty
        
            typedef bool ( ::gezi::Vector::*empty_function_type)(  ) const;
            
            Vector_exposer.def( 
                "empty"
                , empty_function_type( &::gezi::Vector::empty ) );
        
        }
        { //::gezi::Vector::erase
        
            typedef void ( ::gezi::Vector::*erase_function_type)( ::gezi::Vector::iterator ) ;
            
            Vector_exposer.def( 
                "erase"
                , erase_function_type( &::gezi::Vector::erase )
                , ( bp::arg("pos") ) );
        
        }
        { //::gezi::Vector::erase
        
            typedef void ( ::gezi::Vector::*erase_function_type)( ::gezi::Vector::iterator,::gezi::Vector::iterator ) ;
            
            Vector_exposer.def( 
                "erase"
                , erase_function_type( &::gezi::Vector::erase )
                , ( bp::arg("first"), bp::arg("last") ) );
        
        }
        { //::gezi::Vector::front
        
            typedef ::gezi::Vector::value_type ( ::gezi::Vector::*front_function_type)(  ) ;
            
            Vector_exposer.def( 
                "front"
                , front_function_type( &::gezi::Vector::front ) );
        
        }
        { //::gezi::Vector::insert
        
            typedef ::gezi::Vector::iterator ( ::gezi::Vector::*insert_function_type)( ::gezi::Vector::iterator,::gezi::Vector::value_type const & ) ;
            
            Vector_exposer.def( 
                "insert"
                , insert_function_type( &::gezi::Vector::insert )
                , ( bp::arg("position"), bp::arg("val") ) );
        
        }
        { //::gezi::Vector::operator()
        
            typedef ::gezi::Vector & ( ::gezi::Vector::*__call___function_type)( int,::gezi::Vector::value_type ) ;
            
            Vector_exposer.def( 
                "__call__"
                , __call___function_type( &::gezi::Vector::operator() )
                , ( bp::arg("index"), bp::arg("value") )
                    /* undefined call policies */ );
        
        }
        Vector_exposer.def( bp::self *= bp::other< gezi::Vector::value_type >() );
        Vector_exposer.def( bp::self += bp::self );
        Vector_exposer.def( bp::self -= bp::self );
        Vector_exposer.def( bp::self /= bp::other< gezi::Vector::value_type >() );
        { //::gezi::Vector::operator=
        
            typedef ::gezi::Vector & ( ::gezi::Vector::*assign_function_type)( ::gezi::Vector const & ) ;
            
            Vector_exposer.def( 
                "assign"
                , assign_function_type( &::gezi::Vector::operator= )
                , ( bp::arg("arg0") )
                , bp::return_self< >() );
        
        }
        Vector_exposer.def( bp::self == bp::self );
        { //::gezi::Vector::operator[]
        
            typedef ::gezi::Vector::value_type ( ::gezi::Vector::*__getitem___function_type)( ::gezi::Vector::index_type ) const;
            
            Vector_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::gezi::Vector::operator[] )
                , ( bp::arg("index") ) );
        
        }
        { //::gezi::Vector::push_back
        
            typedef void ( ::gezi::Vector::*push_back_function_type)( ::gezi::Vector::value_type ) ;
            
            Vector_exposer.def( 
                "push_back"
                , push_back_function_type( &::gezi::Vector::push_back )
                , ( bp::arg("item") ) );
        
        }
        { //::gezi::Vector::resize
        
            typedef void ( ::gezi::Vector::*resize_function_type)( ::gezi::Vector::index_type,::gezi::Vector::value_type ) ;
            
            Vector_exposer.def( 
                "resize"
                , resize_function_type( &::gezi::Vector::resize )
                , ( bp::arg("length_"), bp::arg("value_")=0 ) );
        
        }
        { //::gezi::Vector::size
        
            typedef ::size_t ( ::gezi::Vector::*size_function_type)(  ) const;
            
            Vector_exposer.def( 
                "size"
                , size_function_type( &::gezi::Vector::size ) );
        
        }
        Vector_exposer.def_readwrite( "indices", &gezi::Vector::indices );
        Vector_exposer.def_readwrite( "keepDense", &gezi::Vector::keepDense );
        Vector_exposer.def_readwrite( "keepSparse", &gezi::Vector::keepSparse );
        Vector_exposer.def_readwrite( "normalized", &gezi::Vector::normalized );
        Vector_exposer.def_readwrite( "numNonZeros", &gezi::Vector::numNonZeros );
        Vector_exposer.def_readwrite( "sparsityRatio", &gezi::Vector::sparsityRatio );
        Vector_exposer.def_readwrite( "values", &gezi::Vector::values );
    }
}

#include "../include/python_util.h"
// This file has been generated by Py++.

#include "boost/python.hpp"

#include "boost/python/suite/indexing/vector_indexing_suite.hpp"

#include "../include/word_seg.h"

#include "../include/log_util.h"

#include "../include/string_util.h"

#include "../include/reg_util.h"

#include "../include/tools/content_process.h"

namespace bp = boost::python;

BOOST_PYTHON_MODULE(libwordseg){
UseStrVec;
			UseIntVec;
			UseFloatVec;
			UseDoubleVec;
			UseStrStrMap;
			UseStrIntMap;
			UseStrFloatMap;
			UseStrDoubleMap;
			
    { //::std::vector< std::string >
        typedef bp::class_< std::vector< std::string > > vector_less__std_scope_string__greater__exposer_t;
        vector_less__std_scope_string__greater__exposer_t vector_less__std_scope_string__greater__exposer = vector_less__std_scope_string__greater__exposer_t( "vector_less__std_scope_string__greater_" );
        bp::scope vector_less__std_scope_string__greater__scope( vector_less__std_scope_string__greater__exposer );
        vector_less__std_scope_string__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< std::string >, true >() );
    }

    { //::std::vector< std::wstring >
        typedef bp::class_< std::vector< std::wstring > > vector_less__std_scope_wstring__greater__exposer_t;
        vector_less__std_scope_wstring__greater__exposer_t vector_less__std_scope_wstring__greater__exposer = vector_less__std_scope_wstring__greater__exposer_t( "vector_less__std_scope_wstring__greater_" );
        bp::scope vector_less__std_scope_wstring__greater__scope( vector_less__std_scope_wstring__greater__exposer );
        vector_less__std_scope_wstring__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< std::wstring >, true >() );
    }

    bp::class_< std::vector< std::string > >("vector_less__std_scope_string__greater_")    
        .def( bp::vector_indexing_suite< ::std::vector< std::string >, true >() );

    { //::gezi::LogHelper
        typedef bp::class_< gezi::LogHelper > LogHelper_exposer_t;
        LogHelper_exposer_t LogHelper_exposer = LogHelper_exposer_t( "LogHelper", bp::init< bp::optional< int > >(( bp::arg("log_level")=(int)(16) )) );
        bp::scope LogHelper_scope( LogHelper_exposer );
        bp::implicitly_convertible< int, gezi::LogHelper >();
        LogHelper_exposer.def( bp::init< bool >(( bp::arg("with_conf") )) );
        bp::implicitly_convertible< bool, gezi::LogHelper >();
        LogHelper_exposer.def( bp::init< std::string const &, std::string const & >(( bp::arg("conf_path"), bp::arg("conf_file") )) );
        { //::gezi::LogHelper::set_level
        
            typedef void ( *set_level_function_type )( int );
            
            LogHelper_exposer.def( 
                "set_level"
                , set_level_function_type( &::gezi::LogHelper::set_level )
                , ( bp::arg("log_level") ) );
        
        }
        LogHelper_exposer.staticmethod( "set_level" );
    }

    bp::class_< gezi::ThreadLogHelper >( "ThreadLogHelper", bp::init< >() );

    { //::gezi::all_en
    
        typedef bool ( *all_en_function_type )( ::std::string const & );
        
        bp::def( 
            "all_en"
            , all_en_function_type( &::gezi::all_en )
            , ( bp::arg("phrase") ) );
    
    }

    { //::gezi::contains
    
        typedef bool ( *contains_function_type )( ::std::string,::std::string );
        
        bp::def( 
            "contains"
            , contains_function_type( &::gezi::contains )
            , ( bp::arg("input"), bp::arg("part") ) );
    
    }

    { //::gezi::endswith
    
        typedef bool ( *endswith_function_type )( ::std::string,::std::string );
        
        bp::def( 
            "endswith"
            , endswith_function_type( &::gezi::endswith )
            , ( bp::arg("input"), bp::arg("part") ) );
    
    }

    { //::gezi::erase
    
        typedef ::std::string ( *erase_function_type )( ::std::string,::std::string );
        
        bp::def( 
            "erase"
            , erase_function_type( &::gezi::erase )
            , ( bp::arg("content"), bp::arg("chars") ) );
    
    }

    { //::gezi::extract_chinese
    
        typedef ::std::string ( *extract_chinese_function_type )( ::std::string & );
        
        bp::def( 
            "extract_chinese"
            , extract_chinese_function_type( &::gezi::extract_chinese )
            , ( bp::arg("temp") ) );
    
    }

    { //::gezi::extract_chinese
    
        typedef ::std::string ( *extract_chinese_function_type )( ::std::string const & );
        
        bp::def( 
            "extract_chinese"
            , extract_chinese_function_type( &::gezi::extract_chinese )
            , ( bp::arg("temp") ) );
    
    }

    { //::gezi::extract_suspect_symb
    
        typedef ::std::string ( *extract_suspect_symb_function_type )( ::std::string const & );
        
        bp::def( 
            "extract_suspect_symb"
            , extract_suspect_symb_function_type( &::gezi::extract_suspect_symb )
            , ( bp::arg("temp") ) );
    
    }

    { //::gezi::filter_str
    
        typedef ::std::string ( *filter_str_function_type )( ::std::string const & );
        
        bp::def( 
            "filter_str"
            , filter_str_function_type( &::gezi::filter_str )
            , ( bp::arg("temp") ) );
    
    }

    { //::gezi::gbk_substr
    
        typedef ::std::string ( *gbk_substr_function_type )( ::std::string const &,int,::size_t );
        
        bp::def( 
            "gbk_substr"
            , gbk_substr_function_type( &::gezi::gbk_substr )
            , ( bp::arg("input"), bp::arg("start_"), bp::arg("len")=(long unsigned int)(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) ) );
    
    }

    { //::gezi::is_alpha_only
    
        typedef bool ( *is_alpha_only_function_type )( ::std::string const & );
        
        bp::def( 
            "is_alpha_only"
            , is_alpha_only_function_type( &::gezi::is_alpha_only )
            , ( bp::arg("input") ) );
    
    }

    { //::gezi::is_en_dominate
    
        typedef bool ( *is_en_dominate_function_type )( ::std::string const &,int );
        
        bp::def( 
            "is_en_dominate"
            , is_en_dominate_function_type( &::gezi::is_en_dominate )
            , ( bp::arg("phrase"), bp::arg("var")=(int)(3) ) );
    
    }

    { //::gezi::is_gb2312
    
        typedef bool ( *is_gb2312_function_type )( unsigned char,unsigned char );
        
        bp::def( 
            "is_gb2312"
            , is_gb2312_function_type( &::gezi::is_gb2312 )
            , ( bp::arg("ch1"), bp::arg("ch2") ) );
    
    }

    { //::gezi::is_gbk_ch
    
        typedef bool ( *is_gbk_ch_function_type )( ::std::string const & );
        
        bp::def( 
            "is_gbk_ch"
            , is_gbk_ch_function_type( &::gezi::is_gbk_ch )
            , ( bp::arg("phrase") ) );
    
    }

    { //::gezi::is_gbk_ch
    
        typedef bool ( *is_gbk_ch_function_type )( unsigned char,unsigned char );
        
        bp::def( 
            "is_gbk_ch"
            , is_gbk_ch_function_type( &::gezi::is_gbk_ch )
            , ( bp::arg("ch1"), bp::arg("ch2") ) );
    
    }

    { //::gezi::max
    
        typedef ::std::string ( *max_function_type )( ::std::string,int );
        
        bp::def( 
            "max"
            , max_function_type( &::gezi::max )
            , ( bp::arg("input"), bp::arg("length") ) );
    
    }

    { //::gezi::reg_remove
    
        typedef ::std::wstring ( *reg_remove_function_type )( ::std::wstring const &,::std::wstring const & );
        
        bp::def( 
            "reg_remove"
            , reg_remove_function_type( &::gezi::reg_remove )
            , ( bp::arg("input"), bp::arg("pattern") ) );
    
    }

    { //::gezi::reg_remove
    
        typedef ::std::string ( *reg_remove_function_type )( ::std::string const &,::std::string const & );
        
        bp::def( 
            "reg_remove"
            , reg_remove_function_type( &::gezi::reg_remove )
            , ( bp::arg("input"), bp::arg("pattern") ) );
    
    }

    { //::gezi::reg_replace
    
        typedef ::std::wstring ( *reg_replace_function_type )( ::std::wstring const &,::std::wstring const &,::std::wstring const & );
        
        bp::def( 
            "reg_replace"
            , reg_replace_function_type( &::gezi::reg_replace )
            , ( bp::arg("input"), bp::arg("pattern"), bp::arg("replacement")="\000\000\000" ) );
    
    }

    { //::gezi::reg_replace
    
        typedef ::std::string ( *reg_replace_function_type )( ::std::string const &,::std::string const &,::std::string const & );
        
        bp::def( 
            "reg_replace"
            , reg_replace_function_type( &::gezi::reg_replace )
            , ( bp::arg("input"), bp::arg("pattern"), bp::arg("replacement")="" ) );
    
    }

    { //::gezi::ufo::reg_search
    
        typedef ::std::vector< std::wstring > ( *reg_search_function_type )( ::std::wstring const &,::boost::wregex &,int );
        
        bp::def( 
            "reg_search"
            , reg_search_function_type( &::gezi::ufo::reg_search )
            , ( bp::arg("content"), bp::arg("reg"), bp::arg("index")=(int)(1) ) );
    
    }

    { //::gezi::ufo::reg_search
    
        typedef ::std::vector< std::string > ( *reg_search_function_type )( ::std::string const &,::std::string const &,int );
        
        bp::def( 
            "reg_search"
            , reg_search_function_type( &::gezi::ufo::reg_search )
            , ( bp::arg("content"), bp::arg("pattern"), bp::arg("index")=(int)(1) ) );
    
    }

    { //::gezi::ufo::reg_search
    
        typedef ::std::vector< std::string > ( *reg_search_function_type )( ::std::string const &,::boost::regex &,int );
        
        bp::def( 
            "reg_search"
            , reg_search_function_type( &::gezi::ufo::reg_search )
            , ( bp::arg("content"), bp::arg("reg"), bp::arg("index")=(int)(1) ) );
    
    }

    { //::gezi::reg_search
    
        typedef void ( *reg_search_function_type )( ::std::wstring const &,::std::wstring const &,::std::vector< std::wstring > &,int );
        
        bp::def( 
            "reg_search"
            , reg_search_function_type( &::gezi::reg_search )
            , ( bp::arg("content"), bp::arg("pattern"), bp::arg("result"), bp::arg("index")=(int)(1) ) );
    
    }

    { //::gezi::reg_search
    
        typedef ::std::wstring ( *reg_search_function_type )( ::std::wstring const &,::std::wstring const &,int );
        
        bp::def( 
            "reg_search"
            , reg_search_function_type( &::gezi::reg_search )
            , ( bp::arg("content"), bp::arg("pattern"), bp::arg("index")=(int)(1) ) );
    
    }

    { //::gezi::reg_search
    
        typedef void ( *reg_search_function_type )( ::std::string const &,::std::string const &,::std::vector< std::string > &,int );
        
        bp::def( 
            "reg_search"
            , reg_search_function_type( &::gezi::reg_search )
            , ( bp::arg("content"), bp::arg("pattern"), bp::arg("result"), bp::arg("index")=(int)(1) ) );
    
    }

    { //::gezi::reg_search
    
        typedef ::std::string ( *reg_search_function_type )( ::std::string const &,::std::string const &,int );
        
        bp::def( 
            "reg_search"
            , reg_search_function_type( &::gezi::reg_search )
            , ( bp::arg("content"), bp::arg("pattern"), bp::arg("index")=(int)(1) ) );
    
    }

    { //::gezi::reg_search
    
        typedef void ( *reg_search_function_type )( ::std::wstring const &,::boost::wregex &,::std::vector< std::wstring > &,int );
        
        bp::def( 
            "reg_search"
            , reg_search_function_type( &::gezi::reg_search )
            , ( bp::arg("content"), bp::arg("reg"), bp::arg("result"), bp::arg("index")=(int)(1) ) );
    
    }

    { //::gezi::reg_search
    
        typedef ::std::wstring ( *reg_search_function_type )( ::std::wstring const &,::boost::wregex &,int );
        
        bp::def( 
            "reg_search"
            , reg_search_function_type( &::gezi::reg_search )
            , ( bp::arg("content"), bp::arg("reg"), bp::arg("index")=(int)(1) ) );
    
    }

    { //::gezi::reg_search
    
        typedef void ( *reg_search_function_type )( ::std::string const &,::boost::regex &,::std::vector< std::string > &,int );
        
        bp::def( 
            "reg_search"
            , reg_search_function_type( &::gezi::reg_search )
            , ( bp::arg("content"), bp::arg("reg"), bp::arg("result"), bp::arg("index")=(int)(1) ) );
    
    }

    { //::gezi::reg_search
    
        typedef ::std::string ( *reg_search_function_type )( ::std::string const &,::boost::regex &,int );
        
        bp::def( 
            "reg_search"
            , reg_search_function_type( &::gezi::reg_search )
            , ( bp::arg("content"), bp::arg("reg"), bp::arg("index")=(int)(1) ) );
    
    }

    { //::gezi::reg_split
    
        typedef ::std::vector< std::wstring > ( *reg_split_function_type )( ::std::wstring const &,::std::wstring const & );
        
        bp::def( 
            "reg_split"
            , reg_split_function_type( &::gezi::reg_split )
            , ( bp::arg("input"), bp::arg("pattern") ) );
    
    }

    { //::gezi::reg_split
    
        typedef ::std::vector< std::string > ( *reg_split_function_type )( ::std::string const &,::std::string const & );
        
        bp::def( 
            "reg_split"
            , reg_split_function_type( &::gezi::reg_split )
            , ( bp::arg("input"), bp::arg("pattern") ) );
    
    }

    { //::gezi::remove_dupspace
    
        typedef ::std::string ( *remove_dupspace_function_type )( ::std::string const & );
        
        bp::def( 
            "remove_dupspace"
            , remove_dupspace_function_type( &::gezi::remove_dupspace )
            , ( bp::arg("input") ) );
    
    }

    { //::gezi::remove_space_cn
    
        typedef ::std::string ( *remove_space_cn_function_type )( ::std::string const & );
        
        bp::def( 
            "remove_space_cn"
            , remove_space_cn_function_type( &::gezi::remove_space_cn )
            , ( bp::arg("phrase") ) );
    
    }

    { //::gezi::remove_space_cnonly
    
        typedef ::std::string ( *remove_space_cnonly_function_type )( ::std::string const & );
        
        bp::def( 
            "remove_space_cnonly"
            , remove_space_cnonly_function_type( &::gezi::remove_space_cnonly )
            , ( bp::arg("phrase") ) );
    
    }

    { //::gezi::replace_special_whitespace
    
        typedef ::std::string ( *replace_special_whitespace_function_type )( ::std::string const &,char const );
        
        bp::def( 
            "replace_special_whitespace"
            , replace_special_whitespace_function_type( &::gezi::replace_special_whitespace )
            , ( bp::arg("s"), bp::arg("rep")=(char const)(' ') ) );
    
    }

    { //::gezi::seg_init
    
        typedef bool ( *seg_init_function_type )( ::std::string const &,int,::std::string const & );
        
        bp::def( 
            "seg_init"
            , seg_init_function_type( &::gezi::seg_init )
            , ( bp::arg("dict_dir")="./data/wordseg", bp::arg("type")=(int)(0), bp::arg("conf_path")="./conf/scw.conf" ) );
    
    }

    { //::gezi::seg_init2
    
        typedef bool ( *seg_init2_function_type )( ::std::string const &,int,::std::string const & );
        
        bp::def( 
            "seg_init2"
            , seg_init2_function_type( &::gezi::seg_init2 )
            , ( bp::arg("dict_dir")="./data/wordseg", bp::arg("type")=(int)(0), bp::arg("conf_path")="./conf/scw.conf" ) );
    
    }

    { //::gezi::seg_set_bufsize
    
        typedef void ( *seg_set_bufsize_function_type )( int );
        
        bp::def( 
            "seg_set_bufsize"
            , seg_set_bufsize_function_type( &::gezi::seg_set_bufsize )
            , ( bp::arg("max_len") ) );
    
    }

    { //::gezi::segment
    
        typedef ::std::string ( *segment_function_type )( ::std::string const &,::std::string,int );
        
        bp::def( 
            "segment"
            , segment_function_type( &::gezi::segment )
            , ( bp::arg("input"), bp::arg("sep")="\011", bp::arg("type")=(int)(4) ) );
    
    }

    { //::gezi::segment
    
        typedef bool ( *segment_function_type )( ::std::string const &,::std::vector< std::string > &,int );
        
        bp::def( 
            "segment"
            , segment_function_type( &::gezi::segment )
            , ( bp::arg("input"), bp::arg("result"), bp::arg("type")=(int)(4) ) );
    
    }

    { //::gezi::segment
    
        typedef bool ( *segment_function_type )( ::std::string const &,::gezi::SegHandle &,int );
        
        bp::def( 
            "segment"
            , segment_function_type( &::gezi::segment )
            , ( bp::arg("input"), bp::arg("handle"), bp::arg("type")=(int)(4) ) );
    
    }

    { //::gezi::segment2
    
        typedef ::std::string ( *segment2_function_type )( ::std::string const &,::std::string,int );
        
        bp::def( 
            "segment2"
            , segment2_function_type( &::gezi::segment2 )
            , ( bp::arg("input"), bp::arg("sep")="\011", bp::arg("type")=(int)(4) ) );
    
    }

    { //::gezi::segment2
    
        typedef bool ( *segment2_function_type )( ::std::string const &,::std::vector< std::string > &,int );
        
        bp::def( 
            "segment2"
            , segment2_function_type( &::gezi::segment2 )
            , ( bp::arg("input"), bp::arg("result"), bp::arg("type")=(int)(4) ) );
    
    }

    { //::gezi::startswith
    
        typedef bool ( *startswith_function_type )( ::std::string,::std::string );
        
        bp::def( 
            "startswith"
            , startswith_function_type( &::gezi::startswith )
            , ( bp::arg("input"), bp::arg("part") ) );
    
    }

    { //::gezi::str_replace_all
    
        typedef ::std::string ( *str_replace_all_function_type )( ::std::string const &,::std::string const &,::std::string const & );
        
        bp::def( 
            "str_replace_all"
            , str_replace_all_function_type( &::gezi::str_replace_all )
            , ( bp::arg("tstr"), bp::arg("old_value"), bp::arg("new_value") ) );
    
    }

    { //::gezi::strip_html
    
        typedef ::std::string ( *strip_html_function_type )( ::std::string );
        
        bp::def( 
            "strip_html"
            , strip_html_function_type( &::gezi::strip_html )
            , ( bp::arg("src") ) );
    
    }

    { //::gezi::to_cnvec
    
        typedef ::std::vector< std::string > ( *to_cnvec_function_type )( ::std::string );
        
        bp::def( 
            "to_cnvec"
            , to_cnvec_function_type( &::gezi::to_cnvec )
            , ( bp::arg("line") ) );
    
    }

    { //::gezi::wchar_count
    
        typedef int ( *wchar_count_function_type )( char const *,int );
        
        bp::def( 
            "wchar_count"
            , wchar_count_function_type( &::gezi::wchar_count )
            , ( bp::arg("buf"), bp::arg("len") ) );
    
    }

    { //::gezi::word_count
    
        typedef int ( *word_count_function_type )( ::std::string const & );
        
        bp::def( 
            "word_count"
            , word_count_function_type( &::gezi::word_count )
            , ( bp::arg("phrase") ) );
    
    }

    { //::gezi::ufo::wreg_search
    
        typedef ::std::vector< std::wstring > ( *wreg_search_function_type )( ::std::wstring const &,::std::wstring const &,int );
        
        bp::def( 
            "wreg_search"
            , wreg_search_function_type( &::gezi::ufo::wreg_search )
            , ( bp::arg("content"), bp::arg("pattern"), bp::arg("index")=(int)(1) ) );
    
    }
}

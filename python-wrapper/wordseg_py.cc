// This file has been generated by Py++.

#include "boost/python.hpp"

#include "boost/python/suite/indexing/vector_indexing_suite.hpp"

#include "../include/word_seg.h"

namespace bp = boost::python;

BOOST_PYTHON_MODULE(libwordseg){
    bp::class_< std::vector< std::string > >("vector_less__std_scope_string__greater_")    
        .def( bp::vector_indexing_suite< ::std::vector< std::string >, true >() );

    { //::gezi::seg_init
    
        typedef bool ( *seg_init_function_type )( ::std::string const &,int,::std::string const & );
        
        bp::def( 
            "seg_init"
            , seg_init_function_type( &::gezi::seg_init )
            , ( bp::arg("dict_dir")="./data/wordseg", bp::arg("type")=(int)(0), bp::arg("conf_path")="./conf/scw.conf" ) );
    
    }

    { //::gezi::seg_set_bufsize
    
        typedef void ( *seg_set_bufsize_function_type )( int );
        
        bp::def( 
            "seg_set_bufsize"
            , seg_set_bufsize_function_type( &::gezi::seg_set_bufsize )
            , ( bp::arg("max_len") ) );
    
    }

    { //::gezi::segment
    
        typedef ::std::string ( *segment_function_type )( ::std::string const &,int );
        
        bp::def( 
            "segment"
            , segment_function_type( &::gezi::segment )
            , ( bp::arg("input"), bp::arg("type")=(int)(4) ) );
    
    }

    { //::gezi::segment
    
        typedef bool ( *segment_function_type )( ::std::string const &,::std::vector< std::string > &,int );
        
        bp::def( 
            "segment"
            , segment_function_type( &::gezi::segment )
            , ( bp::arg("input"), bp::arg("result"), bp::arg("type")=(int)(4) ) );
    
    }

    { //::gezi::segment
    
        typedef bool ( *segment_function_type )( ::std::string const &,::gezi::SegHandle &,int );
        
        bp::def( 
            "segment"
            , segment_function_type( &::gezi::segment )
            , ( bp::arg("input"), bp::arg("handle"), bp::arg("type")=(int)(4) ) );
    
    }
}

#include "../include/python_util.h"
// This file has been generated by Py++.

#include "boost/python.hpp"

#include "boost/python/suite/indexing/vector_indexing_suite.hpp"

#include "../include/word_seg.h"

#include "../include/log_util.h"

namespace bp = boost::python;

BOOST_PYTHON_MODULE(libwordseg){
UseStrVec;
			UseIntVec;
			UseFloatVec;
			UseDoubleVec;
			UseStrStrMap;
			UseStrIntMap;
			UseStrFloatMap;
			UseStrDoubleMap;
			
    bp::class_< std::vector< std::string > >("vector_less__std_scope_string__greater_")    
        .def( bp::vector_indexing_suite< ::std::vector< std::string >, true >() );

    { //::gezi::LogHelper
        typedef bp::class_< gezi::LogHelper > LogHelper_exposer_t;
        LogHelper_exposer_t LogHelper_exposer = LogHelper_exposer_t( "LogHelper", bp::init< bp::optional< int > >(( bp::arg("log_level")=(int)(16) )) );
        bp::scope LogHelper_scope( LogHelper_exposer );
        bp::implicitly_convertible< int, gezi::LogHelper >();
        LogHelper_exposer.def( bp::init< bool >(( bp::arg("with_conf") )) );
        bp::implicitly_convertible< bool, gezi::LogHelper >();
        LogHelper_exposer.def( bp::init< std::string const &, std::string const & >(( bp::arg("conf_path"), bp::arg("conf_file") )) );
        { //::gezi::LogHelper::set_level
        
            typedef void ( *set_level_function_type )( int );
            
            LogHelper_exposer.def( 
                "set_level"
                , set_level_function_type( &::gezi::LogHelper::set_level )
                , ( bp::arg("log_level") ) );
        
        }
        LogHelper_exposer.staticmethod( "set_level" );
    }

    bp::class_< gezi::ThreadLogHelper >( "ThreadLogHelper", bp::init< >() );

    { //::gezi::seg_init
    
        typedef bool ( *seg_init_function_type )( ::std::string const &,int,::std::string const & );
        
        bp::def( 
            "seg_init"
            , seg_init_function_type( &::gezi::seg_init )
            , ( bp::arg("dict_dir")="./data/wordseg", bp::arg("type")=(int)(0), bp::arg("conf_path")="./conf/scw.conf" ) );
    
    }

    { //::gezi::seg_set_bufsize
    
        typedef void ( *seg_set_bufsize_function_type )( int );
        
        bp::def( 
            "seg_set_bufsize"
            , seg_set_bufsize_function_type( &::gezi::seg_set_bufsize )
            , ( bp::arg("max_len") ) );
    
    }

    { //::gezi::segment
    
        typedef ::std::string ( *segment_function_type )( ::std::string const &,::std::string,int );
        
        bp::def( 
            "segment"
            , segment_function_type( &::gezi::segment )
            , ( bp::arg("input"), bp::arg("sep")="\011", bp::arg("type")=(int)(4) ) );
    
    }

    { //::gezi::segment
    
        typedef bool ( *segment_function_type )( ::std::string const &,::std::vector< std::string > &,int );
        
        bp::def( 
            "segment"
            , segment_function_type( &::gezi::segment )
            , ( bp::arg("input"), bp::arg("result"), bp::arg("type")=(int)(4) ) );
    
    }

    { //::gezi::segment
    
        typedef bool ( *segment_function_type )( ::std::string const &,::gezi::SegHandle &,int );
        
        bp::def( 
            "segment"
            , segment_function_type( &::gezi::segment )
            , ( bp::arg("input"), bp::arg("handle"), bp::arg("type")=(int)(4) ) );
    
    }
}

#define private public
#define protected public
#include "python_util.h"
// This file has been generated by Py++.

#include "boost/python.hpp"

#include "boost/python/suite/indexing/vector_indexing_suite.hpp"

#include "common_util.h"

#include "log_util.h"

#include "tools/redis/RedisClient.h"

namespace bp = boost::python;

BOOST_PYTHON_MODULE(libredis){
DEF_VEC(ivec);
DEF_VEC(dvec);
DEF_VEC(uvec);
DEF_VEC(svec);
DEF_VEC(ulvec);
DEF_MAP(id_map);
DEF_MAP(sd_map);
DEF_MAP(si_map);
DEF_MAP(ss_map);
DEF_PAIR(ii_pair);
DEF_PAIR(si_pair);
DEF_PAIR(wsi_pair);
DEF_VEC(si_pair_vec);
DEF_VEC(wsi_pair_vec);
DEF_SET(iset);
DEF_SET(lset);
DEF_SET(ulset);

{ //::std::vector< std::string >
typedef bp::class_< std::vector< std::string > > vector_less__std_scope_string__greater__exposer_t;
vector_less__std_scope_string__greater__exposer_t vector_less__std_scope_string__greater__exposer = vector_less__std_scope_string__greater__exposer_t( "vector_less__std_scope_string__greater_" );
bp::scope vector_less__std_scope_string__greater__scope( vector_less__std_scope_string__greater__exposer );
vector_less__std_scope_string__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< std::string >, true >() )
VEC_METHOD(::std::vector< std::string >);
}

{ //::std::vector< double >
typedef bp::class_< std::vector< double > > vector_less__double__greater__exposer_t;
vector_less__double__greater__exposer_t vector_less__double__greater__exposer = vector_less__double__greater__exposer_t( "vector_less__double__greater_" );
bp::scope vector_less__double__greater__scope( vector_less__double__greater__exposer );
vector_less__double__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< double >, true >() )
VEC_METHOD(::std::vector< double >);
}

{ //::gezi::LogHelper
typedef bp::class_< gezi::LogHelper > LogHelper_exposer_t;
LogHelper_exposer_t LogHelper_exposer = LogHelper_exposer_t( "LogHelper", bp::init< bp::optional< int > >(( bp::arg("log_level")=(int)(16) )) );
bp::scope LogHelper_scope( LogHelper_exposer );
bp::implicitly_convertible< int, gezi::LogHelper >();
LogHelper_exposer.def( bp::init< std::string const &, bp::optional< std::string const & > >(( bp::arg("conf_file"), bp::arg("conf_path")="./conf" )) );
{ //::gezi::LogHelper::set_level

typedef void ( *set_level_function_type )( int );

LogHelper_exposer.def(
"set_level"
, set_level_function_type( &::gezi::LogHelper::set_level )
, ( bp::arg("log_level") ) );

}
LogHelper_exposer.staticmethod( "set_level" );
}

bp::class_< gezi::RedisClient, boost::noncopyable >( "RedisClient", bp::init< >() )
.def( bp::init< std::string, bp::optional< std::string > >(( bp::arg("confFile"), bp::arg("confDir")="./conf" )) )
.def(
"Get"
, (int ( ::gezi::RedisClient::* )( ::std::string,::std::string & ) const)( &::gezi::RedisClient::Get )
, ( bp::arg("key"), bp::arg("value") ) )
.def(
"GetClient"
, (::store::RedisClient * ( ::gezi::RedisClient::* )(  ) )( &::gezi::RedisClient::GetClient )
, bp::return_internal_reference<>())
.def(
"Init"
, (int ( ::gezi::RedisClient::* )( ::std::string,::std::string ) )( &::gezi::RedisClient::Init )
, ( bp::arg("confFile")="redis_client.conf", bp::arg("confDir")="./conf" ) )
.def(
"Zrange"
, (int ( ::gezi::RedisClient::* )( ::std::string,int,int,::std::vector< std::string > & ) )( &::gezi::RedisClient::Zrange )
, ( bp::arg("key"), bp::arg("first"), bp::arg("last"), bp::arg("values") ) )
.def(
"Zrange"
, (::std::vector< std::string > ( ::gezi::RedisClient::* )( ::std::string,int,int ) )( &::gezi::RedisClient::Zrange )
, ( bp::arg("key"), bp::arg("first"), bp::arg("last") ) )
.def(
"ZrangeFirstNElement"
, (int ( ::gezi::RedisClient::* )( ::std::string,int,::std::vector< std::string > &,int,bool ) )( &::gezi::RedisClient::ZrangeFirstNElement )
, ( bp::arg("key"), bp::arg("num"), bp::arg("values"), bp::arg("step")=(int)(200), bp::arg("allowError")=(bool)(true) ) )
.def(
"ZrangeFirstNElement"
, (::std::vector< std::string > ( ::gezi::RedisClient::* )( ::std::string,int,int,bool ) )( &::gezi::RedisClient::ZrangeFirstNElement )
, ( bp::arg("key"), bp::arg("num"), bp::arg("step")=(int)(200), bp::arg("allowError")=(bool)(true) ) )
.def(
"ZrangeFirstNElementWithScores"
, (int ( ::gezi::RedisClient::* )( ::std::string,int,::std::vector< std::string > &,::std::vector< double > &,int,bool ) )( &::gezi::RedisClient::ZrangeFirstNElementWithScores )
, ( bp::arg("key"), bp::arg("num"), bp::arg("values"), bp::arg("scores"), bp::arg("step")=(int)(200), bp::arg("allowError")=(bool)(true) ) )
.def(
"ZrangeWithScores"
, (int ( ::gezi::RedisClient::* )( ::std::string,int,int,::std::vector< std::string > &,::std::vector< double > & ) )( &::gezi::RedisClient::ZrangeWithScores )
, ( bp::arg("key"), bp::arg("first"), bp::arg("last"), bp::arg("values"), bp::arg("scores") ) )
.def(
"at"
, (::std::string ( ::gezi::RedisClient::* )( ::std::string ) const)( &::gezi::RedisClient::at )
, ( bp::arg("key") ) )
.def(
"count"
, (int ( ::gezi::RedisClient::* )( ::std::string ) const)( &::gezi::RedisClient::count )
, ( bp::arg("key") ) )
.def(
"find"
, (::std::pair< std::string, std::string > * ( ::gezi::RedisClient::* )( ::std::string ) )( &::gezi::RedisClient::find )
, ( bp::arg("key") )
, bp::return_internal_reference<>())
.def(
"init"
, (::store::RedisClient * ( ::gezi::RedisClient::* )( ::std::string,::std::string ) )( &::gezi::RedisClient::init )
, ( bp::arg("confFile")="redis_client.conf", bp::arg("confDir")="./conf" )
, bp::return_internal_reference<>())
.def(
"__getitem__"
, (::std::string & ( ::gezi::RedisClient::* )( ::std::string ) )( &::gezi::RedisClient::operator[] )
, ( bp::arg("key") )
, bp::return_value_policy< bp::copy_non_const_reference >() )
.def(
"__getitem__"
, (::std::string ( ::gezi::RedisClient::* )( ::std::string ) const)( &::gezi::RedisClient::operator[] )
, ( bp::arg("key") ) );

bp::class_< gezi::ThreadLogHelper >( "ThreadLogHelper", bp::init< >() );
}

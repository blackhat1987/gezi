#define private public
#define protected public
#include "../include/python_util.h"
// This file has been generated by Py++.

#include "boost/python.hpp"

#include "boost/python/suite/indexing/vector_indexing_suite.hpp"

#include "boost/python/suite/indexing/map_indexing_suite.hpp"

#include "../include/tools/IpFinder.h"
const int gezi::IpFinder::INDEX_LENGTH;
const int gezi::IpFinder::IP_LENGTH;
const int gezi::IpFinder::OFFSET_LENGTH;

#include "../include/tools/ip.h"

#include "../include/tools/redis/RedisClient.h"

#include "../include/ProgressBar.h"

#include "../include/Identifer.h"

#include "../include/SharedIdentifers.h"

#include "../include/SharedObjects.h"

#include "../include/feature/FeatureSelector.h"

#include "../include/PythonWrapper/Predictor.h"

#include "../include/PythonWrapper/PredictorFactory.h"

#include "../include/file_util.h"

#include "../include/Numeric/collocation.h"

#include "../include/conf_util.h"

#include "../include/serialize_util.h"

#include "../include/Numeric/Vector/vector_util.h"

#include "../include/Idf.h"

#include "../include/log_util.h"

#include "../include/Segmentor.h"
const int gezi::SegHandle::SEG_BUFF_SIZE;

#include "../include/tools/content_process.h"

#include "../include/tieba/tieba_util.h"

#include "../include/string_util.h"

#include "../include/reg_util.h"

#include "../include/feature/features_util.h"

#include "../include/feature/FeaturesExtractor.h"

#include "../include/feature/FeaturesExtractorMgr.h"

#include "../include/tieba/get_info.h"

#include "../include/tieba/get_parsed_info.h"

#include "../include/tieba/info/delete_info.h"

#include "../include/tieba/info/forum_info.h"

#include "../include/tieba/info/post_info.h"

#include "../include/tieba/info/thread_info.h"

#include "../include/tieba/info/url_info.h"

#include "../include/tieba/info/user_info.h"

#include "../include/tieba/info/user_posts_info.h"

#include "../include/tieba/info_def.h"

#include "../include/tieba/uname_util.h"

#include "../include/tieba/common_def.h"

#include "../include/tieba/urate/get_urate_info.h"

#include "../include/tieba/urate/urate_info.h"

namespace bp = boost::python;

struct FeaturesExtractor_wrapper : gezi::FeaturesExtractor, bp::wrapper< gezi::FeaturesExtractor > {

FeaturesExtractor_wrapper(gezi::FeaturesExtractor const & arg )
: gezi::FeaturesExtractor( arg )
, bp::wrapper< gezi::FeaturesExtractor >(){
// copy constructor

}

FeaturesExtractor_wrapper(::std::string name="" )
: gezi::FeaturesExtractor( name )
, bp::wrapper< gezi::FeaturesExtractor >(){
// constructor

}

virtual void extract(  ) {
if( bp::override func_extract = this->get_override( "extract" ) )
func_extract(  );
else
this->gezi::FeaturesExtractor::extract(  );
}


void default_extract(  ) {
gezi::FeaturesExtractor::extract( );
}

virtual void init(  ) {
if( bp::override func_init = this->get_override( "init" ) )
func_init(  );
else
this->gezi::FeaturesExtractor::init(  );
}


void default_init(  ) {
gezi::FeaturesExtractor::init( );
}

virtual void process( ::gezi::Features * features ) {
if( bp::override func_process = this->get_override( "process" ) )
func_process( boost::python::ptr(features) );
else
this->gezi::FeaturesExtractor::process( boost::python::ptr(features) );
}


void default_process( ::gezi::Features * features ) {
gezi::FeaturesExtractor::process( boost::python::ptr(features) );
}

};

struct SegHandle_wrapper : gezi::SegHandle, bp::wrapper< gezi::SegHandle > {

SegHandle_wrapper(gezi::SegHandle const & arg )
: gezi::SegHandle( arg )
, bp::wrapper< gezi::SegHandle >(){
// copy constructor

}

SegHandle_wrapper( )
: gezi::SegHandle( )
, bp::wrapper< gezi::SegHandle >(){
// null constructor

}

SegHandle_wrapper(int bufsize )
: gezi::SegHandle( bufsize )
, bp::wrapper< gezi::SegHandle >(){
// constructor

}

static ::scw_out_t * get_pout(gezi::SegHandle const & inst ){
return inst.pout;
}

static void set_pout( gezi::SegHandle & inst, ::scw_out_t * new_value ){
inst.pout = new_value;
}

static ::token_t * get_tokens(gezi::SegHandle const & inst ){
return inst.tokens;
}

static void set_tokens( gezi::SegHandle & inst, ::token_t * new_value ){
inst.tokens = new_value;
}

};

BOOST_PYTHON_MODULE(libgezi){
DEF_VEC(ivec);
DEF_VEC(dvec);
DEF_VEC(uvec);
DEF_VEC(svec);
DEF_VEC(ulvec);
DEF_MAP(id_map);
DEF_MAP(sd_map);
DEF_MAP(si_map);

{ //::std::vector< unsigned long long >
typedef bp::class_< std::vector< unsigned long long > > ulvec_exposer_t;
ulvec_exposer_t ulvec_exposer = ulvec_exposer_t( "ulvec" );
bp::scope ulvec_scope( ulvec_exposer );
ulvec_exposer.def( bp::vector_indexing_suite< ::std::vector< unsigned long long >, true >() )
VEC_METHOD(::std::vector< unsigned long long >);
}

{ //::std::vector< unsigned int >
typedef bp::class_< std::vector< unsigned int > > uvec_exposer_t;
uvec_exposer_t uvec_exposer = uvec_exposer_t( "uvec" );
bp::scope uvec_scope( uvec_exposer );
uvec_exposer.def( bp::vector_indexing_suite< ::std::vector< unsigned int >, true >() )
VEC_METHOD(::std::vector< unsigned int >);
}

{ //::std::vector< token_t >
typedef bp::class_< std::vector< token_t > > vector_less__token_t__greater__exposer_t;
vector_less__token_t__greater__exposer_t vector_less__token_t__greater__exposer = vector_less__token_t__greater__exposer_t( "vector_less__token_t__greater_" );
bp::scope vector_less__token_t__greater__scope( vector_less__token_t__greater__exposer );
//WARNING: the next line of code will not compile, because "::token_t" does not have operator== !
//         vector_less__token_t__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< token_t > >() );
}

{ //::std::vector< std::vector< std::string > >
typedef bp::class_< std::vector< std::vector< std::string > > > vector_less__std_scope_vector_less__std_scope_string__greater___greater__exposer_t;
vector_less__std_scope_vector_less__std_scope_string__greater___greater__exposer_t vector_less__std_scope_vector_less__std_scope_string__greater___greater__exposer = vector_less__std_scope_vector_less__std_scope_string__greater___greater__exposer_t( "vector_less__std_scope_vector_less__std_scope_string__greater___greater_" );
bp::scope vector_less__std_scope_vector_less__std_scope_string__greater___greater__scope( vector_less__std_scope_vector_less__std_scope_string__greater___greater__exposer );
//WARNING: the next line of code will not compile, because "::std::vector<std::string, std::allocator<std::string> >" does not have operator== !
//         vector_less__std_scope_vector_less__std_scope_string__greater___greater__exposer.def( bp::vector_indexing_suite< ::std::vector< std::vector< std::string > > >() );
}

{ //::std::vector< std::vector< gezi::tieba::CommentInfo > >
typedef bp::class_< std::vector< std::vector< gezi::tieba::CommentInfo > > > vector_less__std_scope_vector_less__gezi_scope_tieba_scope_CommentInfo__greater___greater__exposer_t;
vector_less__std_scope_vector_less__gezi_scope_tieba_scope_CommentInfo__greater___greater__exposer_t vector_less__std_scope_vector_less__gezi_scope_tieba_scope_CommentInfo__greater___greater__exposer = vector_less__std_scope_vector_less__gezi_scope_tieba_scope_CommentInfo__greater___greater__exposer_t( "vector_less__std_scope_vector_less__gezi_scope_tieba_scope_CommentInfo__greater___greater_" );
bp::scope vector_less__std_scope_vector_less__gezi_scope_tieba_scope_CommentInfo__greater___greater__scope( vector_less__std_scope_vector_less__gezi_scope_tieba_scope_CommentInfo__greater___greater__exposer );
//WARNING: the next line of code will not compile, because "::std::vector<gezi::tieba::CommentInfo, std::allocator<gezi::tieba::CommentInfo> >" does not have operator== !
//         vector_less__std_scope_vector_less__gezi_scope_tieba_scope_CommentInfo__greater___greater__exposer.def( bp::vector_indexing_suite< ::std::vector< std::vector< gezi::tieba::CommentInfo > > >() );
}

{ //::std::vector< std::vector< double > >
typedef bp::class_< std::vector< std::vector< double > > > vector_less__std_scope_vector_less__double__greater___greater__exposer_t;
vector_less__std_scope_vector_less__double__greater___greater__exposer_t vector_less__std_scope_vector_less__double__greater___greater__exposer = vector_less__std_scope_vector_less__double__greater___greater__exposer_t( "vector_less__std_scope_vector_less__double__greater___greater_" );
bp::scope vector_less__std_scope_vector_less__double__greater___greater__scope( vector_less__std_scope_vector_less__double__greater___greater__exposer );
//WARNING: the next line of code will not compile, because "::std::vector<double, std::allocator<double> >" does not have operator== !
//         vector_less__std_scope_vector_less__double__greater___greater__exposer.def( bp::vector_indexing_suite< ::std::vector< std::vector< double > > >() );
}

{ //::std::vector< std::string >
typedef bp::class_< std::vector< std::string > > vector_less__std_scope_string__greater__exposer_t;
vector_less__std_scope_string__greater__exposer_t vector_less__std_scope_string__greater__exposer = vector_less__std_scope_string__greater__exposer_t( "vector_less__std_scope_string__greater_" );
bp::scope vector_less__std_scope_string__greater__scope( vector_less__std_scope_string__greater__exposer );
vector_less__std_scope_string__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< std::string >, true >() )
VEC_METHOD(::std::vector< std::string >);
}

{ //::std::vector< std::wstring >
typedef bp::class_< std::vector< std::wstring > > vector_less__std_scope_wstring__greater__exposer_t;
vector_less__std_scope_wstring__greater__exposer_t vector_less__std_scope_wstring__greater__exposer = vector_less__std_scope_wstring__greater__exposer_t( "vector_less__std_scope_wstring__greater_" );
bp::scope vector_less__std_scope_wstring__greater__scope( vector_less__std_scope_wstring__greater__exposer );
vector_less__std_scope_wstring__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< std::wstring >, true >() )
VEC_METHOD(::std::vector< std::wstring >);
}

bp::class_< std::vector< std::string > >("vector_less__std_scope_string__greater_")
.def( bp::vector_indexing_suite< ::std::vector< std::string >, true >() )
VEC_METHOD(::std::vector< std::string >);

{ //::std::vector< long long >
typedef bp::class_< std::vector< long long > > lvec_exposer_t;
lvec_exposer_t lvec_exposer = lvec_exposer_t( "lvec" );
bp::scope lvec_scope( lvec_exposer );
lvec_exposer.def( bp::vector_indexing_suite< ::std::vector< long long >, true >() )
VEC_METHOD(::std::vector< long long >);
}

bp::class_< std::vector< long long unsigned int > >("vector_less__long_long_unsigned_int__greater_")
.def( bp::vector_indexing_suite< ::std::vector< long long unsigned int >, true >() )
VEC_METHOD(::std::vector< long long unsigned int >);

{ //::std::vector< int >
typedef bp::class_< std::vector< int > > vector_less__int__greater__exposer_t;
vector_less__int__greater__exposer_t vector_less__int__greater__exposer = vector_less__int__greater__exposer_t( "vector_less__int__greater_" );
bp::scope vector_less__int__greater__scope( vector_less__int__greater__exposer );
vector_less__int__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< int >, true >() )
VEC_METHOD(::std::vector< int >);
}

bp::class_< std::vector< gezi::tieba::UserInfo > >("vector_less__gezi_scope_tieba_scope_UserInfo__greater_")
.def( bp::vector_indexing_suite< ::std::vector< gezi::tieba::UserInfo > >() )
VEC_METHOD(::std::vector< gezi::tieba::UserInfo >);

bp::class_< std::vector< gezi::tieba::UrlInfo > >("vector_less__gezi_scope_tieba_scope_UrlInfo__greater_")
.def( bp::vector_indexing_suite< ::std::vector< gezi::tieba::UrlInfo > >() )
VEC_METHOD(::std::vector< gezi::tieba::UrlInfo >);

bp::class_< std::vector< gezi::tieba::ThreadInfo > >("vector_less__gezi_scope_tieba_scope_ThreadInfo__greater_")
.def( bp::vector_indexing_suite< ::std::vector< gezi::tieba::ThreadInfo > >() )
VEC_METHOD(::std::vector< gezi::tieba::ThreadInfo >);

bp::class_< std::vector< gezi::tieba::PostInfo > >("vector_less__gezi_scope_tieba_scope_PostInfo__greater_")
.def( bp::vector_indexing_suite< ::std::vector< gezi::tieba::PostInfo > >() )
VEC_METHOD(::std::vector< gezi::tieba::PostInfo >);

bp::class_< std::vector< gezi::tieba::ForumInfo > >("vector_less__gezi_scope_tieba_scope_ForumInfo__greater_")
.def( bp::vector_indexing_suite< ::std::vector< gezi::tieba::ForumInfo > >() )
VEC_METHOD(::std::vector< gezi::tieba::ForumInfo >);

{ //::std::vector< gezi::tieba::CommentInfo >
typedef bp::class_< std::vector< gezi::tieba::CommentInfo > > vector_less__gezi_scope_tieba_scope_CommentInfo__greater__exposer_t;
vector_less__gezi_scope_tieba_scope_CommentInfo__greater__exposer_t vector_less__gezi_scope_tieba_scope_CommentInfo__greater__exposer = vector_less__gezi_scope_tieba_scope_CommentInfo__greater__exposer_t( "vector_less__gezi_scope_tieba_scope_CommentInfo__greater_" );
bp::scope vector_less__gezi_scope_tieba_scope_CommentInfo__greater__scope( vector_less__gezi_scope_tieba_scope_CommentInfo__greater__exposer );
vector_less__gezi_scope_tieba_scope_CommentInfo__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< gezi::tieba::CommentInfo > >() )
VEC_METHOD(::std::vector< gezi::tieba::CommentInfo >);
}

{ //scope begin
typedef bp::class_< std::vector< gezi::SegNode > > vector_less__gezi_scope_SegNode__greater__exposer_t;
vector_less__gezi_scope_SegNode__greater__exposer_t vector_less__gezi_scope_SegNode__greater__exposer = vector_less__gezi_scope_SegNode__greater__exposer_t("vector_less__gezi_scope_SegNode__greater_");
bp::scope vector_less__gezi_scope_SegNode__greater__scope( vector_less__gezi_scope_SegNode__greater__exposer );
//WARNING: the next line of code will not compile, because "::gezi::SegNode" does not have operator== !
//         vector_less__gezi_scope_SegNode__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< gezi::SegNode > >() );
} //scope end

{ //::std::vector< gezi::FeaturesExtractor* >
typedef bp::class_< std::vector< gezi::FeaturesExtractor* > > vector_less__gezi_scope_FeaturesExtractor_ptr___greater__exposer_t;
vector_less__gezi_scope_FeaturesExtractor_ptr___greater__exposer_t vector_less__gezi_scope_FeaturesExtractor_ptr___greater__exposer = vector_less__gezi_scope_FeaturesExtractor_ptr___greater__exposer_t( "vector_less__gezi_scope_FeaturesExtractor_ptr___greater_" );
bp::scope vector_less__gezi_scope_FeaturesExtractor_ptr___greater__scope( vector_less__gezi_scope_FeaturesExtractor_ptr___greater__exposer );
vector_less__gezi_scope_FeaturesExtractor_ptr___greater__exposer.def( bp::vector_indexing_suite< ::std::vector< gezi::FeaturesExtractor* > >() )
VEC_METHOD(::std::vector< gezi::FeaturesExtractor* >);
}

{ //::std::vector< double >
typedef bp::class_< std::vector< double > > vector_less__double__greater__exposer_t;
vector_less__double__greater__exposer_t vector_less__double__greater__exposer = vector_less__double__greater__exposer_t( "vector_less__double__greater_" );
bp::scope vector_less__double__greater__scope( vector_less__double__greater__exposer );
vector_less__double__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< double >, true >() )
VEC_METHOD(::std::vector< double >);
}

{ //::std::vector< bool >
typedef bp::class_< std::vector< bool > > vector_less__bool__greater__exposer_t;
vector_less__bool__greater__exposer_t vector_less__bool__greater__exposer = vector_less__bool__greater__exposer_t( "vector_less__bool__greater_" );
bp::scope vector_less__bool__greater__scope( vector_less__bool__greater__exposer );
vector_less__bool__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< bool >, true >() )
VEC_METHOD(::std::vector< bool >);
}

bp::class_< std::map< unsigned int, std::string > >("map_less__unsigned_int_comma__std_scope_string__greater_")
.def( bp::map_indexing_suite< ::std::map< unsigned int, std::string >, true >() )
MAP_METHOD(::std::map< unsigned int COMMA  std::string >);

bp::class_< std::map< unsigned int, gezi::tieba::UserInfo > >("map_less__unsigned_int_comma__gezi_scope_tieba_scope_UserInfo__greater_")
.def( bp::map_indexing_suite< ::std::map< unsigned int, gezi::tieba::UserInfo > >() )
MAP_METHOD(::std::map< unsigned int COMMA  gezi::tieba::UserInfo >);

bp::class_< std::map< unsigned int, gezi::tieba::ForumInfo > >("map_less__unsigned_int_comma__gezi_scope_tieba_scope_ForumInfo__greater_")
.def( bp::map_indexing_suite< ::std::map< unsigned int, gezi::tieba::ForumInfo > >() )
MAP_METHOD(::std::map< unsigned int COMMA  gezi::tieba::ForumInfo >);

{ //::std::map< unsigned int, gezi::tieba::UserPostNumInfo >
typedef bp::class_< std::map< unsigned int, gezi::tieba::UserPostNumInfo > > map_less__unsigned_int_comma__gezi_scope_tieba_scope_UserPostNumInfo__greater__exposer_t;
map_less__unsigned_int_comma__gezi_scope_tieba_scope_UserPostNumInfo__greater__exposer_t map_less__unsigned_int_comma__gezi_scope_tieba_scope_UserPostNumInfo__greater__exposer = map_less__unsigned_int_comma__gezi_scope_tieba_scope_UserPostNumInfo__greater__exposer_t( "map_less__unsigned_int_comma__gezi_scope_tieba_scope_UserPostNumInfo__greater_" );
bp::scope map_less__unsigned_int_comma__gezi_scope_tieba_scope_UserPostNumInfo__greater__scope( map_less__unsigned_int_comma__gezi_scope_tieba_scope_UserPostNumInfo__greater__exposer );
//WARNING: the next line of code will not compile, because "::gezi::tieba::UserPostNumInfo" does not have operator== !
//         map_less__unsigned_int_comma__gezi_scope_tieba_scope_UserPostNumInfo__greater__exposer.def( bp::map_indexing_suite< ::std::map< unsigned int, gezi::tieba::UserPostNumInfo > >() );
}

{ //::std::map< std::string, unsigned int >
typedef bp::class_< std::map< std::string, unsigned int > > map_less__std_scope_string_comma__unsigned_int__greater__exposer_t;
map_less__std_scope_string_comma__unsigned_int__greater__exposer_t map_less__std_scope_string_comma__unsigned_int__greater__exposer = map_less__std_scope_string_comma__unsigned_int__greater__exposer_t( "map_less__std_scope_string_comma__unsigned_int__greater_" );
bp::scope map_less__std_scope_string_comma__unsigned_int__greater__scope( map_less__std_scope_string_comma__unsigned_int__greater__exposer );
map_less__std_scope_string_comma__unsigned_int__greater__exposer.def( bp::map_indexing_suite< ::std::map< std::string, unsigned int >, true >() )
MAP_METHOD(::std::map< std::string COMMA  unsigned int >);
}

{ //::std::map< std::string, std::string >
typedef bp::class_< std::map< std::string, std::string > > ss_map_exposer_t;
ss_map_exposer_t ss_map_exposer = ss_map_exposer_t( "ss_map" );
bp::scope ss_map_scope( ss_map_exposer );
ss_map_exposer.def( bp::map_indexing_suite< ::std::map< std::string, std::string >, true >() )
MAP_METHOD(::std::map< std::string COMMA  std::string >);
}

{ //::std::map< std::string, gezi::tieba::UserLikeForumInfo::Node >
typedef bp::class_< std::map< std::string, gezi::tieba::UserLikeForumInfo::Node > > map_less__std_scope_string_comma__gezi_scope_tieba_scope_UserLikeForumInfo_scope_Node__greater__exposer_t;
map_less__std_scope_string_comma__gezi_scope_tieba_scope_UserLikeForumInfo_scope_Node__greater__exposer_t map_less__std_scope_string_comma__gezi_scope_tieba_scope_UserLikeForumInfo_scope_Node__greater__exposer = map_less__std_scope_string_comma__gezi_scope_tieba_scope_UserLikeForumInfo_scope_Node__greater__exposer_t( "map_less__std_scope_string_comma__gezi_scope_tieba_scope_UserLikeForumInfo_scope_Node__greater_" );
bp::scope map_less__std_scope_string_comma__gezi_scope_tieba_scope_UserLikeForumInfo_scope_Node__greater__scope( map_less__std_scope_string_comma__gezi_scope_tieba_scope_UserLikeForumInfo_scope_Node__greater__exposer );
map_less__std_scope_string_comma__gezi_scope_tieba_scope_UserLikeForumInfo_scope_Node__greater__exposer.def( bp::map_indexing_suite< ::std::map< std::string, gezi::tieba::UserLikeForumInfo::Node > >() )
MAP_METHOD(::std::map< std::string COMMA  gezi::tieba::UserLikeForumInfo::Node >);
}

{ //::std::map< std::string, gezi::tieba::UrlInfo >
typedef bp::class_< std::map< std::string, gezi::tieba::UrlInfo > > map_less__std_scope_string_comma__gezi_scope_tieba_scope_UrlInfo__greater__exposer_t;
map_less__std_scope_string_comma__gezi_scope_tieba_scope_UrlInfo__greater__exposer_t map_less__std_scope_string_comma__gezi_scope_tieba_scope_UrlInfo__greater__exposer = map_less__std_scope_string_comma__gezi_scope_tieba_scope_UrlInfo__greater__exposer_t( "map_less__std_scope_string_comma__gezi_scope_tieba_scope_UrlInfo__greater_" );
bp::scope map_less__std_scope_string_comma__gezi_scope_tieba_scope_UrlInfo__greater__scope( map_less__std_scope_string_comma__gezi_scope_tieba_scope_UrlInfo__greater__exposer );
map_less__std_scope_string_comma__gezi_scope_tieba_scope_UrlInfo__greater__exposer.def( bp::map_indexing_suite< ::std::map< std::string, gezi::tieba::UrlInfo > >() )
MAP_METHOD(::std::map< std::string COMMA  gezi::tieba::UrlInfo >);
}

bp::class_< std::map< std::string, int > >("map_less__std_scope_string_comma__int__greater_")
.def( bp::map_indexing_suite< ::std::map< std::string, int >, true >() )
MAP_METHOD(::std::map< std::string COMMA  int >);

{ //scope begin
typedef bp::class_< std::map< std::string, boost::any > > map_less__std_scope_string_comma__boost_scope_any__greater__exposer_t;
map_less__std_scope_string_comma__boost_scope_any__greater__exposer_t map_less__std_scope_string_comma__boost_scope_any__greater__exposer = map_less__std_scope_string_comma__boost_scope_any__greater__exposer_t("map_less__std_scope_string_comma__boost_scope_any__greater_");
bp::scope map_less__std_scope_string_comma__boost_scope_any__greater__scope( map_less__std_scope_string_comma__boost_scope_any__greater__exposer );
//WARNING: the next line of code will not compile, because "::boost::any" does not have operator== !
//         map_less__std_scope_string_comma__boost_scope_any__greater__exposer.def( bp::map_indexing_suite< ::std::map< std::string, boost::any > >() );
} //scope end

bp::class_< std::map< long long unsigned int, gezi::tieba::ThreadInfo > >("map_less__long_long_unsigned_int_comma__gezi_scope_tieba_scope_ThreadInfo__greater_")
.def( bp::map_indexing_suite< ::std::map< long long unsigned int, gezi::tieba::ThreadInfo > >() )
MAP_METHOD(::std::map< long long unsigned int COMMA  gezi::tieba::ThreadInfo >);

bp::class_< std::map< long long unsigned int, gezi::tieba::PostInfo > >("map_less__long_long_unsigned_int_comma__gezi_scope_tieba_scope_PostInfo__greater_")
.def( bp::map_indexing_suite< ::std::map< long long unsigned int, gezi::tieba::PostInfo > >() )
MAP_METHOD(::std::map< long long unsigned int COMMA  gezi::tieba::PostInfo >);

bp::class_< std::map< long long unsigned int, gezi::tieba::DeleteInfo > >("map_less__long_long_unsigned_int_comma__gezi_scope_tieba_scope_DeleteInfo__greater_")
.def( bp::map_indexing_suite< ::std::map< long long unsigned int, gezi::tieba::DeleteInfo > >() )
MAP_METHOD(::std::map< long long unsigned int COMMA  gezi::tieba::DeleteInfo >);

bp::enum_< gezi::collocation::Method>("Method")
.value("CHI", gezi::collocation::CHI)
.value("IG", gezi::collocation::IG)
.value("MI", gezi::collocation::MI)
.value("MI2", gezi::collocation::MI2)
.value("PMI", gezi::collocation::PMI)
.value("ECE", gezi::collocation::ECE)
.value("EMI", gezi::collocation::EMI)
.value("T_TEST", gezi::collocation::T_TEST)
.value("LIR", gezi::collocation::LIR)
.value("FREQ", gezi::collocation::FREQ)
.value("IDF", gezi::collocation::IDF)
.export_values()
;

bp::class_< gezi::ChiSquareFunc >( "ChiSquareFunc" )
.def(
"__call__"
, (::Float ( ::gezi::ChiSquareFunc::* )( int,int,int,::uint64 ) )( &::gezi::ChiSquareFunc::operator() )
, ( bp::arg("a"), bp::arg("n1"), bp::arg("n2"), bp::arg("total") ) );

bp::class_< gezi::DiscountedMutualInfoFunc >( "DiscountedMutualInfoFunc" )
.def(
"__call__"
, (::Float ( ::gezi::DiscountedMutualInfoFunc::* )( int,int,int,long long unsigned int ) )( &::gezi::DiscountedMutualInfoFunc::operator() )
, ( bp::arg("a00"), bp::arg("nterm1"), bp::arg("nterm2"), bp::arg("n") ) );

bp::class_< gezi::EChiSquareFunc >( "EChiSquareFunc" )
.def(
"__call__"
, (::Float ( ::gezi::EChiSquareFunc::* )( int,int,int,long long unsigned int ) )( &::gezi::EChiSquareFunc::operator() )
, ( bp::arg("a00"), bp::arg("nterm1"), bp::arg("nterm2"), bp::arg("n") ) );

bp::class_< gezi::EMutualInfoFunc >( "EMutualInfoFunc" )
.def(
"__call__"
, (::Float ( ::gezi::EMutualInfoFunc::* )( int,int,int,long long unsigned int ) )( &::gezi::EMutualInfoFunc::operator() )
, ( bp::arg("a00"), bp::arg("nterm1"), bp::arg("nterm2"), bp::arg("n") ) );

bp::class_< gezi::EchoFunc >( "EchoFunc" )
.def(
"__call__"
, (::Float ( ::gezi::EchoFunc::* )( int,int,int,::uint64 ) )( &::gezi::EchoFunc::operator() )
, ( bp::arg("a"), bp::arg("n1"), bp::arg("n2"), bp::arg("n") ) );

{ //::gezi::FeatureSelector
typedef bp::class_< gezi::FeatureSelector > FeatureSelector_exposer_t;
FeatureSelector_exposer_t FeatureSelector_exposer = FeatureSelector_exposer_t( "FeatureSelector", bp::init< >() );
bp::scope FeatureSelector_scope( FeatureSelector_exposer );
bp::enum_< gezi::FeatureSelector::Strategy>("Strategy")
.value("MAX", gezi::FeatureSelector::MAX)
.value("AVG", gezi::FeatureSelector::AVG)
.value("SUM", gezi::FeatureSelector::SUM)
.export_values()
;
{ //::gezi::FeatureSelector::add

typedef void ( ::gezi::FeatureSelector::*add_function_type )( ::std::vector< std::string > const &,int ) ;

FeatureSelector_exposer.def(
"add"
, add_function_type( &::gezi::FeatureSelector::add )
, ( bp::arg("words"), bp::arg("label") ) );

}
{ //::gezi::FeatureSelector::add

typedef void ( ::gezi::FeatureSelector::*add_function_type )( ::std::string,int,::std::string ) ;

FeatureSelector_exposer.def(
"add"
, add_function_type( &::gezi::FeatureSelector::add )
, ( bp::arg("doc"), bp::arg("label"), bp::arg("sep")="\011" ) );

}
{ //::gezi::FeatureSelector::calc

typedef ::gezi::dmat & ( ::gezi::FeatureSelector::*calc_function_type )(  ) ;

FeatureSelector_exposer.def(
"calc"
, calc_function_type( &::gezi::FeatureSelector::calc )
, bp::return_internal_reference<>());

}
{ //::gezi::FeatureSelector::clear

typedef void ( ::gezi::FeatureSelector::*clear_function_type )(  ) ;

FeatureSelector_exposer.def(
"clear"
, clear_function_type( &::gezi::FeatureSelector::clear ) );

}
{ //::gezi::FeatureSelector::clearScore

typedef void ( ::gezi::FeatureSelector::*clearScore_function_type )(  ) ;

FeatureSelector_exposer.def(
"clearScore"
, clearScore_function_type( &::gezi::FeatureSelector::clearScore ) );

}
{ //::gezi::FeatureSelector::featureNum

typedef int ( ::gezi::FeatureSelector::*featureNum_function_type )(  ) ;

FeatureSelector_exposer.def(
"featureNum"
, featureNum_function_type( &::gezi::FeatureSelector::featureNum ) );

}
{ //::gezi::FeatureSelector::init

typedef void ( ::gezi::FeatureSelector::*init_function_type )(  ) ;

FeatureSelector_exposer.def(
"init"
, init_function_type( &::gezi::FeatureSelector::init ) );

}
{ //::gezi::FeatureSelector::initFunc

typedef void ( ::gezi::FeatureSelector::*initFunc_function_type )(  ) ;

FeatureSelector_exposer.def(
"initFunc"
, initFunc_function_type( &::gezi::FeatureSelector::initFunc ) );

}
{ //::gezi::FeatureSelector::instanceNum

typedef ::int64 ( ::gezi::FeatureSelector::*instanceNum_function_type )(  ) ;

FeatureSelector_exposer.def(
"instanceNum"
, instanceNum_function_type( &::gezi::FeatureSelector::instanceNum ) );

}
{ //::gezi::FeatureSelector::labelNum

typedef int ( ::gezi::FeatureSelector::*labelNum_function_type )(  ) ;

FeatureSelector_exposer.def(
"labelNum"
, labelNum_function_type( &::gezi::FeatureSelector::labelNum ) );

}
{ //::gezi::FeatureSelector::labelNum

typedef ::gezi::FeatureSelector & ( ::gezi::FeatureSelector::*labelNum_function_type )( int ) ;

FeatureSelector_exposer.def(
"labelNum"
, labelNum_function_type( &::gezi::FeatureSelector::labelNum )
, ( bp::arg("labelNum") )
, bp::return_internal_reference<>());

}
{ //::gezi::FeatureSelector::method

typedef int ( ::gezi::FeatureSelector::*method_function_type )(  ) ;

FeatureSelector_exposer.def(
"method"
, method_function_type( &::gezi::FeatureSelector::method ) );

}
{ //::gezi::FeatureSelector::method

typedef ::gezi::FeatureSelector & ( ::gezi::FeatureSelector::*method_function_type )( ::gezi::collocation::Method ) ;

FeatureSelector_exposer.def(
"method"
, method_function_type( &::gezi::FeatureSelector::method )
, ( bp::arg("method") )
, bp::return_internal_reference<>());

}
{ //::gezi::FeatureSelector::minSupport

typedef int ( ::gezi::FeatureSelector::*minSupport_function_type )(  ) ;

FeatureSelector_exposer.def(
"minSupport"
, minSupport_function_type( &::gezi::FeatureSelector::minSupport ) );

}
{ //::gezi::FeatureSelector::minSupport

typedef ::gezi::FeatureSelector & ( ::gezi::FeatureSelector::*minSupport_function_type )( int ) ;

FeatureSelector_exposer.def(
"minSupport"
, minSupport_function_type( &::gezi::FeatureSelector::minSupport )
, ( bp::arg("minSupport") )
, bp::return_internal_reference<>());

}
{ //::gezi::FeatureSelector::save

typedef void ( ::gezi::FeatureSelector::*save_function_type )( ::std::string,int,int ) ;

FeatureSelector_exposer.def(
"save"
, save_function_type( &::gezi::FeatureSelector::save )
, ( bp::arg("file"), bp::arg("idx")=(int)(-0x00000000000000001), bp::arg("maxFeatureNum")=(int)(-0x00000000000000001) ) );

}
{ //::gezi::FeatureSelector::save

typedef void ( ::gezi::FeatureSelector::*save_function_type )( ::std::ostream &,int,int ) ;

FeatureSelector_exposer.def(
"save"
, save_function_type( &::gezi::FeatureSelector::save )
, ( bp::arg("os"), bp::arg("maxFeatureNum"), bp::arg("idx") ) );

}
{ //::gezi::FeatureSelector::save_all

typedef void ( ::gezi::FeatureSelector::*save_all_function_type )( ::std::string ) ;

FeatureSelector_exposer.def(
"save_all"
, save_all_function_type( &::gezi::FeatureSelector::save_all )
, ( bp::arg("dir")="result" ) );

}
{ //::gezi::FeatureSelector::save_idf

typedef void ( ::gezi::FeatureSelector::*save_idf_function_type )( ::std::string ) ;

FeatureSelector_exposer.def(
"save_idf"
, save_idf_function_type( &::gezi::FeatureSelector::save_idf )
, ( bp::arg("file") ) );

}
{ //::gezi::FeatureSelector::show

typedef void ( ::gezi::FeatureSelector::*show_function_type )( int,int ) ;

FeatureSelector_exposer.def(
"show"
, show_function_type( &::gezi::FeatureSelector::show )
, ( bp::arg("maxFeatureNum")=(int)(1024), bp::arg("idx")=(int)(-0x00000000000000001) ) );

}
{ //::gezi::FeatureSelector::strategy

typedef int ( ::gezi::FeatureSelector::*strategy_function_type )(  ) ;

FeatureSelector_exposer.def(
"strategy"
, strategy_function_type( &::gezi::FeatureSelector::strategy ) );

}
{ //::gezi::FeatureSelector::strategy

typedef ::gezi::FeatureSelector & ( ::gezi::FeatureSelector::*strategy_function_type )( ::gezi::FeatureSelector::Strategy ) ;

FeatureSelector_exposer.def(
"strategy"
, strategy_function_type( &::gezi::FeatureSelector::strategy )
, ( bp::arg("strategy") )
, bp::return_internal_reference<>());

}
}

{ //::gezi::FeaturesExtractor
typedef bp::class_< FeaturesExtractor_wrapper > FeaturesExtractor_exposer_t;
FeaturesExtractor_exposer_t FeaturesExtractor_exposer = FeaturesExtractor_exposer_t( "FeaturesExtractor", bp::init< bp::optional< std::string > >(( bp::arg("name")="" )) );
bp::scope FeaturesExtractor_scope( FeaturesExtractor_exposer );
bp::implicitly_convertible< std::string, gezi::FeaturesExtractor >();
{ //::gezi::FeaturesExtractor::add

typedef void ( ::gezi::FeaturesExtractor::*add_function_type )( double,::std::string ) ;

FeaturesExtractor_exposer.def(
"add"
, add_function_type( &::gezi::FeaturesExtractor::add )
, ( bp::arg("value"), bp::arg("name")="" ) );

}
{ //::gezi::FeaturesExtractor::add

typedef void ( ::gezi::FeaturesExtractor::*add_function_type )( double *,int,::std::string ) ;

FeaturesExtractor_exposer.def(
"add"
, add_function_type( &::gezi::FeaturesExtractor::add )
, ( bp::arg("values"), bp::arg("n"), bp::arg("name")="" ) );

}
{ //::gezi::FeaturesExtractor::bind

typedef void ( ::gezi::FeaturesExtractor::*bind_function_type )( ::gezi::Features * ) ;

FeaturesExtractor_exposer.def(
"bind"
, bind_function_type( &::gezi::FeaturesExtractor::bind )
, ( bp::arg("features") ) );

}
{ //::gezi::FeaturesExtractor::extract

typedef void ( ::gezi::FeaturesExtractor::*extract_function_type )(  ) ;
typedef void ( FeaturesExtractor_wrapper::*default_extract_function_type )(  ) ;

FeaturesExtractor_exposer.def(
"extract"
, extract_function_type(&::gezi::FeaturesExtractor::extract)
, default_extract_function_type(&FeaturesExtractor_wrapper::default_extract) );

}
{ //::gezi::FeaturesExtractor::feature

typedef ::gezi::Features * ( ::gezi::FeaturesExtractor::*feature_function_type )(  ) ;

FeaturesExtractor_exposer.def(
"feature"
, feature_function_type( &::gezi::FeaturesExtractor::feature )
, bp::return_internal_reference<>());

}
{ //::gezi::FeaturesExtractor::features

typedef ::gezi::Features * ( ::gezi::FeaturesExtractor::*features_function_type )(  ) ;

FeaturesExtractor_exposer.def(
"features"
, features_function_type( &::gezi::FeaturesExtractor::features )
, bp::return_internal_reference<>());

}
{ //::gezi::FeaturesExtractor::init

typedef void ( ::gezi::FeaturesExtractor::*init_function_type )(  ) ;
typedef void ( FeaturesExtractor_wrapper::*default_init_function_type )(  ) ;

FeaturesExtractor_exposer.def(
"init"
, init_function_type(&::gezi::FeaturesExtractor::init)
, default_init_function_type(&FeaturesExtractor_wrapper::default_init) );

}
{ //::gezi::FeaturesExtractor::is_filtered

typedef bool ( ::gezi::FeaturesExtractor::*is_filtered_function_type )(  ) ;

FeaturesExtractor_exposer.def(
"is_filtered"
, is_filtered_function_type( &::gezi::FeaturesExtractor::is_filtered ) );

}
{ //::gezi::FeaturesExtractor::name

typedef ::std::string ( ::gezi::FeaturesExtractor::*name_function_type )(  ) ;

FeaturesExtractor_exposer.def(
"name"
, name_function_type( &::gezi::FeaturesExtractor::name ) );

}
{ //::gezi::FeaturesExtractor::process

typedef void ( ::gezi::FeaturesExtractor::*process_function_type )( ::gezi::Features * ) ;
typedef void ( FeaturesExtractor_wrapper::*default_process_function_type )( ::gezi::Features * ) ;

FeaturesExtractor_exposer.def(
"process"
, process_function_type(&::gezi::FeaturesExtractor::process)
, default_process_function_type(&FeaturesExtractor_wrapper::default_process)
, ( bp::arg("features") ) );

}
}

bp::class_< gezi::FeaturesExtractorMgr >( "FeaturesExtractorMgr" )
.def(
"add"
, (void ( ::gezi::FeaturesExtractorMgr::* )( ::gezi::FeaturesExtractor * ) )( &::gezi::FeaturesExtractorMgr::add )
, ( bp::arg("extractor") ) )
.def(
"extract"
, (void ( ::gezi::FeaturesExtractorMgr::* )( ::gezi::Features & ) )( &::gezi::FeaturesExtractorMgr::extract )
, ( bp::arg("features") ) )
.def(
"extract"
, (void ( ::gezi::FeaturesExtractorMgr::* )( ::gezi::Features * ) )( &::gezi::FeaturesExtractorMgr::extract )
, ( bp::arg("features") ) )
.def(
"extractor"
, (::gezi::FeaturesExtractor * ( ::gezi::FeaturesExtractorMgr::* )(  ) )( &::gezi::FeaturesExtractorMgr::extractor )
, bp::return_internal_reference<>())
.def(
"extractors"
, (::std::vector< gezi::FeaturesExtractor* > & ( ::gezi::FeaturesExtractorMgr::* )(  ) )( &::gezi::FeaturesExtractorMgr::extractors )
, bp::return_internal_reference<>())
.def(
"extractors"
, (::std::vector< gezi::FeaturesExtractor* > const & ( ::gezi::FeaturesExtractorMgr::* )(  ) const)( &::gezi::FeaturesExtractorMgr::extractors )
, bp::return_value_policy< bp::copy_const_reference >() );

bp::class_< gezi::Identifer >( "Identifer" )
.def(
"Load"
, (void ( ::gezi::Identifer::* )( ::std::string ) )( &::gezi::Identifer::Load )
, ( bp::arg("path") ) )
.def(
"Save"
, (void ( ::gezi::Identifer::* )( ::std::string ) )( &::gezi::Identifer::Save )
, ( bp::arg("path") ) )
.def(
"add"
, (int ( ::gezi::Identifer::* )( ::std::string ) )( &::gezi::Identifer::add )
, ( bp::arg("f") ) )
.def(
"add"
, (int ( ::gezi::Identifer::* )( ::std::string,bool & ) )( &::gezi::Identifer::add )
, ( bp::arg("f"), bp::arg("isnew") ) )
.def(
"add_unique"
, (int ( ::gezi::Identifer::* )( ::std::string ) )( &::gezi::Identifer::add_unique )
, ( bp::arg("f") ) )
.def(
"clear"
, (void ( ::gezi::Identifer::* )(  ) )( &::gezi::Identifer::clear ) )
.def(
"empty"
, (bool ( ::gezi::Identifer::* )(  ) const)( &::gezi::Identifer::empty ) )
.def(
"has"
, (bool ( ::gezi::Identifer::* )( ::std::string ) const)( &::gezi::Identifer::has )
, ( bp::arg("f") ) )
.def(
"id"
, (int ( ::gezi::Identifer::* )( ::std::string ) const)( &::gezi::Identifer::id )
, ( bp::arg("f") ) )
.def(
"key"
, (::std::string ( ::gezi::Identifer::* )( int ) const)( &::gezi::Identifer::key )
, ( bp::arg("id") ) )
.def(
"keys"
, (::std::vector< std::string > & ( ::gezi::Identifer::* )(  ) )( &::gezi::Identifer::keys )
, bp::return_internal_reference<>())
.def(
"last"
, (::std::string ( ::gezi::Identifer::* )(  ) )( &::gezi::Identifer::last ) )
.def(
"load"
, (bool ( ::gezi::Identifer::* )( ::std::string,::std::string ) )( &::gezi::Identifer::load )
, ( bp::arg("file"), bp::arg("sep")="\011" ) )
.def(
"null_id"
, (int const (*)(  ))( &::gezi::Identifer::null_id ) )
.def(
"__call__"
, (int const ( ::gezi::Identifer::* )( ::std::string ) const)( &::gezi::Identifer::operator() )
, ( bp::arg("key") ) )
.def(
"__getitem__"
, (::std::string ( ::gezi::Identifer::* )( int ) const)( &::gezi::Identifer::operator[] )
, ( bp::arg("id") ) )
.def(
"save"
, (void ( ::gezi::Identifer::* )( ::std::string ) )( &::gezi::Identifer::save )
, ( bp::arg("file") ) )
.def(
"size"
, (::size_t ( ::gezi::Identifer::* )(  ) const)( &::gezi::Identifer::size ) )
.def(
"words"
, (::std::vector< std::string > & ( ::gezi::Identifer::* )(  ) )( &::gezi::Identifer::words )
, bp::return_internal_reference<>())
.staticmethod( "null_id" );

bp::class_< gezi::Idf >( "Idf", bp::init< >() )
.def(
"add"
, (void ( ::gezi::Idf::* )( ::std::string,::std::string ) )( &::gezi::Idf::add )
, ( bp::arg("doc"), bp::arg("sep")="\011" ) )
.def(
"add"
, (void ( ::gezi::Idf::* )( ::std::vector< std::string > const & ) )( &::gezi::Idf::add )
, ( bp::arg("words") ) )
.def(
"save"
, (void ( ::gezi::Idf::* )( ::std::string ) )( &::gezi::Idf::save )
, ( bp::arg("file") ) )
.def(
"save"
, (void ( ::gezi::Idf::* )( ::std::string,int,int ) )( &::gezi::Idf::save )
, ( bp::arg("file"), bp::arg("minCount"), bp::arg("minIdf") ) )
.def(
"show"
, (void ( ::gezi::Idf::* )( int ) )( &::gezi::Idf::show )
, ( bp::arg("maxNum")=(int)(1024) ) );

{ //::gezi::IpFinder
typedef bp::class_< gezi::IpFinder > IpFinder_exposer_t;
IpFinder_exposer_t IpFinder_exposer = IpFinder_exposer_t( "IpFinder", bp::init< >() );
bp::scope IpFinder_scope( IpFinder_exposer );
bp::scope().attr("REDIRECT_MODE_1") = (int)gezi::IpFinder::REDIRECT_MODE_1;
bp::scope().attr("REDIRECT_MODE_2") = (int)gezi::IpFinder::REDIRECT_MODE_2;
IpFinder_exposer.def( bp::init< std::string >(( bp::arg("file") )) );
bp::implicitly_convertible< std::string, gezi::IpFinder >();
IpFinder_exposer.def( bp::init< char const * >(( bp::arg("pszFileName") )) );
bp::implicitly_convertible< char const *, gezi::IpFinder >();
{ //::gezi::IpFinder::GetAddressByIp

typedef void ( ::gezi::IpFinder::*GetAddressByIp_function_type )( long unsigned int,::std::string &,::std::string & ) const;

IpFinder_exposer.def(
"GetAddressByIp"
, GetAddressByIp_function_type( &::gezi::IpFinder::GetAddressByIp )
, ( bp::arg("ipValue"), bp::arg("strCountry"), bp::arg("strLocation") ) );

}
{ //::gezi::IpFinder::GetAddressByIp

typedef void ( ::gezi::IpFinder::*GetAddressByIp_function_type )( char const *,::std::string &,::std::string & ) const;

IpFinder_exposer.def(
"GetAddressByIp"
, GetAddressByIp_function_type( &::gezi::IpFinder::GetAddressByIp )
, ( bp::arg("pszIp"), bp::arg("strCountry"), bp::arg("strLocation") ) );

}
{ //::gezi::IpFinder::GetAddressByIp

typedef void ( ::gezi::IpFinder::*GetAddressByIp_function_type )( ::std::string const &,::std::string &,::std::string & ) const;

IpFinder_exposer.def(
"GetAddressByIp"
, GetAddressByIp_function_type( &::gezi::IpFinder::GetAddressByIp )
, ( bp::arg("ip"), bp::arg("strCountry"), bp::arg("strLocation") ) );

}
{ //::gezi::IpFinder::GetAddressByOffset

typedef void ( ::gezi::IpFinder::*GetAddressByOffset_function_type )( long unsigned int,::std::string &,::std::string & ) const;

IpFinder_exposer.def(
"GetAddressByOffset"
, GetAddressByOffset_function_type( &::gezi::IpFinder::GetAddressByOffset )
, ( bp::arg("ulOffset"), bp::arg("strCountry"), bp::arg("strLocation") ) );

}
{ //::gezi::IpFinder::GetString

typedef long unsigned int ( ::gezi::IpFinder::*GetString_function_type )( ::std::string &,long unsigned int ) const;

IpFinder_exposer.def(
"GetString"
, GetString_function_type( &::gezi::IpFinder::GetString )
, ( bp::arg("str"), bp::arg("indexStart") ) );

}
{ //::gezi::IpFinder::GetValue3

typedef long unsigned int ( ::gezi::IpFinder::*GetValue3_function_type )( long unsigned int ) const;

IpFinder_exposer.def(
"GetValue3"
, GetValue3_function_type( &::gezi::IpFinder::GetValue3 )
, ( bp::arg("indexStart") ) );

}
{ //::gezi::IpFinder::GetValue4

typedef long unsigned int ( ::gezi::IpFinder::*GetValue4_function_type )( long unsigned int ) const;

IpFinder_exposer.def(
"GetValue4"
, GetValue4_function_type( &::gezi::IpFinder::GetValue4 )
, ( bp::arg("indexStart") ) );

}
{ //::gezi::IpFinder::Init

typedef bool ( ::gezi::IpFinder::*Init_function_type )( ::std::string ) ;

IpFinder_exposer.def(
"Init"
, Init_function_type( &::gezi::IpFinder::Init )
, ( bp::arg("file") ) );

}
{ //::gezi::IpFinder::IpString2IpValue

typedef long unsigned int ( ::gezi::IpFinder::*IpString2IpValue_function_type )( char const * ) const;

IpFinder_exposer.def(
"IpString2IpValue"
, IpString2IpValue_function_type( &::gezi::IpFinder::IpString2IpValue )
, ( bp::arg("pszIp") ) );

}
{ //::gezi::IpFinder::IpValue2IpString

typedef void ( ::gezi::IpFinder::*IpValue2IpString_function_type )( long unsigned int,char *,int ) const;

IpFinder_exposer.def(
"IpValue2IpString"
, IpValue2IpString_function_type( &::gezi::IpFinder::IpValue2IpString )
, ( bp::arg("ipValue"), bp::arg("pszIpAddress"), bp::arg("nMaxCount") ) );

}
{ //::gezi::IpFinder::IsRightIpString

typedef bool ( ::gezi::IpFinder::*IsRightIpString_function_type )( char const * ) const;

IpFinder_exposer.def(
"IsRightIpString"
, IsRightIpString_function_type( &::gezi::IpFinder::IsRightIpString )
, ( bp::arg("pszIp") ) );

}
{ //::gezi::IpFinder::Open

typedef bool ( ::gezi::IpFinder::*Open_function_type )( ::std::string ) ;

IpFinder_exposer.def(
"Open"
, Open_function_type( &::gezi::IpFinder::Open )
, ( bp::arg("file") ) );

}
{ //::gezi::IpFinder::Open

typedef bool ( ::gezi::IpFinder::*Open_function_type )( char const * ) ;

IpFinder_exposer.def(
"Open"
, Open_function_type( &::gezi::IpFinder::Open )
, ( bp::arg("pszFileName") ) );

}
{ //::gezi::IpFinder::OutputData

typedef long unsigned int ( ::gezi::IpFinder::*OutputData_function_type )( char const *,long unsigned int,long unsigned int ) const;

IpFinder_exposer.def(
"OutputData"
, OutputData_function_type( &::gezi::IpFinder::OutputData )
, ( bp::arg("pszFileName"), bp::arg("indexStart")=(long unsigned int)(0), bp::arg("indexEnd")=(long unsigned int)(0) ) );

}
{ //::gezi::IpFinder::OutputDataByIp

typedef long unsigned int ( ::gezi::IpFinder::*OutputDataByIp_function_type )( char const *,long unsigned int,long unsigned int ) const;

IpFinder_exposer.def(
"OutputDataByIp"
, OutputDataByIp_function_type( &::gezi::IpFinder::OutputDataByIp )
, ( bp::arg("pszFileName"), bp::arg("ipValueStart"), bp::arg("ipValueEnd") ) );

}
{ //::gezi::IpFinder::OutputDataByIp

typedef long unsigned int ( ::gezi::IpFinder::*OutputDataByIp_function_type )( char const *,char const *,char const * ) const;

IpFinder_exposer.def(
"OutputDataByIp"
, OutputDataByIp_function_type( &::gezi::IpFinder::OutputDataByIp )
, ( bp::arg("pszFileName"), bp::arg("pszStartIp"), bp::arg("pszEndIp") ) );

}
{ //::gezi::IpFinder::SearchIp

typedef long unsigned int ( ::gezi::IpFinder::*SearchIp_function_type )( long unsigned int,long unsigned int,long unsigned int ) const;

IpFinder_exposer.def(
"SearchIp"
, SearchIp_function_type( &::gezi::IpFinder::SearchIp )
, ( bp::arg("ipValue"), bp::arg("indexStart")=(long unsigned int)(0), bp::arg("indexEnd")=(long unsigned int)(0) ) );

}
{ //::gezi::IpFinder::SearchIp

typedef long unsigned int ( ::gezi::IpFinder::*SearchIp_function_type )( char const *,long unsigned int,long unsigned int ) const;

IpFinder_exposer.def(
"SearchIp"
, SearchIp_function_type( &::gezi::IpFinder::SearchIp )
, ( bp::arg("pszIp"), bp::arg("indexStart")=(long unsigned int)(0), bp::arg("indexEnd")=(long unsigned int)(0) ) );

}
IpFinder_exposer.def_readonly( "INDEX_LENGTH", gezi::IpFinder::INDEX_LENGTH );
IpFinder_exposer.def_readonly( "IP_LENGTH", gezi::IpFinder::IP_LENGTH );
IpFinder_exposer.def_readonly( "OFFSET_LENGTH", gezi::IpFinder::OFFSET_LENGTH );
}

bp::class_< gezi::LogEChiSquareFunc >( "LogEChiSquareFunc" )
.def(
"__call__"
, (::Float ( ::gezi::LogEChiSquareFunc::* )( int,int,int,long long unsigned int ) )( &::gezi::LogEChiSquareFunc::operator() )
, ( bp::arg("a00"), bp::arg("nterm1"), bp::arg("nterm2"), bp::arg("n") ) );

{ //::gezi::LogHelper
typedef bp::class_< gezi::LogHelper > LogHelper_exposer_t;
LogHelper_exposer_t LogHelper_exposer = LogHelper_exposer_t( "LogHelper", bp::init< bp::optional< int > >(( bp::arg("log_level")=(int)(16) )) );
bp::scope LogHelper_scope( LogHelper_exposer );
bp::implicitly_convertible< int, gezi::LogHelper >();
LogHelper_exposer.def( bp::init< std::string const &, bp::optional< std::string const & > >(( bp::arg("conf_file"), bp::arg("conf_path")="./conf" )) );
{ //::gezi::LogHelper::set_level

typedef void ( *set_level_function_type )( int );

LogHelper_exposer.def(
"set_level"
, set_level_function_type( &::gezi::LogHelper::set_level )
, ( bp::arg("log_level") ) );

}
LogHelper_exposer.staticmethod( "set_level" );
}

bp::class_< gezi::NoProgressBar >( "NoProgressBar" )
.def(
"__call__"
, (void ( ::gezi::NoProgressBar::* )( ::size_t,::size_t ) const)( &::gezi::NoProgressBar::operator() )
, ( bp::arg("arg0"), bp::arg("arg1") ) );

bp::class_< gezi::PointMutualInfoFunc >( "PointMutualInfoFunc" )
.def(
"__call__"
, (::Float ( ::gezi::PointMutualInfoFunc::* )( int,int,int,::uint64 ) )( &::gezi::PointMutualInfoFunc::operator() )
, ( bp::arg("a"), bp::arg("n1"), bp::arg("n2"), bp::arg("n") ) );

{ //::gezi::ProgressBar
typedef bp::class_< gezi::ProgressBar > ProgressBar_exposer_t;
ProgressBar_exposer_t ProgressBar_exposer = ProgressBar_exposer_t( "ProgressBar", bp::init< >() );
bp::scope ProgressBar_scope( ProgressBar_exposer );
ProgressBar_exposer.def( bp::init< std::string >(( bp::arg("log_word") )) );
bp::implicitly_convertible< std::string, gezi::ProgressBar >();
ProgressBar_exposer.def( bp::init< size_t >(( bp::arg("total") )) );
bp::implicitly_convertible< size_t, gezi::ProgressBar >();
ProgressBar_exposer.def( bp::init< std::string, size_t >(( bp::arg("log_word"), bp::arg("total") )) );
ProgressBar_exposer.def( bp::init< size_t, std::string >(( bp::arg("total"), bp::arg("log_word") )) );
{ //::gezi::ProgressBar::counter

typedef ::size_t ( ::gezi::ProgressBar::*counter_function_type )(  ) const;

ProgressBar_exposer.def(
"counter"
, counter_function_type( &::gezi::ProgressBar::counter ) );

}
{ //::gezi::ProgressBar::operator()

typedef void ( ::gezi::ProgressBar::*__call___function_type )( ::size_t ) ;

ProgressBar_exposer.def(
"__call__"
, __call___function_type( &::gezi::ProgressBar::operator() )
, ( bp::arg("current") ) );

}
{ //::gezi::ProgressBar::operator()

typedef void ( ::gezi::ProgressBar::*__call___function_type )( ::size_t,::size_t ) ;

ProgressBar_exposer.def(
"__call__"
, __call___function_type( &::gezi::ProgressBar::operator() )
, ( bp::arg("current"), bp::arg("total") ) );

}
ProgressBar_exposer.def( bp::self += bp::other< size_t >() );
{ //::gezi::ProgressBar::progress

typedef void ( ::gezi::ProgressBar::*progress_function_type )( ::size_t ) ;

ProgressBar_exposer.def(
"progress"
, progress_function_type( &::gezi::ProgressBar::progress )
, ( bp::arg("current") ) );

}
{ //::gezi::ProgressBar::progress

typedef void ( ::gezi::ProgressBar::*progress_function_type )( ::size_t,::size_t ) ;

ProgressBar_exposer.def(
"progress"
, progress_function_type( &::gezi::ProgressBar::progress )
, ( bp::arg("current"), bp::arg("total") ) );

}
}

bp::class_< gezi::ValueIdentifer< double >, bp::bases< gezi::Identifer > >( "DoubleIdentifer" )
.def(
"Load"
, (void ( ::gezi::ValueIdentifer<double>::* )( ::std::string ) )( &::gezi::ValueIdentifer< double >::Load )
, ( bp::arg("file") ) )
.def(
"Save"
, (void ( ::gezi::ValueIdentifer<double>::* )( ::std::string ) )( &::gezi::ValueIdentifer< double >::Save )
, ( bp::arg("file") ) )
.def(
"get_value"
, (double ( ::gezi::ValueIdentifer<double>::* )( ::std::string ) const)( &::gezi::ValueIdentifer< double >::get_value )
, ( bp::arg("key") ) )
.def(
"load"
, (bool ( ::gezi::ValueIdentifer<double>::* )( ::std::string,int,::std::string ) )( &::gezi::ValueIdentifer< double >::load )
, ( bp::arg("file"), bp::arg("index")=(int)(1), bp::arg("sep")="\011" ) )
.def(
"value"
, (double ( ::gezi::ValueIdentifer<double>::* )( int ) const)( &::gezi::ValueIdentifer< double >::value )
, ( bp::arg("index") ) );

bp::class_< gezi::PyDoubleIdentifer, bp::bases< gezi::ValueIdentifer< double > > >( "PyDoubleIdentifer" );

bp::class_< gezi::ValueIdentifer< int >, bp::bases< gezi::Identifer > >( "IntIdentifer" )
.def(
"Load"
, (void ( ::gezi::ValueIdentifer<int>::* )( ::std::string ) )( &::gezi::ValueIdentifer< int >::Load )
, ( bp::arg("file") ) )
.def(
"Save"
, (void ( ::gezi::ValueIdentifer<int>::* )( ::std::string ) )( &::gezi::ValueIdentifer< int >::Save )
, ( bp::arg("file") ) )
.def(
"get_value"
, (int ( ::gezi::ValueIdentifer<int>::* )( ::std::string ) const)( &::gezi::ValueIdentifer< int >::get_value )
, ( bp::arg("key") ) )
.def(
"load"
, (bool ( ::gezi::ValueIdentifer<int>::* )( ::std::string,int,::std::string ) )( &::gezi::ValueIdentifer< int >::load )
, ( bp::arg("file"), bp::arg("index")=(int)(1), bp::arg("sep")="\011" ) )
.def(
"value"
, (int ( ::gezi::ValueIdentifer<int>::* )( int ) const)( &::gezi::ValueIdentifer< int >::value )
, ( bp::arg("index") ) );

bp::class_< gezi::PyIntIndentifer, bp::bases< gezi::ValueIdentifer< int > > >( "PyIntIndentifer" );

bp::class_< gezi::RedisClient, boost::noncopyable >( "RedisClient", bp::init< >() )
.def( bp::init< std::string, bp::optional< std::string > >(( bp::arg("confFile"), bp::arg("confDir")="./conf" )) )
.def(
"Get"
, (int ( ::gezi::RedisClient::* )( ::std::string,::std::string & ) const)( &::gezi::RedisClient::Get )
, ( bp::arg("key"), bp::arg("value") ) )
.def(
"GetClient"
, (::store::RedisClient * ( ::gezi::RedisClient::* )(  ) )( &::gezi::RedisClient::GetClient )
, bp::return_internal_reference<>())
.def(
"Init"
, (int ( ::gezi::RedisClient::* )( ::std::string,::std::string ) )( &::gezi::RedisClient::Init )
, ( bp::arg("confFile")="redis_client.conf", bp::arg("confDir")="./conf" ) )
.def(
"Zrange"
, (int ( ::gezi::RedisClient::* )( ::std::string,int,int,::std::vector< std::string > & ) )( &::gezi::RedisClient::Zrange )
, ( bp::arg("key"), bp::arg("first"), bp::arg("last"), bp::arg("values") ) )
.def(
"Zrange"
, (::std::vector< std::string > ( ::gezi::RedisClient::* )( ::std::string,int,int ) )( &::gezi::RedisClient::Zrange )
, ( bp::arg("key"), bp::arg("first"), bp::arg("last") ) )
.def(
"ZrangeFirstNElement"
, (int ( ::gezi::RedisClient::* )( ::std::string,int,::std::vector< std::string > &,int,bool ) )( &::gezi::RedisClient::ZrangeFirstNElement )
, ( bp::arg("key"), bp::arg("num"), bp::arg("values"), bp::arg("step")=(int)(200), bp::arg("allowError")=(bool)(true) ) )
.def(
"ZrangeFirstNElement"
, (::std::vector< std::string > ( ::gezi::RedisClient::* )( ::std::string,int,int,bool ) )( &::gezi::RedisClient::ZrangeFirstNElement )
, ( bp::arg("key"), bp::arg("num"), bp::arg("step")=(int)(200), bp::arg("allowError")=(bool)(true) ) )
.def(
"ZrangeFirstNElementWithScores"
, (int ( ::gezi::RedisClient::* )( ::std::string,int,::std::vector< std::string > &,::std::vector< double > &,int,bool ) )( &::gezi::RedisClient::ZrangeFirstNElementWithScores )
, ( bp::arg("key"), bp::arg("num"), bp::arg("values"), bp::arg("scores"), bp::arg("step")=(int)(200), bp::arg("allowError")=(bool)(true) ) )
.def(
"ZrangeWithScores"
, (int ( ::gezi::RedisClient::* )( ::std::string,int,int,::std::vector< std::string > &,::std::vector< double > & ) )( &::gezi::RedisClient::ZrangeWithScores )
, ( bp::arg("key"), bp::arg("first"), bp::arg("last"), bp::arg("values"), bp::arg("scores") ) )
.def(
"at"
, (::std::string ( ::gezi::RedisClient::* )( ::std::string const & ) const)( &::gezi::RedisClient::at )
, ( bp::arg("key") ) )
.def(
"count"
, (int ( ::gezi::RedisClient::* )( ::std::string ) const)( &::gezi::RedisClient::count )
, ( bp::arg("key") ) )
.def(
"end"
, (::std::pair< std::string, std::string > * ( ::gezi::RedisClient::* )(  ) )( &::gezi::RedisClient::end )
, bp::return_internal_reference<>())
.def(
"find"
, (::std::pair< std::string, std::string > * ( ::gezi::RedisClient::* )( ::std::string const & ) )( &::gezi::RedisClient::find )
, ( bp::arg("key") )
, bp::return_internal_reference<>())
.def(
"init"
, (::store::RedisClient * ( ::gezi::RedisClient::* )( ::std::string,::std::string ) )( &::gezi::RedisClient::init )
, ( bp::arg("confFile")="redis_client.conf", bp::arg("confDir")="./conf" )
, bp::return_internal_reference<>())
.def(
"__getitem__"
, (::std::string & ( ::gezi::RedisClient::* )( ::std::string const & ) )( &::gezi::RedisClient::operator[] )
, ( bp::arg("key") )
, bp::return_value_policy< bp::copy_non_const_reference >() )
.def(
"__getitem__"
, (::std::string ( ::gezi::RedisClient::* )( ::std::string const & ) const)( &::gezi::RedisClient::operator[] )
, ( bp::arg("key") ) );

{ //::gezi::SegHandle
typedef bp::class_< SegHandle_wrapper > SegHandle_exposer_t;
SegHandle_exposer_t SegHandle_exposer = SegHandle_exposer_t( "SegHandle", bp::init< >() );
bp::scope SegHandle_scope( SegHandle_exposer );
SegHandle_exposer.def( bp::init< int >(( bp::arg("bufsize") )) );
bp::implicitly_convertible< int, gezi::SegHandle >();
{ //::gezi::SegHandle::clear

typedef void ( ::gezi::SegHandle::*clear_function_type )(  ) ;

SegHandle_exposer.def(
"clear"
, clear_function_type( &::gezi::SegHandle::clear ) );

}
{ //::gezi::SegHandle::init

typedef void ( ::gezi::SegHandle::*init_function_type )( int ) ;

SegHandle_exposer.def(
"init"
, init_function_type( &::gezi::SegHandle::init )
, ( bp::arg("buf_size_")=(int)(gezi::SegHandle::SEG_BUFF_SIZE) ) );

}
SegHandle_exposer.def_readonly( "SEG_BUFF_SIZE", gezi::SegHandle::SEG_BUFF_SIZE );
SegHandle_exposer.def_readwrite( "buf_size", &gezi::SegHandle::buf_size );
SegHandle_exposer.def_readwrite( "nresult", &gezi::SegHandle::nresult );
SegHandle_exposer.add_property( "pout"
, bp::make_function( (::scw_out_t * (*)( ::gezi::SegHandle const & ))(&SegHandle_wrapper::get_pout), bp::return_internal_reference< >() )
, bp::make_function( (void (*)( ::gezi::SegHandle &,::scw_out_t * ))(&SegHandle_wrapper::set_pout), bp::with_custodian_and_ward_postcall< 1, 2 >() ) );
SegHandle_exposer.def_readwrite( "token_vec", &gezi::SegHandle::token_vec );
SegHandle_exposer.add_property( "tokens"
, bp::make_function( (::token_t * (*)( ::gezi::SegHandle const & ))(&SegHandle_wrapper::get_tokens), bp::return_internal_reference< >() )
, bp::make_function( (void (*)( ::gezi::SegHandle &,::token_t * ))(&SegHandle_wrapper::set_tokens), bp::with_custodian_and_ward_postcall< 1, 2 >() ) );
}

bp::class_< gezi::SegNode >( "SegNode", bp::init< >() )
.def( bp::init< std::string, int, int, int >(( bp::arg("word_"), bp::arg("length_"), bp::arg("offset_"), bp::arg("weight_") )) )
.def_readwrite( "length", &gezi::SegNode::length )
.def_readwrite( "offset", &gezi::SegNode::offset )
.def_readwrite( "weight", &gezi::SegNode::weight )
.def_readwrite( "word", &gezi::SegNode::word );

{ //::gezi::Segmentor
typedef bp::class_< gezi::Segmentor > Segmentor_exposer_t;
Segmentor_exposer_t Segmentor_exposer = Segmentor_exposer_t( "Segmentor", bp::init< bp::optional< int > >(( bp::arg("seg_buff_size")=(int)(gezi::SegHandle::SEG_BUFF_SIZE) )) );
bp::scope Segmentor_scope( Segmentor_exposer );
bp::implicitly_convertible< int, gezi::Segmentor >();
{ //::gezi::Segmentor::Init

typedef bool ( *Init_function_type )( int,::std::string,int,::std::string );

Segmentor_exposer.def(
"Init"
, Init_function_type( &::gezi::Segmentor::Init )
, ( bp::arg("seg_buff_size")=(int)(gezi::SegHandle::SEG_BUFF_SIZE), bp::arg("data_dir")="./data/wordseg", bp::arg("type")=(int)(gezi::SEG_USE_DEFAULT), bp::arg("conf_path")="./conf/scw.conf" ) );

}
{ //::gezi::Segmentor::SegFlag

typedef void ( *SegFlag_function_type )( int );

Segmentor_exposer.def(
"SegFlag"
, SegFlag_function_type( &::gezi::Segmentor::SegFlag )
, ( bp::arg("flag_") ) );

}
{ //::gezi::Segmentor::Segment

typedef ::std::vector< std::string > ( *Segment_function_type )( ::std::string,int );

Segmentor_exposer.def(
"Segment"
, Segment_function_type( &::gezi::Segmentor::Segment )
, ( bp::arg("input"), bp::arg("type")=(int)(gezi::SEG_WPCOMP) ) );

}
{ //::gezi::Segmentor::Segment

typedef bool ( *Segment_function_type )( ::std::string,::std::vector< std::string > &,int );

Segmentor_exposer.def(
"Segment"
, Segment_function_type( &::gezi::Segmentor::Segment )
, ( bp::arg("input"), bp::arg("result"), bp::arg("type")=(int)(gezi::SEG_WPCOMP) ) );

}
{ //::gezi::Segmentor::Segment

typedef ::std::string ( *Segment_function_type )( ::std::string,::std::string,int );

Segmentor_exposer.def(
"Segment"
, Segment_function_type( &::gezi::Segmentor::Segment )
, ( bp::arg("input"), bp::arg("sep"), bp::arg("type")=(int)(gezi::SEG_WPCOMP) ) );

}
{ //::gezi::Segmentor::Segment

typedef bool ( *Segment_function_type )( ::std::string,::std::vector< gezi::SegNode > &,int );

Segmentor_exposer.def(
"Segment"
, Segment_function_type( &::gezi::Segmentor::Segment )
, ( bp::arg("input"), bp::arg("result"), bp::arg("type")=(int)(gezi::SEG_WPCOMP) ) );

}
{ //::gezi::Segmentor::Uninit

typedef void ( *Uninit_function_type )(  );

Segmentor_exposer.def(
"Uninit"
, Uninit_function_type( &::gezi::Segmentor::Uninit ) );

}
{ //::gezi::Segmentor::get_handle

typedef ::gezi::SegHandle & ( ::gezi::Segmentor::*get_handle_function_type )(  ) ;

Segmentor_exposer.def(
"get_handle"
, get_handle_function_type( &::gezi::Segmentor::get_handle )
, bp::return_internal_reference<>());

}
{ //::gezi::Segmentor::get_segnodes

typedef ::std::vector< gezi::SegNode > ( *get_segnodes_function_type )( ::gezi::SegHandle & );

Segmentor_exposer.def(
"get_segnodes"
, get_segnodes_function_type( &::gezi::Segmentor::get_segnodes )
, ( bp::arg("handle") ) );

}
{ //::gezi::Segmentor::get_segnodes

typedef ::std::vector< gezi::SegNode > ( ::gezi::Segmentor::*get_segnodes_function_type )(  ) ;

Segmentor_exposer.def(
"get_segnodes"
, get_segnodes_function_type( &::gezi::Segmentor::get_segnodes ) );

}
{ //::gezi::Segmentor::get_tokens

typedef int ( *get_tokens_function_type )( ::gezi::SegHandle &,int );

Segmentor_exposer.def(
"get_tokens"
, get_tokens_function_type( &::gezi::Segmentor::get_tokens )
, ( bp::arg("handle"), bp::arg("type")=(int)(gezi::SEG_WPCOMP) ) );

}
{ //::gezi::Segmentor::get_tokens

typedef int ( ::gezi::Segmentor::*get_tokens_function_type )( int ) ;

Segmentor_exposer.def(
"get_tokens"
, get_tokens_function_type( &::gezi::Segmentor::get_tokens )
, ( bp::arg("type")=(int)(gezi::SEG_WPCOMP) ) );

}
{ //::gezi::Segmentor::init

typedef bool ( *init_function_type )( ::std::string,int,::std::string );

Segmentor_exposer.def(
"init"
, init_function_type( &::gezi::Segmentor::init )
, ( bp::arg("data_dir")="./data/wordseg", bp::arg("type")=(int)(gezi::SEG_USE_DEFAULT), bp::arg("conf_path")="./conf/scw.conf" ) );

}
{ //::gezi::Segmentor::seg_words

typedef bool ( *seg_words_function_type )( ::std::string,::gezi::SegHandle & );

Segmentor_exposer.def(
"seg_words"
, seg_words_function_type( &::gezi::Segmentor::seg_words )
, ( bp::arg("input"), bp::arg("handle") ) );

}
{ //::gezi::Segmentor::segment

typedef bool ( *segment_function_type )( ::std::string,::gezi::SegHandle &,int );

Segmentor_exposer.def(
"segment"
, segment_function_type( &::gezi::Segmentor::segment )
, ( bp::arg("input"), bp::arg("handle"), bp::arg("type")=(int)(gezi::SEG_WPCOMP) ) );

}
{ //::gezi::Segmentor::segment

typedef bool ( *segment_function_type )( ::std::string,::gezi::SegHandle &,::std::vector< std::string > &,int );

Segmentor_exposer.def(
"segment"
, segment_function_type( &::gezi::Segmentor::segment )
, ( bp::arg("input"), bp::arg("handle"), bp::arg("result"), bp::arg("type")=(int)(gezi::SEG_WPCOMP) ) );

}
{ //::gezi::Segmentor::segment

typedef ::std::string ( *segment_function_type )( ::std::string,::gezi::SegHandle &,::std::string,int );

Segmentor_exposer.def(
"segment"
, segment_function_type( &::gezi::Segmentor::segment )
, ( bp::arg("input"), bp::arg("handle"), bp::arg("sep"), bp::arg("type")=(int)(gezi::SEG_WPCOMP) ) );

}
{ //::gezi::Segmentor::segment

typedef ::std::vector< std::string > ( ::gezi::Segmentor::*segment_function_type )( ::std::string,int ) ;

Segmentor_exposer.def(
"segment"
, segment_function_type( &::gezi::Segmentor::segment )
, ( bp::arg("input"), bp::arg("type")=(int)(gezi::SEG_WPCOMP) ) );

}
{ //::gezi::Segmentor::segment

typedef bool ( ::gezi::Segmentor::*segment_function_type )( ::std::string,::std::vector< std::string > &,int ) ;

Segmentor_exposer.def(
"segment"
, segment_function_type( &::gezi::Segmentor::segment )
, ( bp::arg("input"), bp::arg("result"), bp::arg("type")=(int)(gezi::SEG_WPCOMP) ) );

}
{ //::gezi::Segmentor::segment

typedef ::std::string ( ::gezi::Segmentor::*segment_function_type )( ::std::string,::std::string,int ) ;

Segmentor_exposer.def(
"segment"
, segment_function_type( &::gezi::Segmentor::segment )
, ( bp::arg("input"), bp::arg("sep"), bp::arg("type")=(int)(gezi::SEG_WPCOMP) ) );

}
{ //::gezi::Segmentor::segment

typedef bool ( ::gezi::Segmentor::*segment_function_type )( ::std::string,::std::vector< gezi::SegNode > &,int ) ;

Segmentor_exposer.def(
"segment"
, segment_function_type( &::gezi::Segmentor::segment )
, ( bp::arg("input"), bp::arg("result"), bp::arg("type")=(int)(gezi::SEG_WPCOMP) ) );

}
{ //::gezi::Segmentor::set_flag

typedef ::gezi::Segmentor & ( ::gezi::Segmentor::*set_flag_function_type )( int ) ;

Segmentor_exposer.def(
"set_flag"
, set_flag_function_type( &::gezi::Segmentor::set_flag )
, ( bp::arg("flag_") )
, bp::return_internal_reference<>());

}
{ //::gezi::Segmentor::uninit

typedef void ( *uninit_function_type )(  );

Segmentor_exposer.def(
"uninit"
, uninit_function_type( &::gezi::Segmentor::uninit ) );

}
Segmentor_exposer.staticmethod( "Init" );
Segmentor_exposer.staticmethod( "SegFlag" );
Segmentor_exposer.staticmethod( "Segment" );
Segmentor_exposer.staticmethod( "Uninit" );
Segmentor_exposer.staticmethod( "get_segnodes" );
Segmentor_exposer.staticmethod( "get_tokens" );
Segmentor_exposer.staticmethod( "init" );
Segmentor_exposer.staticmethod( "seg_words" );
Segmentor_exposer.staticmethod( "segment" );
Segmentor_exposer.staticmethod( "uninit" );
}

bp::class_< gezi::SharedConf >( "SharedConf" )
.def(
"conf"
, (::comcfg::Configure & (*)(  ))( &::gezi::SharedConf::conf )
, bp::return_internal_reference<>())
.def(
"get_conf"
, (::comcfg::Configure & (*)(  ))( &::gezi::SharedConf::get_conf )
, bp::return_internal_reference<>())
.def(
"init"
, (bool (*)( ::std::string,::std::string ))( &::gezi::SharedConf::init )
, ( bp::arg("config_file")="strategy.conf", bp::arg("dir")="./conf" ) )
.def(
"instance"
, (::comcfg::Configure * (*)(  ))( &::gezi::SharedConf::instance )
, bp::return_internal_reference<>())
.staticmethod( "conf" )
.staticmethod( "get_conf" )
.staticmethod( "init" )
.staticmethod( "instance" );

bp::class_< gezi::SharedIdentifers >( "SharedIdentifers" )
.def(
"Instance"
, (::gezi::Identifer & (*)(  ))( &::gezi::SharedIdentifers::Instance )
, bp::return_internal_reference<>())
.def(
"Instance"
, (::gezi::Identifer & (*)( ::std::string ))( &::gezi::SharedIdentifers::Instance )
, ( bp::arg("path") )
, bp::return_internal_reference<>())
.def(
"instance"
, (::gezi::Identifer & (*)( ::std::string ))( &::gezi::SharedIdentifers::instance )
, ( bp::arg("path") )
, bp::return_internal_reference<>())
.staticmethod( "Instance" )
.staticmethod( "instance" );

bp::class_< gezi::TTestFunc >( "TTestFunc" )
.def(
"__call__"
, (::Float ( ::gezi::TTestFunc::* )( int,int,int,long long unsigned int ) )( &::gezi::TTestFunc::operator() )
, ( bp::arg("a00"), bp::arg("nterm1"), bp::arg("nterm2"), bp::arg("n") ) );

bp::class_< gezi::ThreadLogHelper >( "ThreadLogHelper", bp::init< >() );

{ //::gezi::Vec2dWriter
typedef bp::class_< gezi::Vec2dWriter, boost::noncopyable > Vec2dWriter_exposer_t;
Vec2dWriter_exposer_t Vec2dWriter_exposer = Vec2dWriter_exposer_t( "Vec2dWriter", bp::init< std::string const & >(( bp::arg("file") )) );
bp::scope Vec2dWriter_scope( Vec2dWriter_exposer );
bp::implicitly_convertible< std::string const &, gezi::Vec2dWriter >();
{ //::gezi::Vec2dWriter::close

typedef void ( ::gezi::Vec2dWriter::*close_function_type )(  ) ;

Vec2dWriter_exposer.def(
"close"
, close_function_type( &::gezi::Vec2dWriter::close ) );

}
}

{ //::gezi::VecWriter
typedef bp::class_< gezi::VecWriter, boost::noncopyable > VecWriter_exposer_t;
VecWriter_exposer_t VecWriter_exposer = VecWriter_exposer_t( "VecWriter", bp::init< std::string const & >(( bp::arg("file") )) );
bp::scope VecWriter_scope( VecWriter_exposer );
bp::implicitly_convertible< std::string const &, gezi::VecWriter >();
{ //::gezi::VecWriter::close

typedef void ( ::gezi::VecWriter::*close_function_type )(  ) ;

VecWriter_exposer.def(
"close"
, close_function_type( &::gezi::VecWriter::close ) );

}
}

bp::class_< gezi::py::Predictor >( "Predictor" )
.def(
"Output"
, (::Float ( ::gezi::py::Predictor::* )( ::gezi::Vector & ) )( &::gezi::py::Predictor::Output )
, ( bp::arg("features") ) )
.def(
"Predict"
, (::Float ( ::gezi::py::Predictor::* )( ::gezi::Vector & ) )( &::gezi::py::Predictor::Predict )
, ( bp::arg("features") ) )
.def(
"Predict"
, (::Float ( ::gezi::py::Predictor::* )( ::gezi::Vector &,::Float & ) )( &::gezi::py::Predictor::Predict )
, ( bp::arg("features"), bp::arg("output") ) )
.def(
"Save"
, (void ( ::gezi::py::Predictor::* )( ::std::string ) )( &::gezi::py::Predictor::Save )
, ( bp::arg("path") ) )
.def(
"Save"
, (void ( ::gezi::py::Predictor::* )(  ) )( &::gezi::py::Predictor::Save ) )
.def(
"SaveJson"
, (void ( ::gezi::py::Predictor::* )( ::std::string ) )( &::gezi::py::Predictor::SaveJson )
, ( bp::arg("file") ) )
.def(
"SaveJson"
, (void ( ::gezi::py::Predictor::* )(  ) )( &::gezi::py::Predictor::SaveJson ) );

bp::class_< gezi::py::PredictorFactory >( "PredictorFactory" )
.def(
"LoadPredictor"
, (::gezi::py::Predictor (*)( ::std::string ))( &::gezi::py::PredictorFactory::LoadPredictor )
, ( bp::arg("path") ) )
.def(
"LoadTextPredictor"
, (::gezi::py::Predictor (*)( ::std::string ))( &::gezi::py::PredictorFactory::LoadTextPredictor )
, ( bp::arg("path") ) )
.staticmethod( "LoadPredictor" )
.staticmethod( "LoadTextPredictor" );

bp::class_< gezi::tieba::CommentInfo >( "CommentInfo" )
.def( bp::self == bp::self )
.def_readwrite( "commentId", &gezi::tieba::CommentInfo::commentId )
.def_readwrite( "content", &gezi::tieba::CommentInfo::content )
.def_readwrite( "createTime", &gezi::tieba::CommentInfo::createTime )
.def_readwrite( "ip", &gezi::tieba::CommentInfo::ip )
.def_readwrite( "postId", &gezi::tieba::CommentInfo::postId )
.def_readwrite( "threadId", &gezi::tieba::CommentInfo::threadId )
.def_readwrite( "userId", &gezi::tieba::CommentInfo::userId )
.def_readwrite( "userName", &gezi::tieba::CommentInfo::userName );

bp::class_< gezi::tieba::DeleteInfo >( "DeleteInfo" )
.def( bp::self == bp::self )
.def_readwrite( "isDeleted", &gezi::tieba::DeleteInfo::isDeleted )
.def_readwrite( "monitorType", &gezi::tieba::DeleteInfo::monitorType )
.def_readwrite( "opTime", &gezi::tieba::DeleteInfo::opTime )
.def_readwrite( "opUid", &gezi::tieba::DeleteInfo::opUid )
.def_readwrite( "pid", &gezi::tieba::DeleteInfo::pid )
.def_readwrite( "tid", &gezi::tieba::DeleteInfo::tid );

bp::class_< gezi::tieba::PostInfo >( "PostInfo" )
.def(
"IsQuote"
, (bool ( ::gezi::tieba::PostInfo::* )(  ) )( &::gezi::tieba::PostInfo::IsQuote ) )
.def(
"IsThread"
, (bool ( ::gezi::tieba::PostInfo::* )(  ) )( &::gezi::tieba::PostInfo::IsThread ) )
.def( bp::self < bp::self )
.def( bp::self == bp::self )
.def_readwrite( "content", &gezi::tieba::PostInfo::content )
.def_readwrite( "createTime", &gezi::tieba::PostInfo::createTime )
.def_readwrite( "forumId", &gezi::tieba::PostInfo::forumId )
.def_readwrite( "forumName", &gezi::tieba::PostInfo::forumName )
.def_readwrite( "ip", &gezi::tieba::PostInfo::ip )
.def_readwrite( "postId", &gezi::tieba::PostInfo::postId )
.def_readwrite( "quoteInfo", &gezi::tieba::PostInfo::quoteInfo )
.def_readwrite( "threadId", &gezi::tieba::PostInfo::threadId )
.def_readwrite( "title", &gezi::tieba::PostInfo::title )
.def_readwrite( "userId", &gezi::tieba::PostInfo::userId )
.def_readwrite( "userName", &gezi::tieba::PostInfo::userName );

bp::class_< gezi::tieba::ExtendedPostInfo, bp::bases< gezi::tieba::PostInfo > >( "ExtendedPostInfo" )
.def_readwrite( "urlInfoMap", &gezi::tieba::ExtendedPostInfo::urlInfoMap )
.def_readwrite( "urls", &gezi::tieba::ExtendedPostInfo::urls );

bp::class_< gezi::tieba::ForumInfo >( "ForumInfo" )
.def( bp::self == bp::self )
.def_readwrite( "fid", &gezi::tieba::ForumInfo::fid )
.def_readwrite( "hotValue", &gezi::tieba::ForumInfo::hotValue )
.def_readwrite( "level1Name", &gezi::tieba::ForumInfo::level1Name )
.def_readwrite( "level2Name", &gezi::tieba::ForumInfo::level2Name )
.def_readwrite( "rank", &gezi::tieba::ForumInfo::rank );

bp::class_< gezi::tieba::FullPostsInfo >( "FullPostsInfo" )
.def(
"GetComments"
, (::gezi::tieba::Comments const & ( ::gezi::tieba::FullPostsInfo::* )( int ) const)( &::gezi::tieba::FullPostsInfo::GetComments )
, ( bp::arg("idx") )
, bp::return_value_policy< bp::copy_const_reference >() )
.def(
"IsValid"
, (bool ( ::gezi::tieba::FullPostsInfo::* )(  ) )( &::gezi::tieba::FullPostsInfo::IsValid ) )
.def(
"size"
, (::size_t ( ::gezi::tieba::FullPostsInfo::* )(  ) )( &::gezi::tieba::FullPostsInfo::size ) )
.def_readwrite( "commentsVec", &gezi::tieba::FullPostsInfo::commentsVec )
.def_readwrite( "contents", &gezi::tieba::FullPostsInfo::contents )
.def_readwrite( "forumId", &gezi::tieba::FullPostsInfo::forumId )
.def_readwrite( "forumName", &gezi::tieba::FullPostsInfo::forumName )
.def_readwrite( "ips", &gezi::tieba::FullPostsInfo::ips )
.def_readwrite( "isDeleted", &gezi::tieba::FullPostsInfo::isDeleted )
.def_readwrite( "numPosts", &gezi::tieba::FullPostsInfo::numPosts )
.def_readwrite( "pids", &gezi::tieba::FullPostsInfo::pids )
.def_readwrite( "threadId", &gezi::tieba::FullPostsInfo::threadId )
.def_readwrite( "times", &gezi::tieba::FullPostsInfo::times )
.def_readwrite( "title", &gezi::tieba::FullPostsInfo::title )
.def_readwrite( "uids", &gezi::tieba::FullPostsInfo::uids )
.def_readwrite( "unames", &gezi::tieba::FullPostsInfo::unames );

bp::class_< gezi::tieba::ImgInfo >( "ImgInfo" )
.def( bp::self == bp::self )
.def(
"size"
, (::size_t ( ::gezi::tieba::ImgInfo::* )(  ) )( &::gezi::tieba::ImgInfo::size ) )
.def_readwrite( "color_rate", &gezi::tieba::ImgInfo::color_rate )
.def_readwrite( "gameporn_rate", &gezi::tieba::ImgInfo::gameporn_rate )
.def_readwrite( "imgCount", &gezi::tieba::ImgInfo::imgCount )
.def_readwrite( "ocr_img", &gezi::tieba::ImgInfo::ocr_img )
.def_readwrite( "pid", &gezi::tieba::ImgInfo::pid )
.def_readwrite( "porn_rate", &gezi::tieba::ImgInfo::porn_rate )
.def_readwrite( "simi_rate", &gezi::tieba::ImgInfo::simi_rate )
.def_readwrite( "text_ratio", &gezi::tieba::ImgInfo::text_ratio )
.def_readwrite( "textbox_num", &gezi::tieba::ImgInfo::textbox_num );

bp::class_< gezi::tieba::PostsInfo >( "PostsInfo" )
.def(
"size"
, (::size_t ( ::gezi::tieba::PostsInfo::* )(  ) )( &::gezi::tieba::PostsInfo::size ) )
.def_readwrite( "contents", &gezi::tieba::PostsInfo::contents )
.def_readwrite( "fids", &gezi::tieba::PostsInfo::fids )
.def_readwrite( "fnames", &gezi::tieba::PostsInfo::fnames )
.def_readwrite( "ips", &gezi::tieba::PostsInfo::ips )
.def_readwrite( "isThreads", &gezi::tieba::PostsInfo::isThreads )
.def_readwrite( "pids", &gezi::tieba::PostsInfo::pids )
.def_readwrite( "tids", &gezi::tieba::PostsInfo::tids )
.def_readwrite( "times", &gezi::tieba::PostsInfo::times )
.def_readwrite( "titles", &gezi::tieba::PostsInfo::titles )
.def_readwrite( "uids", &gezi::tieba::PostsInfo::uids );

bp::class_< gezi::tieba::PyHack_Comments >( "PyHack_Comments" )
.def_readwrite( "comments", &gezi::tieba::PyHack_Comments::comments );

bp::class_< gezi::tieba::QuoteInfo >( "QuoteInfo" )
.def( bp::self == bp::self )
.def_readwrite( "content", &gezi::tieba::QuoteInfo::content )
.def_readwrite( "ip", &gezi::tieba::QuoteInfo::ip )
.def_readwrite( "postId", &gezi::tieba::QuoteInfo::postId )
.def_readwrite( "userId", &gezi::tieba::QuoteInfo::userId )
.def_readwrite( "userName", &gezi::tieba::QuoteInfo::userName );

bp::class_< gezi::tieba::ReplyInfo >( "ReplyInfo" )
.def_readwrite( "createTime", &gezi::tieba::ReplyInfo::createTime )
.def_readwrite( "forumId", &gezi::tieba::ReplyInfo::forumId )
.def_readwrite( "ip", &gezi::tieba::ReplyInfo::ip )
.def_readwrite( "postId", &gezi::tieba::ReplyInfo::postId )
.def_readwrite( "threadId", &gezi::tieba::ReplyInfo::threadId )
.def_readwrite( "userId", &gezi::tieba::ReplyInfo::userId );

bp::class_< gezi::tieba::ThreadInfo >( "ThreadInfo" )
.def( bp::self == bp::self )
.def_readwrite( "address", &gezi::tieba::ThreadInfo::address )
.def_readwrite( "content", &gezi::tieba::ThreadInfo::content )
.def_readwrite( "createTime", &gezi::tieba::ThreadInfo::createTime )
.def_readwrite( "forumId", &gezi::tieba::ThreadInfo::forumId )
.def_readwrite( "forumName", &gezi::tieba::ThreadInfo::forumName )
.def_readwrite( "hasMedia", &gezi::tieba::ThreadInfo::hasMedia )
.def_readwrite( "ip", &gezi::tieba::ThreadInfo::ip )
.def_readwrite( "isDeleted", &gezi::tieba::ThreadInfo::isDeleted )
.def_readwrite( "postId", &gezi::tieba::ThreadInfo::postId )
.def_readwrite( "threadId", &gezi::tieba::ThreadInfo::threadId )
.def_readwrite( "title", &gezi::tieba::ThreadInfo::title )
.def_readwrite( "userId", &gezi::tieba::ThreadInfo::userId );

bp::class_< gezi::tieba::UrateInfo >( "UrateInfo" )
.def(
"IsValid"
, (bool ( ::gezi::tieba::UrateInfo::* )(  ) )( &::gezi::tieba::UrateInfo::IsValid ) )
.def(
"size"
, (::size_t ( ::gezi::tieba::UrateInfo::* )(  ) )( &::gezi::tieba::UrateInfo::size ) )
.def(
"type"
, (int ( ::gezi::tieba::UrateInfo::* )(  ) )( &::gezi::tieba::UrateInfo::type ) )
.def_readwrite( "imginfo", &gezi::tieba::UrateInfo::imginfo )
.def_readwrite( "isWhiteTitle", &gezi::tieba::UrateInfo::isWhiteTitle )
.def_readwrite( "nowPostInfo", &gezi::tieba::UrateInfo::nowPostInfo )
.def_readwrite( "postId", &gezi::tieba::UrateInfo::postId )
.def_readwrite( "postsInfo", &gezi::tieba::UrateInfo::postsInfo )
.def_readwrite( "urlInfoMap", &gezi::tieba::UrateInfo::urlInfoMap )
.def_readwrite( "urlsVec", &gezi::tieba::UrateInfo::urlsVec )
.def_readwrite( "userInfo", &gezi::tieba::UrateInfo::userInfo )
.def_readwrite( "userLikeForumInfo", &gezi::tieba::UrateInfo::userLikeForumInfo )
.def_readwrite( "userPostNumInForum", &gezi::tieba::UrateInfo::userPostNumInForum )
.def_readwrite( "userPostNumInfo", &gezi::tieba::UrateInfo::userPostNumInfo );

bp::class_< gezi::tieba::UrlInfo >( "UrlInfo" )
.def( bp::self == bp::self )
.def_readwrite( "content", &gezi::tieba::UrlInfo::content )
.def_readwrite( "isJump", &gezi::tieba::UrlInfo::isJump )
.def_readwrite( "jumRank", &gezi::tieba::UrlInfo::jumRank )
.def_readwrite( "rank", &gezi::tieba::UrlInfo::rank )
.def_readwrite( "url", &gezi::tieba::UrlInfo::url );

bp::class_< gezi::tieba::UserInfo >( "UserInfo" )
.def( bp::self == bp::self )
.def_readwrite( "birthYear", &gezi::tieba::UserInfo::birthYear )
.def_readwrite( "email", &gezi::tieba::UserInfo::email )
.def_readwrite( "followCount", &gezi::tieba::UserInfo::followCount )
.def_readwrite( "followedCount", &gezi::tieba::UserInfo::followedCount )
.def_readwrite( "isGroupOwner", &gezi::tieba::UserInfo::isGroupOwner )
.def_readwrite( "mobile", &gezi::tieba::UserInfo::mobile )
.def_readwrite( "regTime", &gezi::tieba::UserInfo::regTime )
.def_readwrite( "userDetail", &gezi::tieba::UserInfo::userDetail )
.def_readwrite( "userId", &gezi::tieba::UserInfo::userId )
.def_readwrite( "userName", &gezi::tieba::UserInfo::userName )
.def_readwrite( "userSex", &gezi::tieba::UserInfo::userSex )
.def_readwrite( "userStatus", &gezi::tieba::UserInfo::userStatus )
.def_readwrite( "userTag", &gezi::tieba::UserInfo::userTag )
.def_readwrite( "userType", &gezi::tieba::UserInfo::userType );

{ //::gezi::tieba::UserLikeForumInfo
typedef bp::class_< gezi::tieba::UserLikeForumInfo > UserLikeForumInfo_exposer_t;
UserLikeForumInfo_exposer_t UserLikeForumInfo_exposer = UserLikeForumInfo_exposer_t( "UserLikeForumInfo" );
bp::scope UserLikeForumInfo_scope( UserLikeForumInfo_exposer );
bp::class_< gezi::tieba::UserLikeForumInfo::Node >( "Node" )
.def( bp::self < bp::self )
.def( bp::self == bp::self )
.def_readwrite( "curScore", &gezi::tieba::UserLikeForumInfo::Node::curScore )
.def_readwrite( "forumName", &gezi::tieba::UserLikeForumInfo::Node::forumName )
.def_readwrite( "leftScore", &gezi::tieba::UserLikeForumInfo::Node::leftScore )
.def_readwrite( "level", &gezi::tieba::UserLikeForumInfo::Node::level )
.def_readwrite( "time", &gezi::tieba::UserLikeForumInfo::Node::time );
{ //::gezi::tieba::UserLikeForumInfo::GetLevel

typedef int ( ::gezi::tieba::UserLikeForumInfo::*GetLevel_function_type )( ::std::string ) ;

UserLikeForumInfo_exposer.def(
"GetLevel"
, GetLevel_function_type( &::gezi::tieba::UserLikeForumInfo::GetLevel )
, ( bp::arg("forumName") ) );

}
UserLikeForumInfo_exposer.def_readwrite( "forumNames", &gezi::tieba::UserLikeForumInfo::forumNames );
UserLikeForumInfo_exposer.def_readwrite( "infoMap", &gezi::tieba::UserLikeForumInfo::infoMap );
UserLikeForumInfo_exposer.def_readwrite( "levels", &gezi::tieba::UserLikeForumInfo::levels );
UserLikeForumInfo_exposer.def_readwrite( "maxLevel", &gezi::tieba::UserLikeForumInfo::maxLevel );
UserLikeForumInfo_exposer.def_readwrite( "numLikes", &gezi::tieba::UserLikeForumInfo::numLikes );
UserLikeForumInfo_exposer.def_readwrite( "sumLevels", &gezi::tieba::UserLikeForumInfo::sumLevels );
UserLikeForumInfo_exposer.def_readwrite( "userId", &gezi::tieba::UserLikeForumInfo::userId );
}

bp::class_< gezi::tieba::UserPostNumInfo >( "UserPostNumInfo" )
.def_readwrite( "numGoods", &gezi::tieba::UserPostNumInfo::numGoods )
.def_readwrite( "numPhotos", &gezi::tieba::UserPostNumInfo::numPhotos )
.def_readwrite( "numPosts", &gezi::tieba::UserPostNumInfo::numPosts )
.def_readwrite( "numThreads", &gezi::tieba::UserPostNumInfo::numThreads )
.def_readwrite( "userId", &gezi::tieba::UserPostNumInfo::userId );

bp::class_< gezi::tieba::UserPostsInfo >( "UserPostsInfo" )
.def(
"size"
, (::size_t ( ::gezi::tieba::UserPostsInfo::* )(  ) )( &::gezi::tieba::UserPostsInfo::size ) )
.def_readwrite( "contents", &gezi::tieba::UserPostsInfo::contents )
.def_readwrite( "fids", &gezi::tieba::UserPostsInfo::fids )
.def_readwrite( "fnames", &gezi::tieba::UserPostsInfo::fnames )
.def_readwrite( "hotValues", &gezi::tieba::UserPostsInfo::hotValues )
.def_readwrite( "ips", &gezi::tieba::UserPostsInfo::ips )
.def_readwrite( "isPostsDeleted", &gezi::tieba::UserPostsInfo::isPostsDeleted )
.def_readwrite( "isThreads", &gezi::tieba::UserPostsInfo::isThreads )
.def_readwrite( "level1Names", &gezi::tieba::UserPostsInfo::level1Names )
.def_readwrite( "level2Names", &gezi::tieba::UserPostsInfo::level2Names )
.def_readwrite( "numPosts", &gezi::tieba::UserPostsInfo::numPosts )
.def_readwrite( "pids", &gezi::tieba::UserPostsInfo::pids )
.def_readwrite( "ranks", &gezi::tieba::UserPostsInfo::ranks )
.def_readwrite( "tids", &gezi::tieba::UserPostsInfo::tids )
.def_readwrite( "times", &gezi::tieba::UserPostsInfo::times )
.def_readwrite( "titles", &gezi::tieba::UserPostsInfo::titles )
.def_readwrite( "userId", &gezi::tieba::UserPostsInfo::userId );

{ //::gezi::GetOutputFileName

typedef ::std::string ( *GetOutputFileName_function_type )( ::std::string,::std::string,bool );

bp::def(
"GetOutputFileName"
, GetOutputFileName_function_type( &::gezi::GetOutputFileName )
, ( bp::arg("infile"), bp::arg("suffix"), bp::arg("removeTxt")=(bool)(false) ) );

}

{ //::gezi::all_en

typedef bool ( *all_en_function_type )( ::std::string );

bp::def(
"all_en"
, all_en_function_type( &::gezi::all_en )
, ( bp::arg("phrase") ) );

}

{ //::gezi::arg

typedef ::std::string ( *arg_function_type )( ::std::string );

bp::def(
"arg"
, arg_function_type( &::gezi::arg )
, ( bp::arg("input") ) );

}

{ //::gezi::chi_square

typedef ::Float ( *chi_square_function_type )( int,int,int,::uint64 );

bp::def(
"chi_square"
, chi_square_function_type( &::gezi::chi_square )
, ( bp::arg("a"), bp::arg("n1"), bp::arg("n2"), bp::arg("total") ) );

}

{ //::gezi::conf_trim

typedef ::std::string ( *conf_trim_function_type )( ::std::string );

bp::def(
"conf_trim"
, conf_trim_function_type( &::gezi::conf_trim )
, ( bp::arg("input") ) );

}

{ //::gezi::contains

typedef bool ( *contains_function_type )( ::std::string,::std::string );

bp::def(
"contains"
, contains_function_type( &::gezi::contains )
, ( bp::arg("input"), bp::arg("part") ) );

}

{ //::gezi::contains

typedef bool ( *contains_function_type )( ::std::string,char );

bp::def(
"contains"
, contains_function_type( &::gezi::contains )
, ( bp::arg("input"), bp::arg("part") ) );

}

{ //::gezi::contains_any

typedef bool ( *contains_any_function_type )( ::std::string,::std::string );

bp::def(
"contains_any"
, contains_any_function_type( &::gezi::contains_any )
, ( bp::arg("src"), bp::arg("type") ) );

}

{ //::gezi::contains_at

typedef bool ( *contains_at_function_type )( ::std::string );

bp::def(
"contains_at"
, contains_at_function_type( &::gezi::contains_at )
, ( bp::arg("src") ) );

}

{ //::gezi::contains_emails

typedef bool ( *contains_emails_function_type )( ::std::string );

bp::def(
"contains_emails"
, contains_emails_function_type( &::gezi::contains_emails )
, ( bp::arg("src") ) );

}

{ //::gezi::contains_num

typedef bool ( *contains_num_function_type )( ::std::string );

bp::def(
"contains_num"
, contains_num_function_type( &::gezi::contains_num )
, ( bp::arg("src") ) );

}

{ //::gezi::contains_pic

typedef bool ( *contains_pic_function_type )( ::std::string );

bp::def(
"contains_pic"
, contains_pic_function_type( &::gezi::contains_pic )
, ( bp::arg("src") ) );

}

{ //::gezi::contains_url

typedef bool ( *contains_url_function_type )( ::std::string );

bp::def(
"contains_url"
, contains_url_function_type( &::gezi::contains_url )
, ( bp::arg("src") ) );

}

{ //::gezi::contains_video

typedef bool ( *contains_video_function_type )( ::std::string );

bp::def(
"contains_video"
, contains_video_function_type( &::gezi::contains_video )
, ( bp::arg("src") ) );

}

{ //::gezi::copy_file

typedef void ( *copy_file_function_type )( ::std::string,::std::string );

bp::def(
"copy_file"
, copy_file_function_type( &::gezi::copy_file )
, ( bp::arg("src"), bp::arg("dest") ) );

}

{ //::gezi::cross_entropy

typedef ::Float ( *cross_entropy_function_type )( int,int,int,::uint64 );

bp::def(
"cross_entropy"
, cross_entropy_function_type( &::gezi::cross_entropy )
, ( bp::arg("nfc"), bp::arg("nf"), bp::arg("nc"), bp::arg("n") ) );

}

{ //::gezi::endswith

typedef bool ( *endswith_function_type )( ::std::string,::std::string );

bp::def(
"endswith"
, endswith_function_type( &::gezi::endswith )
, ( bp::arg("input"), bp::arg("part") ) );

}

{ //::gezi::erase

typedef ::std::string ( *erase_function_type )( ::std::string,::std::string );

bp::def(
"erase"
, erase_function_type( &::gezi::erase )
, ( bp::arg("content"), bp::arg("chars") ) );

}

{ //::gezi::erase_chars

typedef ::std::string ( *erase_chars_function_type )( ::std::string,::std::string );

bp::def(
"erase_chars"
, erase_chars_function_type( &::gezi::erase_chars )
, ( bp::arg("content"), bp::arg("chars") ) );

}

{ //::gezi::erase_from

typedef ::std::string ( *erase_from_function_type )( ::std::string,::std::string );

bp::def(
"erase_from"
, erase_from_function_type( &::gezi::erase_from )
, ( bp::arg("content"), bp::arg("part") ) );

}

{ //::gezi::extract_chinese

typedef ::std::string ( *extract_chinese_function_type )( ::std::string );

bp::def(
"extract_chinese"
, extract_chinese_function_type( &::gezi::extract_chinese )
, ( bp::arg("temp") ) );

}

{ //::gezi::extract_gbk_dual

typedef ::std::string ( *extract_gbk_dual_function_type )( ::std::string );

bp::def(
"extract_gbk_dual"
, extract_gbk_dual_function_type( &::gezi::extract_gbk_dual )
, ( bp::arg("temp") ) );

}

{ //::gezi::extract_suspect_symb

typedef ::std::string ( *extract_suspect_symb_function_type )( ::std::string );

bp::def(
"extract_suspect_symb"
, extract_suspect_symb_function_type( &::gezi::extract_suspect_symb )
, ( bp::arg("temp") ) );

}

{ //::gezi::filter_str

typedef ::std::string ( *filter_str_function_type )( ::std::string );

bp::def(
"filter_str"
, filter_str_function_type( &::gezi::filter_str )
, ( bp::arg("temp") ) );

}

{ //::gezi::first

typedef ::std::string ( *first_function_type )( ::std::string,int );

bp::def(
"first"
, first_function_type( &::gezi::first )
, ( bp::arg("input"), bp::arg("length") ) );

}

{ //::gezi::gbk_substr

typedef ::std::string ( *gbk_substr_function_type )( ::std::string,int,::size_t );

bp::def(
"gbk_substr"
, gbk_substr_function_type( &::gezi::gbk_substr )
, ( bp::arg("input"), bp::arg("start_"), bp::arg("len")=(long unsigned int)(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) ) );

}

{ //::gezi::get_address

typedef ::std::string ( *get_address_function_type )( ::gezi::IpFinder &,::uint64 );

bp::def(
"get_address"
, get_address_function_type( &::gezi::get_address )
, ( bp::arg("ipFinder"), bp::arg("ipl") ) );

}

{ //::gezi::get_ats

typedef ::std::vector< std::string > ( *get_ats_function_type )( ::std::string );

bp::def(
"get_ats"
, get_ats_function_type( &::gezi::get_ats )
, ( bp::arg("src") ) );

}

{ //::gezi::tieba::get_delete_info

typedef ::gezi::tieba::DeleteInfo ( *get_delete_info_function_type )( ::uint64,::std::string );

bp::def(
"get_delete_info"
, get_delete_info_function_type( &::gezi::tieba::get_delete_info )
, ( bp::arg("id"), bp::arg("type") ) );

}

{ //::gezi::tieba::get_delete_info_str

typedef ::std::string ( *get_delete_info_str_function_type )( ::std::string );

bp::def(
"get_delete_info_str"
, get_delete_info_str_function_type( &::gezi::tieba::get_delete_info_str )
, ( bp::arg("pids") ) );

}

{ //::gezi::tieba::get_deleted_posts

typedef ::std::set< long long unsigned int > ( *get_deleted_posts_function_type )( ::std::vector< unsigned long long > const &,bool );

bp::def(
"get_deleted_posts"
, get_deleted_posts_function_type( &::gezi::tieba::get_deleted_posts )
, ( bp::arg("pids"), bp::arg("allowError")=(bool)(true) ) );

}

{ //::gezi::tieba::get_deleted_threads

typedef ::std::set< long long unsigned int > ( *get_deleted_threads_function_type )( ::std::vector< unsigned long long > const &,bool );

bp::def(
"get_deleted_threads"
, get_deleted_threads_function_type( &::gezi::tieba::get_deleted_threads )
, ( bp::arg("tids"), bp::arg("allowError")=(bool)(true) ) );

}

{ //::gezi::tieba::get_deletes_info

typedef ::std::map< long long unsigned int, gezi::tieba::DeleteInfo > ( *get_deletes_info_function_type )( ::std::vector< unsigned long long > const &,::std::string,bool );

bp::def(
"get_deletes_info"
, get_deletes_info_function_type( &::gezi::tieba::get_deletes_info )
, ( bp::arg("ids_"), bp::arg("type"), bp::arg("allowError")=(bool)(true) ) );

}

{ //::gezi::get_emails

typedef ::std::vector< std::string > ( *get_emails_function_type )( ::std::string );

bp::def(
"get_emails"
, get_emails_function_type( &::gezi::get_emails )
, ( bp::arg("src") ) );

}

{ //::gezi::tieba::get_extended_post_info

typedef ::gezi::tieba::ExtendedPostInfo ( *get_extended_post_info_function_type )( ::uint64 );

bp::def(
"get_extended_post_info"
, get_extended_post_info_function_type( &::gezi::tieba::get_extended_post_info )
, ( bp::arg("pid") ) );

}

{ //::gezi::tieba::get_field_method

typedef void ( *get_field_method_function_type )( ::std::string,::std::string &,::std::string & );

bp::def(
"get_field_method"
, get_field_method_function_type( &::gezi::tieba::get_field_method )
, ( bp::arg("url"), bp::arg("field"), bp::arg("method") ) );

}

{ //::gezi::tieba::get_forum_id

typedef ::uint ( *get_forum_id_function_type )( ::std::string );

bp::def(
"get_forum_id"
, get_forum_id_function_type( &::gezi::tieba::get_forum_id )
, ( bp::arg("forumName") ) );

}

{ //::gezi::tieba::get_forum_id_str

typedef ::std::string ( *get_forum_id_str_function_type )( ::std::string );

bp::def(
"get_forum_id_str"
, get_forum_id_str_function_type( &::gezi::tieba::get_forum_id_str )
, ( bp::arg("forumNames") ) );

}

{ //::gezi::tieba::get_forum_ids

typedef ::std::vector< unsigned int > ( *get_forum_ids_function_type )( ::svec const &,bool );

bp::def(
"get_forum_ids"
, get_forum_ids_function_type( &::gezi::tieba::get_forum_ids )
, ( bp::arg("forumNames_"), bp::arg("allowError")=(bool)(true) ) );

}

{ //::gezi::tieba::get_forum_ids_map

typedef ::std::map< std::string, unsigned int > ( *get_forum_ids_map_function_type )( ::svec const & );

bp::def(
"get_forum_ids_map"
, get_forum_ids_map_function_type( &::gezi::tieba::get_forum_ids_map )
, ( bp::arg("forumNames_") ) );

}

{ //::gezi::tieba::get_forum_info

typedef ::gezi::tieba::ForumInfo ( *get_forum_info_function_type )( ::std::string );

bp::def(
"get_forum_info"
, get_forum_info_function_type( &::gezi::tieba::get_forum_info )
, ( bp::arg("forumName") ) );

}

{ //::gezi::tieba::get_forum_info

typedef ::gezi::tieba::ForumInfo ( *get_forum_info_function_type )( ::uint );

bp::def(
"get_forum_info"
, get_forum_info_function_type( &::gezi::tieba::get_forum_info )
, ( bp::arg("forumId") ) );

}

{ //::gezi::tieba::get_forum_info_str

typedef ::std::string ( *get_forum_info_str_function_type )( ::uint );

bp::def(
"get_forum_info_str"
, get_forum_info_str_function_type( &::gezi::tieba::get_forum_info_str )
, ( bp::arg("forumId") ) );

}

{ //::gezi::tieba::get_forum_info_str

typedef ::std::string ( *get_forum_info_str_function_type )( ::std::string );

bp::def(
"get_forum_info_str"
, get_forum_info_str_function_type( &::gezi::tieba::get_forum_info_str )
, ( bp::arg("params") ) );

}

{ //::gezi::tieba::get_forum_name

typedef ::std::string ( *get_forum_name_function_type )( ::uint );

bp::def(
"get_forum_name"
, get_forum_name_function_type( &::gezi::tieba::get_forum_name )
, ( bp::arg("forumId") ) );

}

{ //::gezi::tieba::get_forum_name_str

typedef ::std::string ( *get_forum_name_str_function_type )( ::std::vector< unsigned int > const & );

bp::def(
"get_forum_name_str"
, get_forum_name_str_function_type( &::gezi::tieba::get_forum_name_str )
, ( bp::arg("forumIds") ) );

}

{ //::gezi::tieba::get_forum_name_str

typedef ::std::string ( *get_forum_name_str_function_type )( ::uint );

bp::def(
"get_forum_name_str"
, get_forum_name_str_function_type( &::gezi::tieba::get_forum_name_str )
, ( bp::arg("forumId") ) );

}

{ //::gezi::tieba::get_forum_name_str

typedef ::std::string ( *get_forum_name_str_function_type )( ::std::string );

bp::def(
"get_forum_name_str"
, get_forum_name_str_function_type( &::gezi::tieba::get_forum_name_str )
, ( bp::arg("params") ) );

}

{ //::gezi::tieba::get_forum_names

typedef ::std::vector< std::string > ( *get_forum_names_function_type )( ::std::vector< unsigned int > const & );

bp::def(
"get_forum_names"
, get_forum_names_function_type( &::gezi::tieba::get_forum_names )
, ( bp::arg("forumIds") ) );

}

{ //::gezi::tieba::get_forum_names_map

typedef ::std::map< unsigned int, std::string > ( *get_forum_names_map_function_type )( ::std::vector< unsigned int > const & );

bp::def(
"get_forum_names_map"
, get_forum_names_map_function_type( &::gezi::tieba::get_forum_names_map )
, ( bp::arg("forumIds_") ) );

}

{ //::gezi::tieba::get_forums_info

typedef ::std::vector< gezi::tieba::ForumInfo > ( *get_forums_info_function_type )( ::std::vector< unsigned int >,bool );

bp::def(
"get_forums_info"
, get_forums_info_function_type( &::gezi::tieba::get_forums_info )
, ( bp::arg("forumIds_"), bp::arg("allowError")=(bool)(true) ) );

}

{ //::gezi::tieba::get_forums_info_map

typedef ::std::map< unsigned int, gezi::tieba::ForumInfo > ( *get_forums_info_map_function_type )( ::std::vector< unsigned int > );

bp::def(
"get_forums_info_map"
, get_forums_info_map_function_type( &::gezi::tieba::get_forums_info_map )
, ( bp::arg("forumIds_") ) );

}

{ //::gezi::tieba::get_forums_info_str

typedef ::std::string ( *get_forums_info_str_function_type )( ::std::vector< unsigned int > const & );

bp::def(
"get_forums_info_str"
, get_forums_info_str_function_type( &::gezi::tieba::get_forums_info_str )
, ( bp::arg("forumIds") ) );

}

{ //::gezi::tieba::get_full_posts_info

typedef ::gezi::tieba::FullPostsInfo ( *get_full_posts_info_function_type )( ::uint64,int,int,int,::uint64 );

bp::def(
"get_full_posts_info"
, get_full_posts_info_function_type( &::gezi::tieba::get_full_posts_info )
, ( bp::arg("threadId"), bp::arg("resNum")=(int)(100), bp::arg("offset")=(int)(0), bp::arg("hasComment")=(int)(0), bp::arg("postId")=(long long unsigned int)(0) ) );

}

{ //::gezi::tieba::get_full_posts_info_str

typedef ::std::string ( *get_full_posts_info_str_function_type )( ::uint64,int,int,int,::uint64 );

bp::def(
"get_full_posts_info_str"
, get_full_posts_info_str_function_type( &::gezi::tieba::get_full_posts_info_str )
, ( bp::arg("threadId"), bp::arg("resNum")=(int)(100), bp::arg("offset")=(int)(0), bp::arg("hasComment")=(int)(0), bp::arg("postId")=(long long unsigned int)(0) ) );

}

{ //::gezi::tieba::get_full_urate_info

typedef ::gezi::tieba::UrateInfo ( *get_full_urate_info_function_type )( ::uint64,int,bool );

bp::def(
"get_full_urate_info"
, get_full_urate_info_function_type( &::gezi::tieba::get_full_urate_info )
, ( bp::arg("pid"), bp::arg("historyNum")=(int)(25), bp::arg("needUrl")=(bool)(true) ) );

}

{ //::gezi::tieba::get_img_info

typedef ::gezi::tieba::ImgInfo ( *get_img_info_function_type )( ::uint64,::int64 );

bp::def(
"get_img_info"
, get_img_info_function_type( &::gezi::tieba::get_img_info )
, ( bp::arg("pid"), bp::arg("createTime") ) );

}

{ //::gezi::tieba::get_img_info_str

typedef ::std::string ( *get_img_info_str_function_type )( ::uint64,::int64 );

bp::def(
"get_img_info_str"
, get_img_info_str_function_type( &::gezi::tieba::get_img_info_str )
, ( bp::arg("pid"), bp::arg("createTime") ) );

}

{ //::gezi::tieba::get_info_str

typedef ::std::string ( *get_info_str_function_type )( ::std::string,int );

bp::def(
"get_info_str"
, get_info_str_function_type( &::gezi::tieba::get_info_str )
, ( bp::arg("url"), bp::arg("timeout")=(int)(-0x00000000000000001) ) );

}

{ //::gezi::get_ipgroups

typedef void ( *get_ipgroups_function_type )( ::uint64,::uint64 &,::uint64 &,::uint64 & );

bp::def(
"get_ipgroups"
, get_ipgroups_function_type( &::gezi::get_ipgroups )
, ( bp::arg("ipl"), bp::arg("top3"), bp::arg("top2"), bp::arg("top1") ) );

}

{ //::gezi::get_location

typedef ::std::string ( *get_location_function_type )( ::gezi::IpFinder &,::uint64 );

bp::def(
"get_location"
, get_location_function_type( &::gezi::get_location )
, ( bp::arg("ipFinder"), bp::arg("ipl") ) );

}

{ //::gezi::get_nums

typedef ::std::vector< std::string > ( *get_nums_function_type )( ::std::string );

bp::def(
"get_nums"
, get_nums_function_type( &::gezi::get_nums )
, ( bp::arg("src") ) );

}

{ //::gezi::get_pics

typedef ::std::vector< std::string > ( *get_pics_function_type )( ::std::string );

bp::def(
"get_pics"
, get_pics_function_type( &::gezi::get_pics )
, ( bp::arg("src") ) );

}

{ //::gezi::tieba::get_post_delete_info

typedef ::gezi::tieba::DeleteInfo ( *get_post_delete_info_function_type )( ::uint64 );

bp::def(
"get_post_delete_info"
, get_post_delete_info_function_type( &::gezi::tieba::get_post_delete_info )
, ( bp::arg("pid") ) );

}

{ //::gezi::tieba::get_post_deleted_info

typedef bool ( *get_post_deleted_info_function_type )( ::uint64,::uint64,bool &,bool & );

bp::def(
"get_post_deleted_info"
, get_post_deleted_info_function_type( &::gezi::tieba::get_post_deleted_info )
, ( bp::arg("pid"), bp::arg("tid"), bp::arg("isPostDeleted"), bp::arg("isThreadDeleted") ) );

}

{ //::gezi::tieba::get_post_info

typedef ::gezi::tieba::PostInfo ( *get_post_info_function_type )( ::uint64 );

bp::def(
"get_post_info"
, get_post_info_function_type( &::gezi::tieba::get_post_info )
, ( bp::arg("pid") ) );

}

{ //::gezi::tieba::get_post_info

typedef bool ( *get_post_info_function_type )( ::uint64,::std::string &,::std::string & );

bp::def(
"get_post_info"
, get_post_info_function_type( &::gezi::tieba::get_post_info )
, ( bp::arg("pid"), bp::arg("title"), bp::arg("content") ) );

}

{ //::gezi::tieba::get_post_info_str

typedef ::std::string ( *get_post_info_str_function_type )( ::svec const & );

bp::def(
"get_post_info_str"
, get_post_info_str_function_type( &::gezi::tieba::get_post_info_str )
, ( bp::arg("pids") ) );

}

{ //::gezi::tieba::get_post_info_str

typedef ::std::string ( *get_post_info_str_function_type )( ::uint64 );

bp::def(
"get_post_info_str"
, get_post_info_str_function_type( &::gezi::tieba::get_post_info_str )
, ( bp::arg("pid") ) );

}

{ //::gezi::tieba::get_posts_delete_info

typedef int ( *get_posts_delete_info_function_type )( ::std::vector< unsigned long long > const &,::std::vector< unsigned long long > const &,int );

bp::def(
"get_posts_delete_info"
, get_posts_delete_info_function_type( &::gezi::tieba::get_posts_delete_info )
, ( bp::arg("pids"), bp::arg("tids"), bp::arg("maxCount")=(int)(50) ) );

}

{ //::gezi::tieba::get_posts_delete_info

typedef ::std::map< long long unsigned int, gezi::tieba::DeleteInfo > ( *get_posts_delete_info_function_type )( ::std::vector< unsigned long long > const &,bool );

bp::def(
"get_posts_delete_info"
, get_posts_delete_info_function_type( &::gezi::tieba::get_posts_delete_info )
, ( bp::arg("pids"), bp::arg("allowError")=(bool)(true) ) );

}

{ //::gezi::tieba::get_posts_info

typedef ::std::vector< gezi::tieba::PostInfo > ( *get_posts_info_function_type )( ::std::vector< unsigned long long > const &,bool );

bp::def(
"get_posts_info"
, get_posts_info_function_type( &::gezi::tieba::get_posts_info )
, ( bp::arg("pids_"), bp::arg("allowError")=(bool)(true) ) );

}

{ //::gezi::tieba::get_posts_info_map

typedef ::std::map< long long unsigned int, gezi::tieba::PostInfo > ( *get_posts_info_map_function_type )( ::std::vector< unsigned long long > const & );

bp::def(
"get_posts_info_map"
, get_posts_info_map_function_type( &::gezi::tieba::get_posts_info_map )
, ( bp::arg("pids_") ) );

}

{ //::gezi::tieba::get_posts_info_str

typedef ::std::string ( *get_posts_info_str_function_type )( ::std::vector< long long unsigned int > const & );

bp::def(
"get_posts_info_str"
, get_posts_info_str_function_type( &::gezi::tieba::get_posts_info_str )
, ( bp::arg("pids") ) );

}

{ //::gezi::tieba::get_posts_info_str

typedef ::std::string ( *get_posts_info_str_function_type )( ::svec const & );

bp::def(
"get_posts_info_str"
, get_posts_info_str_function_type( &::gezi::tieba::get_posts_info_str )
, ( bp::arg("pids") ) );

}

{ //::gezi::tieba::get_posts_info_str

typedef ::std::string ( *get_posts_info_str_function_type )( ::std::string );

bp::def(
"get_posts_info_str"
, get_posts_info_str_function_type( &::gezi::tieba::get_posts_info_str )
, ( bp::arg("pids") ) );

}

{ //::gezi::tieba::get_posts_info_str

typedef ::std::string ( *get_posts_info_str_function_type )( ::std::vector< unsigned long long > const & );

bp::def(
"get_posts_info_str"
, get_posts_info_str_function_type( &::gezi::tieba::get_posts_info_str )
, ( bp::arg("pids") ) );

}

{ //::gezi::tieba::get_real_title

typedef ::std::string ( *get_real_title_function_type )( ::std::string );

bp::def(
"get_real_title"
, get_real_title_function_type( &::gezi::tieba::get_real_title )
, ( bp::arg("title") ) );

}

{ //::gezi::get_skip_bigram

typedef void ( *get_skip_bigram_function_type )( ::svec const &,::svec &,int,::std::string );

bp::def(
"get_skip_bigram"
, get_skip_bigram_function_type( &::gezi::get_skip_bigram )
, ( bp::arg("l"), bp::arg("li"), bp::arg("n"), bp::arg("sep")="$#$" ) );

}

{ //::gezi::get_skipn_bigram

typedef void ( *get_skipn_bigram_function_type )( ::svec const &,::svec &,int,::std::string );

bp::def(
"get_skipn_bigram"
, get_skipn_bigram_function_type( &::gezi::get_skipn_bigram )
, ( bp::arg("l"), bp::arg("li"), bp::arg("n"), bp::arg("sep")="$#$" ) );

}

{ //::gezi::tieba::get_thread_delete_info

typedef ::gezi::tieba::DeleteInfo ( *get_thread_delete_info_function_type )( ::uint64 );

bp::def(
"get_thread_delete_info"
, get_thread_delete_info_function_type( &::gezi::tieba::get_thread_delete_info )
, ( bp::arg("tid") ) );

}

{ //::gezi::tieba::get_thread_info

typedef ::gezi::tieba::ThreadInfo ( *get_thread_info_function_type )( ::uint64,bool,bool );

bp::def(
"get_thread_info"
, get_thread_info_function_type( &::gezi::tieba::get_thread_info )
, ( bp::arg("threadId"), bp::arg("need_abstract")=(bool)(true), bp::arg("allowError")=(bool)(true) ) );

}

{ //::gezi::tieba::get_thread_info_str

typedef ::std::string ( *get_thread_info_str_function_type )( ::uint64,bool );

bp::def(
"get_thread_info_str"
, get_thread_info_str_function_type( &::gezi::tieba::get_thread_info_str )
, ( bp::arg("tid"), bp::arg("need_abstract")=(bool)(true) ) );

}

{ //::gezi::tieba::get_threads_delete_info

typedef ::std::map< long long unsigned int, gezi::tieba::DeleteInfo > ( *get_threads_delete_info_function_type )( ::std::vector< unsigned long long > const &,bool );

bp::def(
"get_threads_delete_info"
, get_threads_delete_info_function_type( &::gezi::tieba::get_threads_delete_info )
, ( bp::arg("tids"), bp::arg("allowError")=(bool)(true) ) );

}

{ //::gezi::tieba::get_threads_info

typedef ::std::vector< gezi::tieba::ThreadInfo > ( *get_threads_info_function_type )( ::std::vector< unsigned long long > const &,bool,bool );

bp::def(
"get_threads_info"
, get_threads_info_function_type( &::gezi::tieba::get_threads_info )
, ( bp::arg("tidVec"), bp::arg("need_abstract")=(bool)(true), bp::arg("allowError")=(bool)(true) ) );

}

{ //::gezi::tieba::get_threads_info

typedef ::std::vector< gezi::tieba::ThreadInfo > ( *get_threads_info_function_type )( ::svec const &,bool,bool );

bp::def(
"get_threads_info"
, get_threads_info_function_type( &::gezi::tieba::get_threads_info )
, ( bp::arg("tidVec"), bp::arg("need_abstract")=(bool)(true), bp::arg("allowError")=(bool)(true) ) );

}

{ //::gezi::tieba::get_threads_info_map

typedef ::std::map< long long unsigned int, gezi::tieba::ThreadInfo > ( *get_threads_info_map_function_type )( ::std::vector< unsigned long long > const &,bool );

bp::def(
"get_threads_info_map"
, get_threads_info_map_function_type( &::gezi::tieba::get_threads_info_map )
, ( bp::arg("tidVec"), bp::arg("need_abstract")=(bool)(true) ) );

}

{ //::gezi::tieba::get_threads_info_str

typedef ::std::string ( *get_threads_info_str_function_type )( ::std::vector< long long unsigned int > const &,bool );

bp::def(
"get_threads_info_str"
, get_threads_info_str_function_type( &::gezi::tieba::get_threads_info_str )
, ( bp::arg("tids"), bp::arg("need_abstract")=(bool)(true) ) );

}

{ //::gezi::tieba::get_threads_info_str

typedef ::std::string ( *get_threads_info_str_function_type )( ::svec const &,bool );

bp::def(
"get_threads_info_str"
, get_threads_info_str_function_type( &::gezi::tieba::get_threads_info_str )
, ( bp::arg("tids"), bp::arg("need_abstract")=(bool)(true) ) );

}

{ //::gezi::tieba::get_threads_info_str

typedef ::std::string ( *get_threads_info_str_function_type )( ::std::string,bool );

bp::def(
"get_threads_info_str"
, get_threads_info_str_function_type( &::gezi::tieba::get_threads_info_str )
, ( bp::arg("tids_"), bp::arg("need_abstract")=(bool)(true) ) );

}

{ //::gezi::tieba::get_threads_info_str

typedef ::std::string ( *get_threads_info_str_function_type )( ::std::vector< unsigned long long > const &,bool );

bp::def(
"get_threads_info_str"
, get_threads_info_str_function_type( &::gezi::tieba::get_threads_info_str )
, ( bp::arg("tids"), bp::arg("need_abstract")=(bool)(true) ) );

}

{ //::gezi::get_topn_ipgroup

typedef ::uint64 ( *get_topn_ipgroup_function_type )( ::uint64,int );

bp::def(
"get_topn_ipgroup"
, get_topn_ipgroup_function_type( &::gezi::get_topn_ipgroup )
, ( bp::arg("ipl"), bp::arg("n") ) );

}

{ //::gezi::tieba::get_urate_info

typedef ::gezi::tieba::UrateInfo ( *get_urate_info_function_type )( ::uint64,bool,int,bool );

bp::def(
"get_urate_info"
, get_urate_info_function_type( &::gezi::tieba::get_urate_info )
, ( bp::arg("pid"), bp::arg("needHistory")=(bool)(true), bp::arg("historyNum")=(int)(25), bp::arg("needUrlInfo")=(bool)(true) ) );

}

{ //::gezi::tieba::get_urate_info_from_uid

typedef ::gezi::tieba::UrateInfo ( *get_urate_info_from_uid_function_type )( ::uint64 );

bp::def(
"get_urate_info_from_uid"
, get_urate_info_from_uid_function_type( &::gezi::tieba::get_urate_info_from_uid )
, ( bp::arg("uid") ) );

}

{ //::gezi::tieba::get_urate_info_from_uid

typedef void ( *get_urate_info_from_uid_function_type )( ::uint64,::gezi::tieba::UrateInfo & );

bp::def(
"get_urate_info_from_uid"
, get_urate_info_from_uid_function_type( &::gezi::tieba::get_urate_info_from_uid )
, ( bp::arg("uid"), bp::arg("urateInfo") ) );

}

{ //::gezi::tieba::get_url_info

typedef ::gezi::tieba::UrlInfo ( *get_url_info_function_type )( ::std::string );

bp::def(
"get_url_info"
, get_url_info_function_type( &::gezi::tieba::get_url_info )
, ( bp::arg("url") ) );

}

{ //::gezi::tieba::get_url_info_params_

typedef ::std::string ( *get_url_info_params__function_type )( ::std::vector< std::string > const & );

bp::def(
"get_url_info_params_"
, get_url_info_params__function_type( &::gezi::tieba::get_url_info_params_ )
, ( bp::arg("urls") ) );

}

{ //::gezi::get_urls

typedef ::std::vector< std::string > ( *get_urls_function_type )( ::std::string );

bp::def(
"get_urls"
, get_urls_function_type( &::gezi::get_urls )
, ( bp::arg("src") ) );

}

{ //::gezi::tieba::get_urls_info

typedef ::std::vector< gezi::tieba::UrlInfo > ( *get_urls_info_function_type )( ::std::vector< std::string > const & );

bp::def(
"get_urls_info"
, get_urls_info_function_type( &::gezi::tieba::get_urls_info )
, ( bp::arg("urls") ) );

}

{ //::gezi::tieba::get_urls_info_map

typedef ::std::map< std::string, gezi::tieba::UrlInfo > ( *get_urls_info_map_function_type )( ::std::vector< std::string > const & );

bp::def(
"get_urls_info_map"
, get_urls_info_map_function_type( &::gezi::tieba::get_urls_info_map )
, ( bp::arg("urls") ) );

}

{ //::gezi::tieba::get_user_fans

typedef bool ( *get_user_fans_function_type )( ::uint64,int &,int & );

bp::def(
"get_user_fans"
, get_user_fans_function_type( &::gezi::tieba::get_user_fans )
, ( bp::arg("uid"), bp::arg("follow_count"), bp::arg("followed_count") ) );

}

{ //::gezi::tieba::get_user_fans

typedef bool ( *get_user_fans_function_type )( ::uint64,::AnyMap & );

bp::def(
"get_user_fans"
, get_user_fans_function_type( &::gezi::tieba::get_user_fans )
, ( bp::arg("uid"), bp::arg("result") ) );

}

{ //::gezi::tieba::get_user_fans

typedef ::std::string ( *get_user_fans_function_type )( ::uint64 );

bp::def(
"get_user_fans"
, get_user_fans_function_type( &::gezi::tieba::get_user_fans )
, ( bp::arg("uid") ) );

}

{ //::gezi::tieba::get_user_info

typedef ::gezi::tieba::UserInfo ( *get_user_info_function_type )( ::uint,bool,bool );

bp::def(
"get_user_info"
, get_user_info_function_type( &::gezi::tieba::get_user_info )
, ( bp::arg("uid"), bp::arg("needFollowInfo")=(bool)(true), bp::arg("needPassInfo")=(bool)(true) ) );

}

{ //::gezi::tieba::get_user_like_forum_info

typedef ::gezi::tieba::UserLikeForumInfo ( *get_user_like_forum_info_function_type )( ::uint );

bp::def(
"get_user_like_forum_info"
, get_user_like_forum_info_function_type( &::gezi::tieba::get_user_like_forum_info )
, ( bp::arg("uid") ) );

}

{ //::gezi::tieba::get_user_post_num_info

typedef ::gezi::tieba::UserPostNumInfo ( *get_user_post_num_info_function_type )( ::uint,::uint );

bp::def(
"get_user_post_num_info"
, get_user_post_num_info_function_type( &::gezi::tieba::get_user_post_num_info )
, ( bp::arg("uid"), bp::arg("forumId") ) );

}

{ //::gezi::tieba::get_user_post_num_info

typedef ::gezi::tieba::UserPostNumInfo ( *get_user_post_num_info_function_type )( ::uint );

bp::def(
"get_user_post_num_info"
, get_user_post_num_info_function_type( &::gezi::tieba::get_user_post_num_info )
, ( bp::arg("uid") ) );

}

{ //::gezi::tieba::get_user_post_num_info_

typedef ::gezi::tieba::UserPostNumInfo ( *get_user_post_num_info__function_type )( ::std::string );

bp::def(
"get_user_post_num_info_"
, get_user_post_num_info__function_type( &::gezi::tieba::get_user_post_num_info_ )
, ( bp::arg("url") ) );

}

{ //::gezi::tieba::get_user_posts_info

typedef ::gezi::tieba::UserPostsInfo ( *get_user_posts_info_function_type )( ::uint,int,bool,::uint64,int,int );

bp::def(
"get_user_posts_info"
, get_user_posts_info_function_type( &::gezi::tieba::get_user_posts_info )
, ( bp::arg("uid"), bp::arg("resNum")=(int)(25), bp::arg("needContent")=(bool)(true), bp::arg("endTime")=(long long unsigned int)(0), bp::arg("orderType")=(int)(1), bp::arg("offset")=(int)(0) ) );

}

{ //::gezi::tieba::get_user_posts_info_until

typedef ::gezi::tieba::UserPostsInfo ( *get_user_posts_info_until_function_type )( ::uint64,int,bool,int,int );

bp::def(
"get_user_posts_info_until"
, get_user_posts_info_until_function_type( &::gezi::tieba::get_user_posts_info_until )
, ( bp::arg("pid"), bp::arg("resNum")=(int)(25), bp::arg("needContent")=(bool)(true), bp::arg("orderType")=(int)(1), bp::arg("offset")=(int)(0) ) );

}

{ //::gezi::tieba::get_user_posts_info_until

typedef ::gezi::tieba::UserPostsInfo ( *get_user_posts_info_until_function_type )( ::gezi::tieba::PostInfo const &,int,bool,int,int );

bp::def(
"get_user_posts_info_until"
, get_user_posts_info_until_function_type( &::gezi::tieba::get_user_posts_info_until )
, ( bp::arg("info"), bp::arg("resNum")=(int)(25), bp::arg("needContent")=(bool)(true), bp::arg("orderType")=(int)(1), bp::arg("offset")=(int)(0) ) );

}

{ //::gezi::tieba::get_users_info

typedef ::std::vector< gezi::tieba::UserInfo > ( *get_users_info_function_type )( ::std::vector< unsigned int > const,bool,bool );

bp::def(
"get_users_info"
, get_users_info_function_type( &::gezi::tieba::get_users_info )
, ( bp::arg("uids_"), bp::arg("needFollowInfo")=(bool)(true), bp::arg("needPassInfo")=(bool)(true) ) );

}

{ //::gezi::tieba::get_users_info_map

typedef ::std::map< unsigned int, gezi::tieba::UserInfo > ( *get_users_info_map_function_type )( ::std::vector< unsigned int > const,bool,bool );

bp::def(
"get_users_info_map"
, get_users_info_map_function_type( &::gezi::tieba::get_users_info_map )
, ( bp::arg("uids_"), bp::arg("needFollowInfo")=(bool)(true), bp::arg("needPassInfo")=(bool)(true) ) );

}

{ //::gezi::get_val

typedef void ( *get_val_function_type )( ::comcfg::Configure const &,char *,::std::string,::std::string,::std::string );

bp::def(
"get_val"
, get_val_function_type( &::gezi::get_val )
, ( bp::arg("conf"), bp::arg("dest"), bp::arg("field"), bp::arg("key"), bp::arg("default_val") ) );

}

{ //::gezi::get_val

typedef void ( *get_val_function_type )( ::comcfg::Configure const &,char *,::std::string,::std::string );

bp::def(
"get_val"
, get_val_function_type( &::gezi::get_val )
, ( bp::arg("conf"), bp::arg("dest"), bp::arg("key"), bp::arg("default_val") ) );

}

{ //::gezi::get_val

typedef double ( *get_val_function_type )( ::comcfg::Configure const &,::std::string,::std::string,double );

bp::def(
"get_val"
, get_val_function_type( &::gezi::get_val )
, ( bp::arg("conf"), bp::arg("field"), bp::arg("key"), bp::arg("default_val") ) );

}

{ //::gezi::get_val

typedef double ( *get_val_function_type )( ::comcfg::Configure const &,::std::string,double );

bp::def(
"get_val"
, get_val_function_type( &::gezi::get_val )
, ( bp::arg("conf"), bp::arg("key"), bp::arg("default_val") ) );

}

{ //::gezi::get_val

typedef long long int ( *get_val_function_type )( ::comcfg::Configure const &,::std::string,::std::string &,long long int );

bp::def(
"get_val"
, get_val_function_type( &::gezi::get_val )
, ( bp::arg("conf"), bp::arg("field"), bp::arg("key"), bp::arg("default_val") ) );

}

{ //::gezi::get_val

typedef long long int ( *get_val_function_type )( ::comcfg::Configure const &,::std::string,long long int );

bp::def(
"get_val"
, get_val_function_type( &::gezi::get_val )
, ( bp::arg("conf"), bp::arg("key"), bp::arg("default_val") ) );

}

{ //::gezi::get_val

typedef int ( *get_val_function_type )( ::comcfg::Configure const &,::std::string,::std::string,int );

bp::def(
"get_val"
, get_val_function_type( &::gezi::get_val )
, ( bp::arg("conf"), bp::arg("field"), bp::arg("key"), bp::arg("default_val") ) );

}

{ //::gezi::get_val

typedef int ( *get_val_function_type )( ::comcfg::Configure const &,::std::string,int );

bp::def(
"get_val"
, get_val_function_type( &::gezi::get_val )
, ( bp::arg("conf"), bp::arg("key"), bp::arg("default_val") ) );

}

{ //::gezi::get_val

typedef ::std::string ( *get_val_function_type )( ::comcfg::Configure const &,::std::string,::std::string,::std::string );

bp::def(
"get_val"
, get_val_function_type( &::gezi::get_val )
, ( bp::arg("conf"), bp::arg("field"), bp::arg("key"), bp::arg("default_val") ) );

}

{ //::gezi::get_val

typedef ::std::string ( *get_val_function_type )( ::comcfg::Configure const &,::std::string,::std::string );

bp::def(
"get_val"
, get_val_function_type( &::gezi::get_val )
, ( bp::arg("conf"), bp::arg("key"), bp::arg("default_val") ) );

}

{ //::gezi::get_videos

typedef ::std::vector< std::string > ( *get_videos_function_type )( ::std::string );

bp::def(
"get_videos"
, get_videos_function_type( &::gezi::get_videos )
, ( bp::arg("src") ) );

}

{ //::gezi::get_words

typedef ::std::vector< std::string > ( *get_words_function_type )( ::std::vector< std::string > &,int,::std::string );

bp::def(
"get_words"
, get_words_function_type( &::gezi::get_words )
, ( bp::arg("l"), bp::arg("ngram")=(int)(3), bp::arg("sep")="$#$" ) );

}

{ //::gezi::information_gain

typedef ::Float ( *information_gain_function_type )( int,int,int,::uint64 );

bp::def(
"information_gain"
, information_gain_function_type( &::gezi::information_gain )
, ( bp::arg("nfc"), bp::arg("nf"), bp::arg("nc"), bp::arg("n") ) );

}

{ //::gezi::ipFinder

typedef ::gezi::IpFinder & ( *ipFinder_function_type )(  );

bp::def(
"ipFinder"
, ipFinder_function_type( &::gezi::ipFinder )
, bp::return_internal_reference<>());

}

{ //::gezi::is_alpha_only

typedef bool ( *is_alpha_only_function_type )( ::std::string );

bp::def(
"is_alpha_only"
, is_alpha_only_function_type( &::gezi::is_alpha_only )
, ( bp::arg("input") ) );

}

{ //::gezi::tieba::is_deleted

typedef bool ( *is_deleted_function_type )( ::uint64,::std::string );

bp::def(
"is_deleted"
, is_deleted_function_type( &::gezi::tieba::is_deleted )
, ( bp::arg("id"), bp::arg("type") ) );

}

{ //::gezi::tieba::is_deletes

typedef ::std::set< long long unsigned int > ( *is_deletes_function_type )( ::std::vector< unsigned long long > const &,::std::string,bool );

bp::def(
"is_deletes"
, is_deletes_function_type( &::gezi::tieba::is_deletes )
, ( bp::arg("ids_"), bp::arg("type"), bp::arg("allowError")=(bool)(true) ) );

}

{ //::gezi::is_en_dominate

typedef bool ( *is_en_dominate_function_type )( ::std::string,int );

bp::def(
"is_en_dominate"
, is_en_dominate_function_type( &::gezi::is_en_dominate )
, ( bp::arg("phrase"), bp::arg("var")=(int)(3) ) );

}

{ //::gezi::is_gb2312

typedef bool ( *is_gb2312_function_type )( unsigned char,unsigned char );

bp::def(
"is_gb2312"
, is_gb2312_function_type( &::gezi::is_gb2312 )
, ( bp::arg("ch1"), bp::arg("ch2") ) );

}

{ //::gezi::is_gbk_ch

typedef bool ( *is_gbk_ch_function_type )( ::std::string );

bp::def(
"is_gbk_ch"
, is_gbk_ch_function_type( &::gezi::is_gbk_ch )
, ( bp::arg("phrase") ) );

}

{ //::gezi::is_gbk_ch

typedef bool ( *is_gbk_ch_function_type )( unsigned char,unsigned char );

bp::def(
"is_gbk_ch"
, is_gbk_ch_function_type( &::gezi::is_gbk_ch )
, ( bp::arg("ch1"), bp::arg("ch2") ) );

}

{ //::gezi::tieba::is_post_deleted

typedef bool ( *is_post_deleted_function_type )( ::uint64 );

bp::def(
"is_post_deleted"
, is_post_deleted_function_type( &::gezi::tieba::is_post_deleted )
, ( bp::arg("pid") ) );

}

{ //::gezi::tieba::is_posts_deleted

typedef ::std::set< long long unsigned int > ( *is_posts_deleted_function_type )( ::std::vector< unsigned long long > const &,bool );

bp::def(
"is_posts_deleted"
, is_posts_deleted_function_type( &::gezi::tieba::is_posts_deleted )
, ( bp::arg("pids"), bp::arg("allowError")=(bool)(true) ) );

}

{ //::gezi::tieba::is_thread

typedef bool ( *is_thread_function_type )( ::std::string );

bp::def(
"is_thread"
, is_thread_function_type( &::gezi::tieba::is_thread )
, ( bp::arg("title") ) );

}

{ //::gezi::tieba::is_thread_deleted

typedef bool ( *is_thread_deleted_function_type )( ::uint64 );

bp::def(
"is_thread_deleted"
, is_thread_deleted_function_type( &::gezi::tieba::is_thread_deleted )
, ( bp::arg("tid") ) );

}

{ //::gezi::tieba::is_threads_deleted

typedef ::std::set< long long unsigned int > ( *is_threads_deleted_function_type )( ::std::vector< unsigned long long > const &,bool );

bp::def(
"is_threads_deleted"
, is_threads_deleted_function_type( &::gezi::tieba::is_threads_deleted )
, ( bp::arg("tids"), bp::arg("allowError")=(bool)(true) ) );

}

{ //::gezi::json_empty

typedef bool ( *json_empty_function_type )( ::std::string );

bp::def(
"json_empty"
, json_empty_function_type( &::gezi::json_empty )
, ( bp::arg("value") ) );

}

{ //::gezi::last

typedef ::std::string ( *last_function_type )( ::std::string,int );

bp::def(
"last"
, last_function_type( &::gezi::last )
, ( bp::arg("input"), bp::arg("length") ) );

}

{ //::gezi::max

typedef ::std::string ( *max_function_type )( ::std::string,int );

bp::def(
"max"
, max_function_type( &::gezi::max )
, ( bp::arg("input"), bp::arg("length") ) );

}

{ //::gezi::mutual_info

typedef ::Float ( *mutual_info_function_type )( int,int,int,::uint64 );

bp::def(
"mutual_info"
, mutual_info_function_type( &::gezi::mutual_info )
, ( bp::arg("nfc"), bp::arg("nf"), bp::arg("nc"), bp::arg("n") ) );

}

{ //::gezi::mutual_info2

typedef ::Float ( *mutual_info2_function_type )( int,int,int,::uint64 );

bp::def(
"mutual_info2"
, mutual_info2_function_type( &::gezi::mutual_info2 )
, ( bp::arg("nfc"), bp::arg("nf"), bp::arg("nc"), bp::arg("n") ) );

}

{ //::gezi::tieba::name_pattern

typedef ::std::string ( *name_pattern_function_type )( ::std::string );

bp::def(
"name_pattern"
, name_pattern_function_type( &::gezi::tieba::name_pattern )
, ( bp::arg("uname") ) );

}

{ //::gezi::normalize_feature_str

typedef void ( *normalize_feature_str_function_type )( ::std::string & );

bp::def(
"normalize_feature_str"
, normalize_feature_str_function_type( &::gezi::normalize_feature_str )
, ( bp::arg("feature_str") ) );

}

{ //::gezi::normalize_str

typedef ::std::string ( *normalize_str_function_type )( ::std::string );

bp::def(
"normalize_str"
, normalize_str_function_type( &::gezi::normalize_str )
, ( bp::arg("input") ) );

}

{ //::gezi::pad_right

typedef ::std::string ( *pad_right_function_type )( ::std::string,int );

bp::def(
"pad_right"
, pad_right_function_type( &::gezi::pad_right )
, ( bp::arg("input"), bp::arg("count") ) );

}

{ //::gezi::parse_bool_param

typedef bool ( *parse_bool_param_function_type )( ::std::string,::std::string );

bp::def(
"parse_bool_param"
, parse_bool_param_function_type( &::gezi::parse_bool_param )
, ( bp::arg("name"), bp::arg("line") ) );

}

{ //::gezi::tieba::parse_delete_info_

typedef void ( *parse_delete_info__function_type )( ::Json::Value const &,::gezi::tieba::DeleteInfo &,::std::string );

bp::def(
"parse_delete_info_"
, parse_delete_info__function_type( &::gezi::tieba::parse_delete_info_ )
, ( bp::arg("jsonDelInfo"), bp::arg("deleteInfo"), bp::arg("type") ) );

}

{ //::gezi::parse_double_param

typedef double ( *parse_double_param_function_type )( ::std::string,::std::string );

bp::def(
"parse_double_param"
, parse_double_param_function_type( &::gezi::parse_double_param )
, ( bp::arg("name"), bp::arg("line") ) );

}

{ //::gezi::tieba::parse_img_info

typedef void ( *parse_img_info_function_type )( ::Json::Value const &,::gezi::tieba::ImgInfo & );

bp::def(
"parse_img_info"
, parse_img_info_function_type( &::gezi::tieba::parse_img_info )
, ( bp::arg("m"), bp::arg("info") ) );

}

{ //::gezi::parse_int_param

typedef int ( *parse_int_param_function_type )( ::std::string,::std::string );

bp::def(
"parse_int_param"
, parse_int_param_function_type( &::gezi::parse_int_param )
, ( bp::arg("name"), bp::arg("line") ) );

}

{ //::gezi::tieba::parse_post_info

typedef void ( *parse_post_info_function_type )( ::Json::Value const &,::gezi::tieba::PostInfo & );

bp::def(
"parse_post_info"
, parse_post_info_function_type( &::gezi::tieba::parse_post_info )
, ( bp::arg("m"), bp::arg("info") ) );

}

{ //::gezi::parse_string_param

typedef ::std::string ( *parse_string_param_function_type )( ::std::string,::std::string );

bp::def(
"parse_string_param"
, parse_string_param_function_type( &::gezi::parse_string_param )
, ( bp::arg("name"), bp::arg("line") ) );

}

{ //::gezi::tieba::parse_user_info_

typedef void ( *parse_user_info__function_type )( ::Json::Value const &,::gezi::tieba::UserInfo &,bool,bool );

bp::def(
"parse_user_info_"
, parse_user_info__function_type( &::gezi::tieba::parse_user_info_ )
, ( bp::arg("m"), bp::arg("info"), bp::arg("needFollowInfo"), bp::arg("needPassInfo") ) );

}

{ //::gezi::tieba::parse_user_post_num_info_

typedef void ( *parse_user_post_num_info__function_type )( ::Json::Value const &,::gezi::tieba::UserPostNumInfo & );

bp::def(
"parse_user_post_num_info_"
, parse_user_post_num_info__function_type( &::gezi::tieba::parse_user_post_num_info_ )
, ( bp::arg("root"), bp::arg("info") ) );

}

{ //::gezi::point_mutual_info

typedef ::Float ( *point_mutual_info_function_type )( int,int,int,::uint64 );

bp::def(
"point_mutual_info"
, point_mutual_info_function_type( &::gezi::point_mutual_info )
, ( bp::arg("a"), bp::arg("n1"), bp::arg("n2"), bp::arg("n") ) );

}

{ //::gezi::print_seg_result

typedef void ( *print_seg_result_function_type )( ::gezi::SegHandle const & );

bp::def(
"print_seg_result"
, print_seg_result_function_type( &::gezi::print_seg_result )
, ( bp::arg("handle") ) );

}

{ //::gezi::read_file

typedef ::std::string ( *read_file_function_type )( ::std::string const & );

bp::def(
"read_file"
, read_file_function_type( &::gezi::read_file )
, ( bp::arg("infile") ) );

}

{ //::gezi::read_lines

typedef void ( *read_lines_function_type )( ::std::string,::std::vector< std::string > & );

bp::def(
"read_lines"
, read_lines_function_type( &::gezi::read_lines )
, ( bp::arg("infile"), bp::arg("vec") ) );

}

{ //::gezi::read_lines

typedef ::std::vector< std::string > ( *read_lines_function_type )( ::std::ifstream & );

bp::def(
"read_lines"
, read_lines_function_type( &::gezi::read_lines )
, ( bp::arg("ifs") ) );

}

{ //::gezi::read_lines

typedef ::std::vector< std::string > ( *read_lines_function_type )( ::std::string,::std::string );

bp::def(
"read_lines"
, read_lines_function_type( &::gezi::read_lines )
, ( bp::arg("infile"), bp::arg("ignore") ) );

}

{ //::gezi::read_lines

typedef ::std::vector< std::string > ( *read_lines_function_type )( ::std::string );

bp::def(
"read_lines"
, read_lines_function_type( &::gezi::read_lines )
, ( bp::arg("infile") ) );

}

{ //::gezi::read_lines_fast

typedef ::std::vector< std::string > ( *read_lines_fast_function_type )( ::std::string,::std::string );

bp::def(
"read_lines_fast"
, read_lines_fast_function_type( &::gezi::read_lines_fast )
, ( bp::arg("infile"), bp::arg("ignore") ) );

}

{ //::gezi::read_lines_fast

typedef ::std::vector< std::string > ( *read_lines_fast_function_type )( ::std::string );

bp::def(
"read_lines_fast"
, read_lines_fast_function_type( &::gezi::read_lines_fast )
, ( bp::arg("infile") ) );

}

{ //::gezi::read_lines_noempty

typedef ::std::vector< std::string > ( *read_lines_noempty_function_type )( ::std::string );

bp::def(
"read_lines_noempty"
, read_lines_noempty_function_type( &::gezi::read_lines_noempty )
, ( bp::arg("infile") ) );

}

{ //::gezi::read_map

typedef void ( *read_map_function_type )( ::std::string const &,::std::unordered_map< std::basic_string< char, std::char_traits< char >, std::allocator< char > >, std::basic_string< char, std::char_traits< char >, std::allocator< char > >, boost::hash< std::basic_string< char, std::char_traits< char >, std::allocator< char > > >, std::equal_to< std::basic_string< char, std::char_traits< char >, std::allocator< char > > >, std::allocator< std::pair< const std::basic_string< char, std::char_traits< char >, std::allocator< char > >, std::basic_string< char, std::char_traits< char >, std::allocator< char > > > > > &,::std::string,int,int );

bp::def(
"read_map"
, read_map_function_type( &::gezi::read_map )
, ( bp::arg("infile"), bp::arg("container"), bp::arg("sep")="\011", bp::arg("key_idx")=(int)(0), bp::arg("value_idx")=(int)(1) ) );

}

{ //::gezi::read_map

typedef void ( *read_map_function_type )( ::std::string const &,::std::map< std::string, std::string > &,::std::string,int,int );

bp::def(
"read_map"
, read_map_function_type( &::gezi::read_map )
, ( bp::arg("infile"), bp::arg("container"), bp::arg("sep")="\011", bp::arg("key_idx")=(int)(0), bp::arg("value_idx")=(int)(1) ) );

}

{ //::gezi::read_to_set

typedef void ( *read_to_set_function_type )( ::std::string const &,::std::unordered_set< std::basic_string< char, std::char_traits< char >, std::allocator< char > >, boost::hash< std::basic_string< char, std::char_traits< char >, std::allocator< char > > >, std::equal_to< std::basic_string< char, std::char_traits< char >, std::allocator< char > > >, std::allocator< std::basic_string< char, std::char_traits< char >, std::allocator< char > > > > &,int,::std::string );

bp::def(
"read_to_set"
, read_to_set_function_type( &::gezi::read_to_set )
, ( bp::arg("infile"), bp::arg("container"), bp::arg("index")=(int)(0), bp::arg("sep")="\011 " ) );

}

{ //::gezi::read_to_set

typedef void ( *read_to_set_function_type )( ::std::string const &,::std::set< std::string > &,int,::std::string );

bp::def(
"read_to_set"
, read_to_set_function_type( &::gezi::read_to_set )
, ( bp::arg("infile"), bp::arg("container"), bp::arg("index")=(int)(0), bp::arg("sep")="\011 " ) );

}

{ //::gezi::read_to_vec

typedef ::std::vector< std::string > ( *read_to_vec_function_type )( ::std::string const &,int,::std::string );

bp::def(
"read_to_vec"
, read_to_vec_function_type( &::gezi::read_to_vec )
, ( bp::arg("infile"), bp::arg("index")=(int)(0), bp::arg("sep")="\011 " ) );

}

{ //::gezi::read_to_vec

typedef void ( *read_to_vec_function_type )( ::std::string const &,::std::vector< std::string > &,int,::std::string );

bp::def(
"read_to_vec"
, read_to_vec_function_type( &::gezi::read_to_vec )
, ( bp::arg("infile"), bp::arg("container"), bp::arg("index")=(int)(0), bp::arg("sep")="\011 " ) );

}

{ //::gezi::tieba::reg_days

typedef int ( *reg_days_function_type )( ::uint64,::uint64 );

bp::def(
"reg_days"
, reg_days_function_type( &::gezi::tieba::reg_days )
, ( bp::arg("nowTime"), bp::arg("regTime") ) );

}

{ //::gezi::reg_find

typedef bool ( *reg_find_function_type )( ::std::string const &,::std::string );

bp::def(
"reg_find"
, reg_find_function_type( &::gezi::reg_find )
, ( bp::arg("content"), bp::arg("pattern") ) );

}

{ //::gezi::reg_remove

typedef ::std::wstring ( *reg_remove_function_type )( ::std::wstring const &,::std::wstring );

bp::def(
"reg_remove"
, reg_remove_function_type( &::gezi::reg_remove )
, ( bp::arg("input"), bp::arg("pattern") ) );

}

{ //::gezi::reg_remove

typedef ::std::string ( *reg_remove_function_type )( ::std::string const &,::std::string );

bp::def(
"reg_remove"
, reg_remove_function_type( &::gezi::reg_remove )
, ( bp::arg("input"), bp::arg("pattern") ) );

}

{ //::gezi::reg_replace

typedef ::std::wstring ( *reg_replace_function_type )( ::std::wstring const &,::std::wstring,::std::wstring );

bp::def(
"reg_replace"
, reg_replace_function_type( &::gezi::reg_replace )
, ( bp::arg("input"), bp::arg("pattern"), bp::arg("replacement")="\000\000\000" ) );

}

{ //::gezi::reg_replace

typedef ::std::string ( *reg_replace_function_type )( ::std::string const &,::std::string,::std::string );

bp::def(
"reg_replace"
, reg_replace_function_type( &::gezi::reg_replace )
, ( bp::arg("input"), bp::arg("pattern"), bp::arg("replacement")="" ) );

}

{ //::gezi::reg_search

typedef void ( *reg_search_function_type )( ::std::wstring const &,::std::wstring,::std::vector< std::wstring > &,int );

bp::def(
"reg_search"
, reg_search_function_type( &::gezi::reg_search )
, ( bp::arg("content"), bp::arg("pattern"), bp::arg("result"), bp::arg("index")=(int)(1) ) );

}

{ //::gezi::reg_search

typedef ::std::wstring ( *reg_search_function_type )( ::std::wstring const &,::std::wstring,int );

bp::def(
"reg_search"
, reg_search_function_type( &::gezi::reg_search )
, ( bp::arg("content"), bp::arg("pattern"), bp::arg("index")=(int)(1) ) );

}

{ //::gezi::reg_search

typedef void ( *reg_search_function_type )( ::std::string const &,::std::string,::std::vector< std::string > &,int );

bp::def(
"reg_search"
, reg_search_function_type( &::gezi::reg_search )
, ( bp::arg("content"), bp::arg("pattern"), bp::arg("result"), bp::arg("index")=(int)(1) ) );

}

{ //::gezi::reg_search

typedef ::std::string ( *reg_search_function_type )( ::std::string const &,::std::string,int );

bp::def(
"reg_search"
, reg_search_function_type( &::gezi::reg_search )
, ( bp::arg("content"), bp::arg("pattern"), bp::arg("index")=(int)(1) ) );

}

{ //::gezi::reg_search

typedef void ( *reg_search_function_type )( ::std::wstring const &,::boost::wregex &,::std::vector< std::wstring > &,int );

bp::def(
"reg_search"
, reg_search_function_type( &::gezi::reg_search )
, ( bp::arg("content"), bp::arg("reg"), bp::arg("result"), bp::arg("index")=(int)(1) ) );

}

{ //::gezi::reg_search

typedef ::std::wstring ( *reg_search_function_type )( ::std::wstring const &,::boost::wregex &,int );

bp::def(
"reg_search"
, reg_search_function_type( &::gezi::reg_search )
, ( bp::arg("content"), bp::arg("reg"), bp::arg("index")=(int)(1) ) );

}

{ //::gezi::reg_search

typedef void ( *reg_search_function_type )( ::std::string const &,::boost::regex &,::std::vector< std::string > &,int );

bp::def(
"reg_search"
, reg_search_function_type( &::gezi::reg_search )
, ( bp::arg("content"), bp::arg("reg"), bp::arg("result"), bp::arg("index")=(int)(1) ) );

}

{ //::gezi::reg_search

typedef ::std::string ( *reg_search_function_type )( ::std::string const &,::boost::regex &,int );

bp::def(
"reg_search"
, reg_search_function_type( &::gezi::reg_search )
, ( bp::arg("content"), bp::arg("reg"), bp::arg("index")=(int)(1) ) );

}

{ //::gezi::ufo::reg_search

typedef ::std::vector< std::wstring > ( *reg_search_function_type )( ::std::wstring const &,::boost::wregex &,int );

bp::def(
"reg_search"
, reg_search_function_type( &::gezi::ufo::reg_search )
, ( bp::arg("content"), bp::arg("reg"), bp::arg("index")=(int)(1) ) );

}

{ //::gezi::ufo::reg_search

typedef ::std::vector< std::string > ( *reg_search_function_type )( ::std::string const &,::std::string,int );

bp::def(
"reg_search"
, reg_search_function_type( &::gezi::ufo::reg_search )
, ( bp::arg("content"), bp::arg("pattern"), bp::arg("index")=(int)(1) ) );

}

{ //::gezi::ufo::reg_search

typedef ::std::vector< std::string > ( *reg_search_function_type )( ::std::string const &,::boost::regex &,int );

bp::def(
"reg_search"
, reg_search_function_type( &::gezi::ufo::reg_search )
, ( bp::arg("content"), bp::arg("reg"), bp::arg("index")=(int)(1) ) );

}

{ //::gezi::tieba::reg_span

typedef ::uint64 ( *reg_span_function_type )( ::uint64,::uint64 );

bp::def(
"reg_span"
, reg_span_function_type( &::gezi::tieba::reg_span )
, ( bp::arg("nowTime"), bp::arg("regTime") ) );

}

{ //::gezi::reg_split

typedef ::std::vector< std::wstring > ( *reg_split_function_type )( ::std::wstring const &,::std::wstring );

bp::def(
"reg_split"
, reg_split_function_type( &::gezi::reg_split )
, ( bp::arg("input"), bp::arg("pattern") ) );

}

{ //::gezi::reg_split

typedef ::std::vector< std::string > ( *reg_split_function_type )( ::std::string const &,::std::string );

bp::def(
"reg_split"
, reg_split_function_type( &::gezi::reg_split )
, ( bp::arg("input"), bp::arg("pattern") ) );

}

{ //::gezi::remove_dupspace

typedef ::std::string ( *remove_dupspace_function_type )( ::std::string );

bp::def(
"remove_dupspace"
, remove_dupspace_function_type( &::gezi::remove_dupspace )
, ( bp::arg("input") ) );

}

{ //::gezi::remove_space_cn

typedef ::std::string ( *remove_space_cn_function_type )( ::std::string );

bp::def(
"remove_space_cn"
, remove_space_cn_function_type( &::gezi::remove_space_cn )
, ( bp::arg("phrase") ) );

}

{ //::gezi::remove_space_cnonly

typedef ::std::string ( *remove_space_cnonly_function_type )( ::std::string );

bp::def(
"remove_space_cnonly"
, remove_space_cnonly_function_type( &::gezi::remove_space_cnonly )
, ( bp::arg("phrase") ) );

}

{ //::gezi::replace

typedef ::std::string ( *replace_function_type )( ::std::string,char,char );

bp::def(
"replace"
, replace_function_type( &::gezi::replace )
, ( bp::arg("input"), bp::arg("a"), bp::arg("b") ) );

}

{ //::gezi::replace_chars

typedef ::std::string ( *replace_chars_function_type )( ::std::string,::std::string,char );

bp::def(
"replace_chars"
, replace_chars_function_type( &::gezi::replace_chars )
, ( bp::arg("content"), bp::arg("chars"), bp::arg("dest") ) );

}

{ //::gezi::replace_special_whitespace

typedef ::std::string ( *replace_special_whitespace_function_type )( ::std::string,char const );

bp::def(
"replace_special_whitespace"
, replace_special_whitespace_function_type( &::gezi::replace_special_whitespace )
, ( bp::arg("s"), bp::arg("rep")=(char const)(' ') ) );

}

{ //::gezi::set_val

typedef void ( *set_val_function_type )( ::comcfg::Configure const &,::std::string,::std::string,double & );

bp::def(
"set_val"
, set_val_function_type( &::gezi::set_val )
, ( bp::arg("conf"), bp::arg("field"), bp::arg("key"), bp::arg("val") ) );

}

{ //::gezi::set_val

typedef void ( *set_val_function_type )( ::comcfg::Configure const &,::std::string,double & );

bp::def(
"set_val"
, set_val_function_type( &::gezi::set_val )
, ( bp::arg("conf"), bp::arg("key"), bp::arg("val") ) );

}

{ //::gezi::set_val

typedef void ( *set_val_function_type )( ::comcfg::Configure const &,::std::string,::std::string &,long long int & );

bp::def(
"set_val"
, set_val_function_type( &::gezi::set_val )
, ( bp::arg("conf"), bp::arg("field"), bp::arg("key"), bp::arg("val") ) );

}

{ //::gezi::set_val

typedef void ( *set_val_function_type )( ::comcfg::Configure const &,::std::string,long long int & );

bp::def(
"set_val"
, set_val_function_type( &::gezi::set_val )
, ( bp::arg("conf"), bp::arg("key"), bp::arg("val") ) );

}

{ //::gezi::set_val

typedef void ( *set_val_function_type )( ::comcfg::Configure const &,::std::string,::std::string,bool & );

bp::def(
"set_val"
, set_val_function_type( &::gezi::set_val )
, ( bp::arg("conf"), bp::arg("field"), bp::arg("key"), bp::arg("val") ) );

}

{ //::gezi::set_val

typedef void ( *set_val_function_type )( ::comcfg::Configure const &,::std::string,bool & );

bp::def(
"set_val"
, set_val_function_type( &::gezi::set_val )
, ( bp::arg("conf"), bp::arg("key"), bp::arg("val") ) );

}

{ //::gezi::set_val

typedef void ( *set_val_function_type )( ::comcfg::Configure const &,::std::string,::std::string,int & );

bp::def(
"set_val"
, set_val_function_type( &::gezi::set_val )
, ( bp::arg("conf"), bp::arg("field"), bp::arg("key"), bp::arg("val") ) );

}

{ //::gezi::set_val

typedef void ( *set_val_function_type )( ::comcfg::Configure const &,::std::string,int & );

bp::def(
"set_val"
, set_val_function_type( &::gezi::set_val )
, ( bp::arg("conf"), bp::arg("key"), bp::arg("val") ) );

}

{ //::gezi::set_val

typedef void ( *set_val_function_type )( ::comcfg::Configure const &,::std::string,::std::string,::std::string & );

bp::def(
"set_val"
, set_val_function_type( &::gezi::set_val )
, ( bp::arg("conf"), bp::arg("field"), bp::arg("key"), bp::arg("val") ) );

}

{ //::gezi::set_val

typedef void ( *set_val_function_type )( ::comcfg::Configure const &,::std::string,::std::string & );

bp::def(
"set_val"
, set_val_function_type( &::gezi::set_val )
, ( bp::arg("conf"), bp::arg("key"), bp::arg("val") ) );

}

{ //::gezi::ufo::split_regex

typedef ::std::vector< std::string > ( *split_regex_function_type )( ::std::string const &,::std::string );

bp::def(
"split_regex"
, split_regex_function_type( &::gezi::ufo::split_regex )
, ( bp::arg("input"), bp::arg("pattern") ) );

}

{ //::gezi::startswith

typedef bool ( *startswith_function_type )( ::std::string,char );

bp::def(
"startswith"
, startswith_function_type( &::gezi::startswith )
, ( bp::arg("input"), bp::arg("part") ) );

}

{ //::gezi::startswith

typedef bool ( *startswith_function_type )( ::std::string,::std::string );

bp::def(
"startswith"
, startswith_function_type( &::gezi::startswith )
, ( bp::arg("input"), bp::arg("part") ) );

}

{ //::gezi::str_replace_all

typedef ::std::string ( *str_replace_all_function_type )( ::std::string,::std::string,::std::string );

bp::def(
"str_replace_all"
, str_replace_all_function_type( &::gezi::str_replace_all )
, ( bp::arg("tstr"), bp::arg("old_value"), bp::arg("new_value") ) );

}

{ //::gezi::strip_from

typedef ::std::string ( *strip_from_function_type )( ::std::string );

bp::def(
"strip_from"
, strip_from_function_type( &::gezi::strip_from )
, ( bp::arg("src") ) );

}

{ //::gezi::strip_html

typedef ::std::string ( *strip_html_function_type )( ::std::string );

bp::def(
"strip_html"
, strip_html_function_type( &::gezi::strip_html )
, ( bp::arg("src") ) );

}

{ //::gezi::to_cnvec

typedef ::std::vector< std::string > ( *to_cnvec_function_type )( ::std::string );

bp::def(
"to_cnvec"
, to_cnvec_function_type( &::gezi::to_cnvec )
, ( bp::arg("line") ) );

}

{ //::gezi::to_features

typedef ::gezi::Vector ( *to_features_function_type )( ::std::string );

bp::def(
"to_features"
, to_features_function_type( &::gezi::to_features )
, ( bp::arg("sparseFeatureStr") ) );

}

{ //::gezi::to_hashset

typedef ::std::unordered_set< std::basic_string< char, std::char_traits< char >, std::allocator< char > >, boost::hash< std::basic_string< char, std::char_traits< char >, std::allocator< char > > >, std::equal_to< std::basic_string< char, std::char_traits< char >, std::allocator< char > > >, std::allocator< std::basic_string< char, std::char_traits< char >, std::allocator< char > > > > ( *to_hashset_function_type )( ::std::string );

bp::def(
"to_hashset"
, to_hashset_function_type( &::gezi::to_hashset )
, ( bp::arg("infile") ) );

}

{ //::gezi::to_identifer_hashmap

typedef ::std::unordered_map< std::string, int, boost::hash< std::string >, std::equal_to< std::string >, std::allocator< std::pair< std::string const, int > > > ( *to_identifer_hashmap_function_type )( ::std::string,int );

bp::def(
"to_identifer_hashmap"
, to_identifer_hashmap_function_type( &::gezi::to_identifer_hashmap )
, ( bp::arg("infile"), bp::arg("start")=(int)(0) ) );

}

{ //::gezi::to_identifer_hashmap

typedef ::std::unordered_map< std::basic_string< char, std::char_traits< char >, std::allocator< char > >, int, boost::hash< std::basic_string< char, std::char_traits< char >, std::allocator< char > > >, std::equal_to< std::basic_string< char, std::char_traits< char >, std::allocator< char > > >, std::allocator< std::pair< const std::basic_string< char, std::char_traits< char >, std::allocator< char > >, int > > > ( *to_identifer_hashmap_function_type )( ::std::string,int );

bp::def(
"to_identifer_hashmap"
, to_identifer_hashmap_function_type( &::gezi::to_identifer_hashmap )
, ( bp::arg("infile"), bp::arg("start")=(int)(0) ) );

}

{ //::gezi::to_identifer_map

typedef ::std::map< std::string, int > ( *to_identifer_map_function_type )( ::std::string,int );

bp::def(
"to_identifer_map"
, to_identifer_map_function_type( &::gezi::to_identifer_map )
, ( bp::arg("infile"), bp::arg("start")=(int)(0) ) );

}

{ //::gezi::to_iparray

typedef ::boost::array< int, 4ul > ( *to_iparray_function_type )( ::uint64 );

bp::def(
"to_iparray"
, to_iparray_function_type( &::gezi::to_iparray )
, ( bp::arg("ipl") ) );

}

{ //::gezi::to_ipstr

typedef ::std::string ( *to_ipstr_function_type )( ::uint64 );

bp::def(
"to_ipstr"
, to_ipstr_function_type( &::gezi::to_ipstr )
, ( bp::arg("ipl") ) );

}

{ //::gezi::to_set

typedef ::std::set< std::string > ( *to_set_function_type )( ::std::string );

bp::def(
"to_set"
, to_set_function_type( &::gezi::to_set )
, ( bp::arg("infile") ) );

}

{ //::gezi::try_create_dir

typedef void ( *try_create_dir_function_type )( ::std::string );

bp::def(
"try_create_dir"
, try_create_dir_function_type( &::gezi::try_create_dir )
, ( bp::arg("dir") ) );

}

{ //::gezi::wchar_count

typedef int ( *wchar_count_function_type )( char const *,int );

bp::def(
"wchar_count"
, wchar_count_function_type( &::gezi::wchar_count )
, ( bp::arg("buf"), bp::arg("len") ) );

}

{ //::gezi::word_count

typedef int ( *word_count_function_type )( ::std::string );

bp::def(
"word_count"
, word_count_function_type( &::gezi::word_count )
, ( bp::arg("phrase") ) );

}

{ //::gezi::ufo::wreg_search

typedef ::std::vector< std::wstring > ( *wreg_search_function_type )( ::std::wstring const &,::std::wstring,int );

bp::def(
"wreg_search"
, wreg_search_function_type( &::gezi::ufo::wreg_search )
, ( bp::arg("content"), bp::arg("pattern"), bp::arg("index")=(int)(1) ) );

}

{ //::gezi::write_arff

typedef void ( *write_arff_function_type )( ::gezi::Features const &,::std::string,::std::string,::std::ostream & );

bp::def(
"write_arff"
, write_arff_function_type( &::gezi::write_arff )
, ( bp::arg("features"), bp::arg("uid"), bp::arg("type"), bp::arg("ofs") ) );

}

{ //::gezi::write_def

typedef void ( *write_def_function_type )( ::gezi::Features const &,::std::string );

bp::def(
"write_def"
, write_def_function_type( &::gezi::write_def )
, ( bp::arg("features"), bp::arg("outfile") ) );

}

{ //::gezi::write_file

typedef void ( *write_file_function_type )( ::std::string,::std::string );

bp::def(
"write_file"
, write_file_function_type( &::gezi::write_file )
, ( bp::arg("content"), bp::arg("outfile") ) );

}

{ //::gezi::write_header

typedef void ( *write_header_function_type )( ::gezi::Features const &,::std::string );

bp::def(
"write_header"
, write_header_function_type( &::gezi::write_header )
, ( bp::arg("features"), bp::arg("file") ) );

}

{ //::gezi::write_header

typedef void ( *write_header_function_type )( ::gezi::Features const &,::std::ostream & );

bp::def(
"write_header"
, write_header_function_type( &::gezi::write_header )
, ( bp::arg("features"), bp::arg("ofs") ) );

}

{ //::gezi::write_libsvm

typedef void ( *write_libsvm_function_type )( ::gezi::Features const &,::std::string,::std::ostream & );

bp::def(
"write_libsvm"
, write_libsvm_function_type( &::gezi::write_libsvm )
, ( bp::arg("features"), bp::arg("label"), bp::arg("ofs") ) );

}

{ //::gezi::write_table_feature

typedef void ( *write_table_feature_function_type )( ::gezi::Features const &,::std::ofstream & );

bp::def(
"write_table_feature"
, write_table_feature_function_type( &::gezi::write_table_feature )
, ( bp::arg("features"), bp::arg("ofs") ) );

}

{ //::gezi::write_template

typedef void ( *write_template_function_type )( ::gezi::Features const &,::std::string );

bp::def(
"write_template"
, write_template_function_type( &::gezi::write_template )
, ( bp::arg("features"), bp::arg("outfile") ) );

}

bp::scope().attr("SEG_BASIC") = gezi::SEG_BASIC;

bp::scope().attr("SEG_HUMAN_NAME") = gezi::SEG_HUMAN_NAME;

bp::scope().attr("SEG_MERGE_NEWWORD") = gezi::SEG_MERGE_NEWWORD;

bp::scope().attr("SEG_NEWWORD") = gezi::SEG_NEWWORD;

bp::scope().attr("SEG_USE_ALL") = gezi::SEG_USE_ALL;

bp::scope().attr("SEG_USE_DEFAULT") = gezi::SEG_USE_DEFAULT;

bp::scope().attr("SEG_USE_POSTAG") = gezi::SEG_USE_POSTAG;

bp::scope().attr("SEG_USE_SPLIT") = gezi::SEG_USE_SPLIT;

bp::scope().attr("SEG_USE_TRIE") = gezi::SEG_USE_TRIE;

bp::scope().attr("SEG_WPCOMP") = gezi::SEG_WPCOMP;

bp::scope().attr("kMaxRequestCount") = gezi::tieba::kMaxRequestCount;
}

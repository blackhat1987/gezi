#include "../include/python_util.h"
// This file has been generated by Py++.

#include "boost/python.hpp"

#include "boost/python/suite/indexing/vector_indexing_suite.hpp"

#include "../include/word_seg.h"

#include "../include/log_util.h"

#include "../include/Matrix.h"

#include "../include/numeric/collocation.h"

#include "../include/feature/FeatureSelector.h"

#include "../include/tools/content_process.h"

#include "../include/string_util.h"

#include "../include/reg_util.h"

#include "../include/ProgressBar.h"

#include "../include/tieba/util.h"

#include "../include/encoding_convert.h"

#include "../include/Identifer.h"

#include "../include/Idf.h"

#include "../include/model/Linear.h"

#include "../include/feature/Feature.h"

#include "../include/tools/pinyin/Pinyin.h"

namespace bp = boost::python;

BOOST_PYTHON_MODULE(libgezi){
UseStrVec;
			UseIntVec;
			UseFloatVec;
			UseDoubleVec;
			UseStrStrMap;
			UseStrIntMap;
			//UseStrIntHashMap;
			UseStrFloatMap;
			UseStrDoubleMap;
			
    { //::std::vector< std::vector< double > >
        typedef bp::class_< std::vector< std::vector< double > > > vector_less__std_scope_vector_less__double__greater___greater__exposer_t;
        vector_less__std_scope_vector_less__double__greater___greater__exposer_t vector_less__std_scope_vector_less__double__greater___greater__exposer = vector_less__std_scope_vector_less__double__greater___greater__exposer_t( "vector_less__std_scope_vector_less__double__greater___greater_" );
        bp::scope vector_less__std_scope_vector_less__double__greater___greater__scope( vector_less__std_scope_vector_less__double__greater___greater__exposer );
        //WARNING: the next line of code will not compile, because "::std::vector<double, std::allocator<double> >" does not have operator== !
//         vector_less__std_scope_vector_less__double__greater___greater__exposer.def( bp::vector_indexing_suite< ::std::vector< std::vector< double > > >() );
    }

    { //::std::vector< std::string >
        typedef bp::class_< std::vector< std::string > > vector_less__std_scope_string__greater__exposer_t;
        vector_less__std_scope_string__greater__exposer_t vector_less__std_scope_string__greater__exposer = vector_less__std_scope_string__greater__exposer_t( "vector_less__std_scope_string__greater_" );
        bp::scope vector_less__std_scope_string__greater__scope( vector_less__std_scope_string__greater__exposer );
        vector_less__std_scope_string__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< std::string >, true >() );
    }

    { //::std::vector< std::wstring >
        typedef bp::class_< std::vector< std::wstring > > vector_less__std_scope_wstring__greater__exposer_t;
        vector_less__std_scope_wstring__greater__exposer_t vector_less__std_scope_wstring__greater__exposer = vector_less__std_scope_wstring__greater__exposer_t( "vector_less__std_scope_wstring__greater_" );
        bp::scope vector_less__std_scope_wstring__greater__scope( vector_less__std_scope_wstring__greater__exposer );
        vector_less__std_scope_wstring__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< std::wstring >, true >() );
    }

    bp::class_< std::vector< std::string > >("vector_less__std_scope_string__greater_")    
        .def( bp::vector_indexing_suite< ::std::vector< std::string > >() );

    { //::std::vector< int >
        typedef bp::class_< std::vector< int > > vector_less__int__greater__exposer_t;
        vector_less__int__greater__exposer_t vector_less__int__greater__exposer = vector_less__int__greater__exposer_t( "vector_less__int__greater_" );
        bp::scope vector_less__int__greater__scope( vector_less__int__greater__exposer );
        vector_less__int__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< int >, true >() );
    }

    { //::std::vector< gezi::Feature::Node >
        typedef bp::class_< std::vector< gezi::Feature::Node > > vector_less__gezi_scope_Feature_scope_Node__greater__exposer_t;
        vector_less__gezi_scope_Feature_scope_Node__greater__exposer_t vector_less__gezi_scope_Feature_scope_Node__greater__exposer = vector_less__gezi_scope_Feature_scope_Node__greater__exposer_t( "vector_less__gezi_scope_Feature_scope_Node__greater_" );
        bp::scope vector_less__gezi_scope_Feature_scope_Node__greater__scope( vector_less__gezi_scope_Feature_scope_Node__greater__exposer );
        //WARNING: the next line of code will not compile, because "::gezi::Feature::Node" does not have operator== !
//         vector_less__gezi_scope_Feature_scope_Node__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< gezi::Feature::Node > >() );
    }

    { //::std::vector< double >
        typedef bp::class_< std::vector< double > > vector_less__double__greater__exposer_t;
        vector_less__double__greater__exposer_t vector_less__double__greater__exposer = vector_less__double__greater__exposer_t( "vector_less__double__greater_" );
        bp::scope vector_less__double__greater__scope( vector_less__double__greater__exposer );
        vector_less__double__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< double >, true >() );
    }

    bp::enum_< gezi::collocation::Method>("Method")
        .value("CHI", gezi::collocation::CHI)
        .value("IG", gezi::collocation::IG)
        .value("MI", gezi::collocation::MI)
        .value("MI2", gezi::collocation::MI2)
        .value("PMI", gezi::collocation::PMI)
        .value("ECE", gezi::collocation::ECE)
        .value("EMI", gezi::collocation::EMI)
        .value("T_TEST", gezi::collocation::T_TEST)
        .value("LIR", gezi::collocation::LIR)
        .value("FREQ", gezi::collocation::FREQ)
        .value("IDF", gezi::collocation::IDF)
        .export_values()
        ;

    bp::class_< NoProgressBar >( "NoProgressBar" )    
        .def( 
            "__call__"
            , (void ( ::NoProgressBar::* )( ::size_t,::size_t ) const)( &::NoProgressBar::operator() )
            , ( bp::arg("arg0"), bp::arg("arg1") ) );

    { //::ProgressBar
        typedef bp::class_< ProgressBar, boost::noncopyable > ProgressBar_exposer_t;
        ProgressBar_exposer_t ProgressBar_exposer = ProgressBar_exposer_t( "ProgressBar", bp::init< >() );
        bp::scope ProgressBar_scope( ProgressBar_exposer );
        ProgressBar_exposer.def( bp::init< std::string const & >(( bp::arg("log_word") )) );
        bp::implicitly_convertible< std::string const &, ProgressBar >();
        ProgressBar_exposer.def( bp::init< size_t >(( bp::arg("total") )) );
        bp::implicitly_convertible< size_t, ProgressBar >();
        ProgressBar_exposer.def( bp::init< std::string const &, size_t >(( bp::arg("log_word"), bp::arg("total") )) );
        { //::ProgressBar::operator()
        
            typedef void ( ::ProgressBar::*__call___function_type )( ::size_t ) ;
            
            ProgressBar_exposer.def( 
                "__call__"
                , __call___function_type( &::ProgressBar::operator() )
                , ( bp::arg("current") ) );
        
        }
        { //::ProgressBar::operator()
        
            typedef void ( ::ProgressBar::*__call___function_type )( ::size_t,::size_t ) ;
            
            ProgressBar_exposer.def( 
                "__call__"
                , __call___function_type( &::ProgressBar::operator() )
                , ( bp::arg("current"), bp::arg("total") ) );
        
        }
        { //::ProgressBar::progress
        
            typedef void ( ::ProgressBar::*progress_function_type )( ::size_t ) ;
            
            ProgressBar_exposer.def( 
                "progress"
                , progress_function_type( &::ProgressBar::progress )
                , ( bp::arg("current") ) );
        
        }
        { //::ProgressBar::progress
        
            typedef void ( ::ProgressBar::*progress_function_type )( ::size_t,::size_t ) ;
            
            ProgressBar_exposer.def( 
                "progress"
                , progress_function_type( &::ProgressBar::progress )
                , ( bp::arg("current"), bp::arg("total") ) );
        
        }
    }

    bp::class_< gezi::ChiSquareFunc >( "ChiSquareFunc" )    
        .def( 
            "__call__"
            , (::Float ( ::gezi::ChiSquareFunc::* )( int,int,int,::uint64 ) )( &::gezi::ChiSquareFunc::operator() )
            , ( bp::arg("a"), bp::arg("n1"), bp::arg("n2"), bp::arg("total") ) );

    bp::class_< gezi::DiscountedMutualInfoFunc >( "DiscountedMutualInfoFunc" )    
        .def( 
            "__call__"
            , (::Float ( ::gezi::DiscountedMutualInfoFunc::* )( int,int,int,long long unsigned int ) )( &::gezi::DiscountedMutualInfoFunc::operator() )
            , ( bp::arg("a00"), bp::arg("nterm1"), bp::arg("nterm2"), bp::arg("n") ) );

    bp::class_< gezi::EChiSquareFunc >( "EChiSquareFunc" )    
        .def( 
            "__call__"
            , (::Float ( ::gezi::EChiSquareFunc::* )( int,int,int,long long unsigned int ) )( &::gezi::EChiSquareFunc::operator() )
            , ( bp::arg("a00"), bp::arg("nterm1"), bp::arg("nterm2"), bp::arg("n") ) );

    bp::class_< gezi::EMutualInfoFunc >( "EMutualInfoFunc" )    
        .def( 
            "__call__"
            , (::Float ( ::gezi::EMutualInfoFunc::* )( int,int,int,long long unsigned int ) )( &::gezi::EMutualInfoFunc::operator() )
            , ( bp::arg("a00"), bp::arg("nterm1"), bp::arg("nterm2"), bp::arg("n") ) );

    bp::class_< gezi::EchoFunc >( "EchoFunc" )    
        .def( 
            "__call__"
            , (::Float ( ::gezi::EchoFunc::* )( int,int,int,::uint64 ) )( &::gezi::EchoFunc::operator() )
            , ( bp::arg("a"), bp::arg("n1"), bp::arg("n2"), bp::arg("n") ) );

    { //::gezi::Feature
        typedef bp::class_< gezi::Feature > Feature_exposer_t;
        Feature_exposer_t Feature_exposer = Feature_exposer_t( "Feature", bp::init< bp::optional< bool, int, bool, double > >(( bp::arg("sparse")=(bool)(false), bp::arg("dimension")=(int)(1000), bp::arg("use_section_name")=(bool)(true), bp::arg("zero_thre")=0.0 )) );
        bp::scope Feature_scope( Feature_exposer );
        { //::gezi::Feature::Node
            typedef bp::class_< gezi::Feature::Node > Node_exposer_t;
            Node_exposer_t Node_exposer = Node_exposer_t( "Node", bp::init< >() );
            bp::scope Node_scope( Node_exposer );
            Node_exposer.def( bp::init< int, double >(( bp::arg("index_"), bp::arg("value_") )) );
            Node_exposer.def( bp::init< int >(( bp::arg("index_") )) );
            bp::implicitly_convertible< int, gezi::Feature::Node >();
            Node_exposer.def_readwrite( "index", &gezi::Feature::Node::index );
            Node_exposer.def_readwrite( "value", &gezi::Feature::Node::value );
        }
        { //::gezi::Feature::add
        
            typedef void ( ::gezi::Feature::*add_function_type )( double,::std::string ) ;
            
            Feature_exposer.def( 
                "add"
                , add_function_type( &::gezi::Feature::add )
                , ( bp::arg("value"), bp::arg("name") ) );
        
        }
        { //::gezi::Feature::add
        
            typedef void ( ::gezi::Feature::*add_function_type )( double ) ;
            
            Feature_exposer.def( 
                "add"
                , add_function_type( &::gezi::Feature::add )
                , ( bp::arg("value") ) );
        
        }
        { //::gezi::Feature::add
        
            typedef void ( ::gezi::Feature::*add_function_type )( double *,int,::std::string const & ) ;
            
            Feature_exposer.def( 
                "add"
                , add_function_type( &::gezi::Feature::add )
                , ( bp::arg("values"), bp::arg("len"), bp::arg("name")="" ) );
        
        }
        { //::gezi::Feature::add
        
            typedef void ( ::gezi::Feature::*add_function_type )( int,double ) ;
            
            Feature_exposer.def( 
                "add"
                , add_function_type( &::gezi::Feature::add )
                , ( bp::arg("index"), bp::arg("value") ) );
        
        }
        { //::gezi::Feature::add_section
        
            typedef void ( ::gezi::Feature::*add_section_function_type )( ::std::string ) ;
            
            Feature_exposer.def( 
                "add_section"
                , add_section_function_type( &::gezi::Feature::add_section )
                , ( bp::arg("name") ) );
        
        }
        { //::gezi::Feature::at
        
            typedef double const ( ::gezi::Feature::*at_function_type )( int ) const;
            
            Feature_exposer.def( 
                "at"
                , at_function_type( &::gezi::Feature::at )
                , ( bp::arg("index") ) );
        
        }
        { //::gezi::Feature::cname_counts
        
            typedef ::std::vector< int > const & ( ::gezi::Feature::*cname_counts_function_type )(  ) const;
            
            Feature_exposer.def( 
                "cname_counts"
                , cname_counts_function_type( &::gezi::Feature::cname_counts )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::gezi::Feature::cnames
        
            typedef ::std::vector< std::string > const & ( ::gezi::Feature::*cnames_function_type )(  ) const;
            
            Feature_exposer.def( 
                "cnames"
                , cnames_function_type( &::gezi::Feature::cnames )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::gezi::Feature::cnodes
        
            typedef ::std::vector< gezi::Feature::Node > const & ( ::gezi::Feature::*cnodes_function_type )(  ) const;
            
            Feature_exposer.def( 
                "cnodes"
                , cnodes_function_type( &::gezi::Feature::cnodes )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::gezi::Feature::csection_names
        
            typedef ::std::vector< std::string > const & ( ::gezi::Feature::*csection_names_function_type )(  ) const;
            
            Feature_exposer.def( 
                "csection_names"
                , csection_names_function_type( &::gezi::Feature::csection_names )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::gezi::Feature::cvalues
        
            typedef ::std::vector< double > const & ( ::gezi::Feature::*cvalues_function_type )(  ) const;
            
            Feature_exposer.def( 
                "cvalues"
                , cvalues_function_type( &::gezi::Feature::cvalues )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::gezi::Feature::defaultMax
        
            typedef double ( *defaultMax_function_type )(  );
            
            Feature_exposer.def( 
                "defaultMax"
                , defaultMax_function_type( &::gezi::Feature::defaultMax ) );
        
        }
        { //::gezi::Feature::defaultMean
        
            typedef double ( *defaultMean_function_type )(  );
            
            Feature_exposer.def( 
                "defaultMean"
                , defaultMean_function_type( &::gezi::Feature::defaultMean ) );
        
        }
        { //::gezi::Feature::defaultMin
        
            typedef double ( *defaultMin_function_type )(  );
            
            Feature_exposer.def( 
                "defaultMin"
                , defaultMin_function_type( &::gezi::Feature::defaultMin ) );
        
        }
        { //::gezi::Feature::dimension
        
            typedef int ( ::gezi::Feature::*dimension_function_type )(  ) const;
            
            Feature_exposer.def( 
                "dimension"
                , dimension_function_type( &::gezi::Feature::dimension ) );
        
        }
        { //::gezi::Feature::dimension
        
            typedef ::gezi::Feature & ( ::gezi::Feature::*dimension_function_type )( int ) ;
            
            Feature_exposer.def( 
                "dimension"
                , dimension_function_type( &::gezi::Feature::dimension )
                , ( bp::arg("dimension") )
            , bp::return_internal_reference<>());
        
        }
        { //::gezi::Feature::empty
        
            typedef bool ( ::gezi::Feature::*empty_function_type )(  ) const;
            
            Feature_exposer.def( 
                "empty"
                , empty_function_type( &::gezi::Feature::empty ) );
        
        }
        { //::gezi::Feature::featureNum
        
            typedef int ( ::gezi::Feature::*featureNum_function_type )(  ) const;
            
            Feature_exposer.def( 
                "featureNum"
                , featureNum_function_type( &::gezi::Feature::featureNum ) );
        
        }
        { //::gezi::Feature::features
        
            typedef int ( ::gezi::Feature::*features_function_type )(  ) const;
            
            Feature_exposer.def( 
                "features"
                , features_function_type( &::gezi::Feature::features ) );
        
        }
        { //::gezi::Feature::finalize
        
            typedef void ( ::gezi::Feature::*finalize_function_type )(  ) ;
            
            Feature_exposer.def( 
                "finalize"
                , finalize_function_type( &::gezi::Feature::finalize ) );
        
        }
        { //::gezi::Feature::name_counts
        
            typedef ::std::vector< int > & ( ::gezi::Feature::*name_counts_function_type )(  ) ;
            
            Feature_exposer.def( 
                "name_counts"
                , name_counts_function_type( &::gezi::Feature::name_counts )
            , bp::return_internal_reference<>());
        
        }
        { //::gezi::Feature::names
        
            typedef ::std::vector< std::string > & ( ::gezi::Feature::*names_function_type )(  ) ;
            
            Feature_exposer.def( 
                "names"
                , names_function_type( &::gezi::Feature::names )
            , bp::return_internal_reference<>());
        
        }
        { //::gezi::Feature::nodes
        
            typedef ::std::vector< gezi::Feature::Node > & ( ::gezi::Feature::*nodes_function_type )(  ) ;
            
            Feature_exposer.def( 
                "nodes"
                , nodes_function_type( &::gezi::Feature::nodes )
            , bp::return_internal_reference<>());
        
        }
        { //::gezi::Feature::operator[]
        
            typedef double const ( ::gezi::Feature::*__getitem___function_type )( int ) const;
            
            Feature_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::gezi::Feature::operator[] )
                , ( bp::arg("index") ) );
        
        }
        { //::gezi::Feature::section_names
        
            typedef ::std::vector< std::string > & ( ::gezi::Feature::*section_names_function_type )(  ) ;
            
            Feature_exposer.def( 
                "section_names"
                , section_names_function_type( &::gezi::Feature::section_names )
            , bp::return_internal_reference<>());
        
        }
        { //::gezi::Feature::set
        
            typedef void ( ::gezi::Feature::*set_function_type )( int,double ) ;
            
            Feature_exposer.def( 
                "set"
                , set_function_type( &::gezi::Feature::set )
                , ( bp::arg("index"), bp::arg("value") ) );
        
        }
        { //::gezi::Feature::set_dimension
        
            typedef void ( ::gezi::Feature::*set_dimension_function_type )( int ) ;
            
            Feature_exposer.def( 
                "set_dimension"
                , set_dimension_function_type( &::gezi::Feature::set_dimension )
                , ( bp::arg("dimension") ) );
        
        }
        { //::gezi::Feature::size
        
            typedef int ( ::gezi::Feature::*size_function_type )(  ) const;
            
            Feature_exposer.def( 
                "size"
                , size_function_type( &::gezi::Feature::size ) );
        
        }
        { //::gezi::Feature::sparse
        
            typedef bool ( ::gezi::Feature::*sparse_function_type )(  ) const;
            
            Feature_exposer.def( 
                "sparse"
                , sparse_function_type( &::gezi::Feature::sparse ) );
        
        }
        { //::gezi::Feature::sparse
        
            typedef ::gezi::Feature & ( ::gezi::Feature::*sparse_function_type )( bool ) ;
            
            Feature_exposer.def( 
                "sparse"
                , sparse_function_type( &::gezi::Feature::sparse )
                , ( bp::arg("sparse_") )
            , bp::return_internal_reference<>());
        
        }
        { //::gezi::Feature::str
        
            typedef ::std::string ( ::gezi::Feature::*str_function_type )(  ) ;
            
            Feature_exposer.def( 
                "str"
                , str_function_type( &::gezi::Feature::str ) );
        
        }
        { //::gezi::Feature::to_dense
        
            typedef void ( ::gezi::Feature::*to_dense_function_type )(  ) ;
            
            Feature_exposer.def( 
                "to_dense"
                , to_dense_function_type( &::gezi::Feature::to_dense ) );
        
        }
        { //::gezi::Feature::value
        
            typedef double const ( ::gezi::Feature::*value_function_type )( int ) const;
            
            Feature_exposer.def( 
                "value"
                , value_function_type( &::gezi::Feature::value )
                , ( bp::arg("index") ) );
        
        }
        { //::gezi::Feature::valueAt
        
            typedef double const ( ::gezi::Feature::*valueAt_function_type )( int ) const;
            
            Feature_exposer.def( 
                "valueAt"
                , valueAt_function_type( &::gezi::Feature::valueAt )
                , ( bp::arg("index") ) );
        
        }
        { //::gezi::Feature::values
        
            typedef ::std::vector< double > & ( ::gezi::Feature::*values_function_type )(  ) ;
            
            Feature_exposer.def( 
                "values"
                , values_function_type( &::gezi::Feature::values )
            , bp::return_internal_reference<>());
        
        }
        Feature_exposer.staticmethod( "defaultMax" );
        Feature_exposer.staticmethod( "defaultMean" );
        Feature_exposer.staticmethod( "defaultMin" );
    }

    { //::gezi::FeatureSelector
        typedef bp::class_< gezi::FeatureSelector > FeatureSelector_exposer_t;
        FeatureSelector_exposer_t FeatureSelector_exposer = FeatureSelector_exposer_t( "FeatureSelector", bp::init< >() );
        bp::scope FeatureSelector_scope( FeatureSelector_exposer );
        bp::enum_< gezi::FeatureSelector::Strategy>("Strategy")
            .value("MAX", gezi::FeatureSelector::MAX)
            .value("AVG", gezi::FeatureSelector::AVG)
            .value("SUM", gezi::FeatureSelector::SUM)
            .export_values()
            ;
        { //::gezi::FeatureSelector::add
        
            typedef void ( ::gezi::FeatureSelector::*add_function_type )( ::std::vector< std::string > const &,int ) ;
            
            FeatureSelector_exposer.def( 
                "add"
                , add_function_type( &::gezi::FeatureSelector::add )
                , ( bp::arg("words"), bp::arg("label") ) );
        
        }
        { //::gezi::FeatureSelector::add
        
            typedef void ( ::gezi::FeatureSelector::*add_function_type )( ::std::string,int,::std::string ) ;
            
            FeatureSelector_exposer.def( 
                "add"
                , add_function_type( &::gezi::FeatureSelector::add )
                , ( bp::arg("doc"), bp::arg("label"), bp::arg("sep")="\011" ) );
        
        }
        { //::gezi::FeatureSelector::calc
        
            typedef ::gezi::DMat & ( ::gezi::FeatureSelector::*calc_function_type )(  ) ;
            
            FeatureSelector_exposer.def( 
                "calc"
                , calc_function_type( &::gezi::FeatureSelector::calc )
            , bp::return_internal_reference<>());
        
        }
        { //::gezi::FeatureSelector::clear
        
            typedef void ( ::gezi::FeatureSelector::*clear_function_type )(  ) ;
            
            FeatureSelector_exposer.def( 
                "clear"
                , clear_function_type( &::gezi::FeatureSelector::clear ) );
        
        }
        { //::gezi::FeatureSelector::clearScore
        
            typedef void ( ::gezi::FeatureSelector::*clearScore_function_type )(  ) ;
            
            FeatureSelector_exposer.def( 
                "clearScore"
                , clearScore_function_type( &::gezi::FeatureSelector::clearScore ) );
        
        }
        { //::gezi::FeatureSelector::featureNum
        
            typedef int ( ::gezi::FeatureSelector::*featureNum_function_type )(  ) ;
            
            FeatureSelector_exposer.def( 
                "featureNum"
                , featureNum_function_type( &::gezi::FeatureSelector::featureNum ) );
        
        }
        { //::gezi::FeatureSelector::init
        
            typedef void ( ::gezi::FeatureSelector::*init_function_type )(  ) ;
            
            FeatureSelector_exposer.def( 
                "init"
                , init_function_type( &::gezi::FeatureSelector::init ) );
        
        }
        { //::gezi::FeatureSelector::initFunc
        
            typedef void ( ::gezi::FeatureSelector::*initFunc_function_type )(  ) ;
            
            FeatureSelector_exposer.def( 
                "initFunc"
                , initFunc_function_type( &::gezi::FeatureSelector::initFunc ) );
        
        }
        { //::gezi::FeatureSelector::instanceNum
        
            typedef ::int64 ( ::gezi::FeatureSelector::*instanceNum_function_type )(  ) ;
            
            FeatureSelector_exposer.def( 
                "instanceNum"
                , instanceNum_function_type( &::gezi::FeatureSelector::instanceNum ) );
        
        }
        { //::gezi::FeatureSelector::labelNum
        
            typedef int ( ::gezi::FeatureSelector::*labelNum_function_type )(  ) ;
            
            FeatureSelector_exposer.def( 
                "labelNum"
                , labelNum_function_type( &::gezi::FeatureSelector::labelNum ) );
        
        }
        { //::gezi::FeatureSelector::labelNum
        
            typedef ::gezi::FeatureSelector & ( ::gezi::FeatureSelector::*labelNum_function_type )( int ) ;
            
            FeatureSelector_exposer.def( 
                "labelNum"
                , labelNum_function_type( &::gezi::FeatureSelector::labelNum )
                , ( bp::arg("labelNum") )
            , bp::return_internal_reference<>());
        
        }
        { //::gezi::FeatureSelector::method
        
            typedef int ( ::gezi::FeatureSelector::*method_function_type )(  ) ;
            
            FeatureSelector_exposer.def( 
                "method"
                , method_function_type( &::gezi::FeatureSelector::method ) );
        
        }
        { //::gezi::FeatureSelector::method
        
            typedef ::gezi::FeatureSelector & ( ::gezi::FeatureSelector::*method_function_type )( ::gezi::collocation::Method ) ;
            
            FeatureSelector_exposer.def( 
                "method"
                , method_function_type( &::gezi::FeatureSelector::method )
                , ( bp::arg("method") )
            , bp::return_internal_reference<>());
        
        }
        { //::gezi::FeatureSelector::minSupport
        
            typedef int ( ::gezi::FeatureSelector::*minSupport_function_type )(  ) ;
            
            FeatureSelector_exposer.def( 
                "minSupport"
                , minSupport_function_type( &::gezi::FeatureSelector::minSupport ) );
        
        }
        { //::gezi::FeatureSelector::minSupport
        
            typedef ::gezi::FeatureSelector & ( ::gezi::FeatureSelector::*minSupport_function_type )( int ) ;
            
            FeatureSelector_exposer.def( 
                "minSupport"
                , minSupport_function_type( &::gezi::FeatureSelector::minSupport )
                , ( bp::arg("minSupport") )
            , bp::return_internal_reference<>());
        
        }
        { //::gezi::FeatureSelector::save
        
            typedef void ( ::gezi::FeatureSelector::*save_function_type )( ::std::string,int,int ) ;
            
            FeatureSelector_exposer.def( 
                "save"
                , save_function_type( &::gezi::FeatureSelector::save )
                , ( bp::arg("file"), bp::arg("idx")=(int)(-0x00000000000000001), bp::arg("maxFeatureNum")=(int)(-0x00000000000000001) ) );
        
        }
        { //::gezi::FeatureSelector::save
        
            typedef void ( ::gezi::FeatureSelector::*save_function_type )( ::std::ostream &,int,int ) ;
            
            FeatureSelector_exposer.def( 
                "save"
                , save_function_type( &::gezi::FeatureSelector::save )
                , ( bp::arg("os"), bp::arg("maxFeatureNum"), bp::arg("idx") ) );
        
        }
        { //::gezi::FeatureSelector::saveAll
        
            typedef void ( ::gezi::FeatureSelector::*saveAll_function_type )( ::std::string ) ;
            
            FeatureSelector_exposer.def( 
                "saveAll"
                , saveAll_function_type( &::gezi::FeatureSelector::saveAll )
                , ( bp::arg("dir")="result" ) );
        
        }
        { //::gezi::FeatureSelector::saveIdf
        
            typedef void ( ::gezi::FeatureSelector::*saveIdf_function_type )( ::std::string ) ;
            
            FeatureSelector_exposer.def( 
                "saveIdf"
                , saveIdf_function_type( &::gezi::FeatureSelector::saveIdf )
                , ( bp::arg("file") ) );
        
        }
        { //::gezi::FeatureSelector::show
        
            typedef void ( ::gezi::FeatureSelector::*show_function_type )( int,int ) ;
            
            FeatureSelector_exposer.def( 
                "show"
                , show_function_type( &::gezi::FeatureSelector::show )
                , ( bp::arg("maxFeatureNum")=(int)(1024), bp::arg("idx")=(int)(-0x00000000000000001) ) );
        
        }
        { //::gezi::FeatureSelector::strategy
        
            typedef int ( ::gezi::FeatureSelector::*strategy_function_type )(  ) ;
            
            FeatureSelector_exposer.def( 
                "strategy"
                , strategy_function_type( &::gezi::FeatureSelector::strategy ) );
        
        }
        { //::gezi::FeatureSelector::strategy
        
            typedef ::gezi::FeatureSelector & ( ::gezi::FeatureSelector::*strategy_function_type )( ::gezi::FeatureSelector::Strategy ) ;
            
            FeatureSelector_exposer.def( 
                "strategy"
                , strategy_function_type( &::gezi::FeatureSelector::strategy )
                , ( bp::arg("strategy") )
            , bp::return_internal_reference<>());
        
        }
    }

    bp::class_< gezi::Identifer >( "Identifer" )    
        .def( 
            "add"
            , (int ( ::gezi::Identifer::* )( ::std::string const & ) )( &::gezi::Identifer::add )
            , ( bp::arg("f") ) )    
        .def( 
            "add"
            , (int ( ::gezi::Identifer::* )( ::std::string const &,bool & ) )( &::gezi::Identifer::add )
            , ( bp::arg("f"), bp::arg("isnew") ) )    
        .def( 
            "add_unique"
            , (int ( ::gezi::Identifer::* )( ::std::string const & ) )( &::gezi::Identifer::add_unique )
            , ( bp::arg("f") ) )    
        .def( 
            "begin"
            , (::__gnu_cxx::__normal_iterator< std::string*, std::vector< std::string > > ( ::gezi::Identifer::* )(  ) )( &::gezi::Identifer::begin ) )    
        .def( 
            "begin"
            , (::__gnu_cxx::__normal_iterator< std::string const*, std::vector< std::string > > ( ::gezi::Identifer::* )(  ) const)( &::gezi::Identifer::begin ) )    
        .def( 
            "clear"
            , (void ( ::gezi::Identifer::* )(  ) )( &::gezi::Identifer::clear ) )    
        .def( 
            "empty"
            , (bool ( ::gezi::Identifer::* )(  ) const)( &::gezi::Identifer::empty ) )    
        .def( 
            "end"
            , (::__gnu_cxx::__normal_iterator< std::string*, std::vector< std::string > > ( ::gezi::Identifer::* )(  ) )( &::gezi::Identifer::end ) )    
        .def( 
            "end"
            , (::__gnu_cxx::__normal_iterator< std::string const*, std::vector< std::string > > ( ::gezi::Identifer::* )(  ) const)( &::gezi::Identifer::end ) )    
        .def( 
            "has"
            , (bool ( ::gezi::Identifer::* )( ::std::string const & ) const)( &::gezi::Identifer::has )
            , ( bp::arg("f") ) )    
        .def( 
            "id"
            , (int ( ::gezi::Identifer::* )( ::std::string const & ) const)( &::gezi::Identifer::id )
            , ( bp::arg("f") ) )    
        .def( 
            "key"
            , (::std::string const & ( ::gezi::Identifer::* )( int ) const)( &::gezi::Identifer::key )
            , ( bp::arg("id") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "last"
            , (::std::string ( ::gezi::Identifer::* )(  ) )( &::gezi::Identifer::last ) )    
        .def( 
            "load"
            , (bool ( ::gezi::Identifer::* )( ::std::string const &,::std::string ) )( &::gezi::Identifer::load )
            , ( bp::arg("file"), bp::arg("sep")="\011" ) )    
        .def( 
            "null_id"
            , (int const (*)(  ))( &::gezi::Identifer::null_id ) )    
        .def( 
            "__call__"
            , (int const & ( ::gezi::Identifer::* )( ::std::string ) const)( &::gezi::Identifer::operator() )
            , ( bp::arg("key") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "__getitem__"
            , (::std::string const & ( ::gezi::Identifer::* )( int ) const)( &::gezi::Identifer::operator[] )
            , ( bp::arg("id") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "save"
            , (void ( ::gezi::Identifer::* )( ::std::string const & ) )( &::gezi::Identifer::save )
            , ( bp::arg("file") ) )    
        .def( 
            "size"
            , (::size_t ( ::gezi::Identifer::* )(  ) const)( &::gezi::Identifer::size ) )    
        .def( 
            "words"
            , (::std::vector< std::string > & ( ::gezi::Identifer::* )(  ) )( &::gezi::Identifer::words )
            , bp::return_internal_reference<>())
        .staticmethod( "null_id" );

    bp::class_< gezi::Idf >( "Idf", bp::init< >() )    
        .def( 
            "add"
            , (void ( ::gezi::Idf::* )( ::std::string,::std::string ) )( &::gezi::Idf::add )
            , ( bp::arg("doc"), bp::arg("sep")="\011" ) )    
        .def( 
            "add"
            , (void ( ::gezi::Idf::* )( ::std::vector< std::string > const & ) )( &::gezi::Idf::add )
            , ( bp::arg("words") ) )    
        .def( 
            "save"
            , (void ( ::gezi::Idf::* )( ::std::string const & ) )( &::gezi::Idf::save )
            , ( bp::arg("file") ) )    
        .def( 
            "show"
            , (void ( ::gezi::Idf::* )( int ) )( &::gezi::Idf::show )
            , ( bp::arg("maxNum")=(int)(1024) ) );

    { //::gezi::Linear
        typedef bp::class_< gezi::Linear > Linear_exposer_t;
        Linear_exposer_t Linear_exposer = Linear_exposer_t( "Linear", bp::init< >() );
        bp::scope Linear_scope( Linear_exposer );
        Linear_exposer.def( bp::init< std::string const & >(( bp::arg("modelPath") )) );
        bp::implicitly_convertible< std::string const &, gezi::Linear >();
        { //::gezi::Linear::Predict
        
            typedef double ( ::gezi::Linear::*Predict_function_type )( ::gezi::Feature & ) ;
            
            Linear_exposer.def( 
                "Predict"
                , Predict_function_type( &::gezi::Linear::Predict )
                , ( bp::arg("feature") ) );
        
        }
        { //::gezi::Linear::load
        
            typedef void ( ::gezi::Linear::*load_function_type )( ::std::string const & ) ;
            
            Linear_exposer.def( 
                "load"
                , load_function_type( &::gezi::Linear::load )
                , ( bp::arg("modelPath") ) );
        
        }
        { //::gezi::Linear::output
        
            typedef double ( ::gezi::Linear::*output_function_type )( ::gezi::Feature & ) ;
            
            Linear_exposer.def( 
                "output"
                , output_function_type( &::gezi::Linear::output )
                , ( bp::arg("feature") ) );
        
        }
    }

    bp::class_< gezi::LogEChiSquareFunc >( "LogEChiSquareFunc" )    
        .def( 
            "__call__"
            , (::Float ( ::gezi::LogEChiSquareFunc::* )( int,int,int,long long unsigned int ) )( &::gezi::LogEChiSquareFunc::operator() )
            , ( bp::arg("a00"), bp::arg("nterm1"), bp::arg("nterm2"), bp::arg("n") ) );

    { //::gezi::LogHelper
        typedef bp::class_< gezi::LogHelper > LogHelper_exposer_t;
        LogHelper_exposer_t LogHelper_exposer = LogHelper_exposer_t( "LogHelper", bp::init< bp::optional< int > >(( bp::arg("log_level")=(int)(16) )) );
        bp::scope LogHelper_scope( LogHelper_exposer );
        bp::implicitly_convertible< int, gezi::LogHelper >();
        LogHelper_exposer.def( bp::init< bool >(( bp::arg("with_conf") )) );
        bp::implicitly_convertible< bool, gezi::LogHelper >();
        LogHelper_exposer.def( bp::init< std::string const &, std::string const & >(( bp::arg("conf_path"), bp::arg("conf_file") )) );
        { //::gezi::LogHelper::set_level
        
            typedef void ( *set_level_function_type )( int );
            
            LogHelper_exposer.def( 
                "set_level"
                , set_level_function_type( &::gezi::LogHelper::set_level )
                , ( bp::arg("log_level") ) );
        
        }
        LogHelper_exposer.staticmethod( "set_level" );
    }

    bp::class_< gezi::Pinyin >( "Pinyin" )    
        .def( 
            "Convert"
            , (::std::string ( ::gezi::Pinyin::* )( ::std::string const & ) )( &::gezi::Pinyin::Convert )
            , ( bp::arg("input") ) )    
        .def( 
            "Load"
            , (void ( ::gezi::Pinyin::* )( ::std::string const & ) )( &::gezi::Pinyin::Load )
            , ( bp::arg("dictPath") ) );

    bp::class_< gezi::PointMutualInfoFunc >( "PointMutualInfoFunc" )    
        .def( 
            "__call__"
            , (::Float ( ::gezi::PointMutualInfoFunc::* )( int,int,int,::uint64 ) )( &::gezi::PointMutualInfoFunc::operator() )
            , ( bp::arg("a"), bp::arg("n1"), bp::arg("n2"), bp::arg("n") ) );

    bp::class_< gezi::ValueIdentifer< double >, bp::bases< gezi::Identifer > >( "DoubleIdentifer" )    
        .def( 
            "get_value"
            , (double ( ::gezi::ValueIdentifer<double>::* )( ::std::string ) )( &::gezi::ValueIdentifer< double >::get_value )
            , ( bp::arg("key") ) )    
        .def( 
            "load"
            , (bool ( ::gezi::ValueIdentifer<double>::* )( ::std::string const &,int,::std::string ) )( &::gezi::ValueIdentifer< double >::load )
            , ( bp::arg("file"), bp::arg("index")=(int)(1), bp::arg("sep")="\011" ) )    
        .def( 
            "value"
            , (double ( ::gezi::ValueIdentifer<double>::* )( int ) )( &::gezi::ValueIdentifer< double >::value )
            , ( bp::arg("index") ) );

    bp::class_< gezi::PyDoubleIdentifer, bp::bases< gezi::ValueIdentifer< double > > >( "PyDoubleIdentifer" );

    bp::class_< gezi::ValueIdentifer< int >, bp::bases< gezi::Identifer > >( "IntIdentifer" )    
        .def( 
            "get_value"
            , (int ( ::gezi::ValueIdentifer<int>::* )( ::std::string ) )( &::gezi::ValueIdentifer< int >::get_value )
            , ( bp::arg("key") ) )    
        .def( 
            "load"
            , (bool ( ::gezi::ValueIdentifer<int>::* )( ::std::string const &,int,::std::string ) )( &::gezi::ValueIdentifer< int >::load )
            , ( bp::arg("file"), bp::arg("index")=(int)(1), bp::arg("sep")="\011" ) )    
        .def( 
            "value"
            , (int ( ::gezi::ValueIdentifer<int>::* )( int ) )( &::gezi::ValueIdentifer< int >::value )
            , ( bp::arg("index") ) );

    bp::class_< gezi::PyIntIndentifer, bp::bases< gezi::ValueIdentifer< int > > >( "PyIntIndentifer" );

    bp::class_< gezi::TTestFunc >( "TTestFunc" )    
        .def( 
            "__call__"
            , (::Float ( ::gezi::TTestFunc::* )( int,int,int,long long unsigned int ) )( &::gezi::TTestFunc::operator() )
            , ( bp::arg("a00"), bp::arg("nterm1"), bp::arg("nterm2"), bp::arg("n") ) );

    bp::class_< gezi::ThreadLogHelper >( "ThreadLogHelper", bp::init< >() );

    { //::gezi::all_en
    
        typedef bool ( *all_en_function_type )( ::std::string const & );
        
        bp::def( 
            "all_en"
            , all_en_function_type( &::gezi::all_en )
            , ( bp::arg("phrase") ) );
    
    }

    { //::gezi::chi_square
    
        typedef ::Float ( *chi_square_function_type )( int,int,int,::uint64 );
        
        bp::def( 
            "chi_square"
            , chi_square_function_type( &::gezi::chi_square )
            , ( bp::arg("a"), bp::arg("n1"), bp::arg("n2"), bp::arg("total") ) );
    
    }

    { //::gezi::contains
    
        typedef bool ( *contains_function_type )( ::std::string,::std::string );
        
        bp::def( 
            "contains"
            , contains_function_type( &::gezi::contains )
            , ( bp::arg("input"), bp::arg("part") ) );
    
    }

    { //::gezi::cross_entropy
    
        typedef ::Float ( *cross_entropy_function_type )( int,int,int,::uint64 );
        
        bp::def( 
            "cross_entropy"
            , cross_entropy_function_type( &::gezi::cross_entropy )
            , ( bp::arg("nfc"), bp::arg("nf"), bp::arg("nc"), bp::arg("n") ) );
    
    }

    { //::gezi::endswith
    
        typedef bool ( *endswith_function_type )( ::std::string,::std::string );
        
        bp::def( 
            "endswith"
            , endswith_function_type( &::gezi::endswith )
            , ( bp::arg("input"), bp::arg("part") ) );
    
    }

    { //::gezi::erase
    
        typedef ::std::string ( *erase_function_type )( ::std::string,::std::string );
        
        bp::def( 
            "erase"
            , erase_function_type( &::gezi::erase )
            , ( bp::arg("content"), bp::arg("chars") ) );
    
    }

    { //::gezi::extract_chinese
    
        typedef ::std::string ( *extract_chinese_function_type )( ::std::string & );
        
        bp::def( 
            "extract_chinese"
            , extract_chinese_function_type( &::gezi::extract_chinese )
            , ( bp::arg("temp") ) );
    
    }

    { //::gezi::extract_chinese
    
        typedef ::std::string ( *extract_chinese_function_type )( ::std::string const & );
        
        bp::def( 
            "extract_chinese"
            , extract_chinese_function_type( &::gezi::extract_chinese )
            , ( bp::arg("temp") ) );
    
    }

    { //::gezi::extract_suspect_symb
    
        typedef ::std::string ( *extract_suspect_symb_function_type )( ::std::string const & );
        
        bp::def( 
            "extract_suspect_symb"
            , extract_suspect_symb_function_type( &::gezi::extract_suspect_symb )
            , ( bp::arg("temp") ) );
    
    }

    { //::gezi::filter_str
    
        typedef ::std::string ( *filter_str_function_type )( ::std::string const & );
        
        bp::def( 
            "filter_str"
            , filter_str_function_type( &::gezi::filter_str )
            , ( bp::arg("temp") ) );
    
    }

    { //::gezi::gbk2utf8
    
        typedef ::std::string ( *gbk2utf8_function_type )( ::std::string const &,int );
        
        bp::def( 
            "gbk2utf8"
            , gbk2utf8_function_type( &::gezi::gbk2utf8 )
            , ( bp::arg("src"), bp::arg("flags")=int(::UCONV_INVCHAR_IGNORE) ) );
    
    }

    { //::gezi::gbk_substr
    
        typedef ::std::string ( *gbk_substr_function_type )( ::std::string const &,int,::size_t );
        
        bp::def( 
            "gbk_substr"
            , gbk_substr_function_type( &::gezi::gbk_substr )
            , ( bp::arg("input"), bp::arg("start_"), bp::arg("len")=(long unsigned int)(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) ) );
    
    }

    { //::gezi::gbk_to_utf8
    
        typedef ::std::string ( *gbk_to_utf8_function_type )( ::std::string const &,int );
        
        bp::def( 
            "gbk_to_utf8"
            , gbk_to_utf8_function_type( &::gezi::gbk_to_utf8 )
            , ( bp::arg("src"), bp::arg("flags")=int(::UCONV_INVCHAR_IGNORE) ) );
    
    }

    { //::gezi::get_real_title
    
        typedef ::std::string ( *get_real_title_function_type )( ::std::string );
        
        bp::def( 
            "get_real_title"
            , get_real_title_function_type( &::gezi::get_real_title )
            , ( bp::arg("title") ) );
    
    }

    { //::gezi::information_gain
    
        typedef ::Float ( *information_gain_function_type )( int,int,int,::uint64 );
        
        bp::def( 
            "information_gain"
            , information_gain_function_type( &::gezi::information_gain )
            , ( bp::arg("nfc"), bp::arg("nf"), bp::arg("nc"), bp::arg("n") ) );
    
    }

    { //::gezi::is_alpha_only
    
        typedef bool ( *is_alpha_only_function_type )( ::std::string const & );
        
        bp::def( 
            "is_alpha_only"
            , is_alpha_only_function_type( &::gezi::is_alpha_only )
            , ( bp::arg("input") ) );
    
    }

    { //::gezi::is_en_dominate
    
        typedef bool ( *is_en_dominate_function_type )( ::std::string const &,int );
        
        bp::def( 
            "is_en_dominate"
            , is_en_dominate_function_type( &::gezi::is_en_dominate )
            , ( bp::arg("phrase"), bp::arg("var")=(int)(3) ) );
    
    }

    { //::gezi::is_gb2312
    
        typedef bool ( *is_gb2312_function_type )( unsigned char,unsigned char );
        
        bp::def( 
            "is_gb2312"
            , is_gb2312_function_type( &::gezi::is_gb2312 )
            , ( bp::arg("ch1"), bp::arg("ch2") ) );
    
    }

    { //::gezi::is_gbk_ch
    
        typedef bool ( *is_gbk_ch_function_type )( ::std::string const & );
        
        bp::def( 
            "is_gbk_ch"
            , is_gbk_ch_function_type( &::gezi::is_gbk_ch )
            , ( bp::arg("phrase") ) );
    
    }

    { //::gezi::is_gbk_ch
    
        typedef bool ( *is_gbk_ch_function_type )( unsigned char,unsigned char );
        
        bp::def( 
            "is_gbk_ch"
            , is_gbk_ch_function_type( &::gezi::is_gbk_ch )
            , ( bp::arg("ch1"), bp::arg("ch2") ) );
    
    }

    { //::gezi::is_thread
    
        typedef bool ( *is_thread_function_type )( ::std::string );
        
        bp::def( 
            "is_thread"
            , is_thread_function_type( &::gezi::is_thread )
            , ( bp::arg("title") ) );
    
    }

    { //::gezi::max
    
        typedef ::std::string ( *max_function_type )( ::std::string,int );
        
        bp::def( 
            "max"
            , max_function_type( &::gezi::max )
            , ( bp::arg("input"), bp::arg("length") ) );
    
    }

    { //::gezi::mutual_info
    
        typedef ::Float ( *mutual_info_function_type )( int,int,int,::uint64 );
        
        bp::def( 
            "mutual_info"
            , mutual_info_function_type( &::gezi::mutual_info )
            , ( bp::arg("nfc"), bp::arg("nf"), bp::arg("nc"), bp::arg("n") ) );
    
    }

    { //::gezi::mutual_info2
    
        typedef ::Float ( *mutual_info2_function_type )( int,int,int,::uint64 );
        
        bp::def( 
            "mutual_info2"
            , mutual_info2_function_type( &::gezi::mutual_info2 )
            , ( bp::arg("nfc"), bp::arg("nf"), bp::arg("nc"), bp::arg("n") ) );
    
    }

    { //::gezi::normalize_str
    
        typedef ::std::string ( *normalize_str_function_type )( ::std::string const & );
        
        bp::def( 
            "normalize_str"
            , normalize_str_function_type( &::gezi::normalize_str )
            , ( bp::arg("input") ) );
    
    }

    { //::gezi::point_mutual_info
    
        typedef ::Float ( *point_mutual_info_function_type )( int,int,int,::uint64 );
        
        bp::def( 
            "point_mutual_info"
            , point_mutual_info_function_type( &::gezi::point_mutual_info )
            , ( bp::arg("a"), bp::arg("n1"), bp::arg("n2"), bp::arg("n") ) );
    
    }

    { //::gezi::reg_find
    
        typedef bool ( *reg_find_function_type )( ::std::string const &,::std::string const & );
        
        bp::def( 
            "reg_find"
            , reg_find_function_type( &::gezi::reg_find )
            , ( bp::arg("content"), bp::arg("pattern") ) );
    
    }

    { //::gezi::reg_remove
    
        typedef ::std::wstring ( *reg_remove_function_type )( ::std::wstring const &,::std::wstring const & );
        
        bp::def( 
            "reg_remove"
            , reg_remove_function_type( &::gezi::reg_remove )
            , ( bp::arg("input"), bp::arg("pattern") ) );
    
    }

    { //::gezi::reg_remove
    
        typedef ::std::string ( *reg_remove_function_type )( ::std::string const &,::std::string const & );
        
        bp::def( 
            "reg_remove"
            , reg_remove_function_type( &::gezi::reg_remove )
            , ( bp::arg("input"), bp::arg("pattern") ) );
    
    }

    { //::gezi::reg_replace
    
        typedef ::std::wstring ( *reg_replace_function_type )( ::std::wstring const &,::std::wstring const &,::std::wstring const & );
        
        bp::def( 
            "reg_replace"
            , reg_replace_function_type( &::gezi::reg_replace )
            , ( bp::arg("input"), bp::arg("pattern"), bp::arg("replacement")="\000\000\000" ) );
    
    }

    { //::gezi::reg_replace
    
        typedef ::std::string ( *reg_replace_function_type )( ::std::string const &,::std::string const &,::std::string const & );
        
        bp::def( 
            "reg_replace"
            , reg_replace_function_type( &::gezi::reg_replace )
            , ( bp::arg("input"), bp::arg("pattern"), bp::arg("replacement")="" ) );
    
    }

    { //::gezi::ufo::reg_search
    
        typedef ::std::vector< std::wstring > ( *reg_search_function_type )( ::std::wstring const &,::boost::wregex &,int );
        
        bp::def( 
            "reg_search"
            , reg_search_function_type( &::gezi::ufo::reg_search )
            , ( bp::arg("content"), bp::arg("reg"), bp::arg("index")=(int)(1) ) );
    
    }

    { //::gezi::ufo::reg_search
    
        typedef ::std::vector< std::string > ( *reg_search_function_type )( ::std::string const &,::std::string const &,int );
        
        bp::def( 
            "reg_search"
            , reg_search_function_type( &::gezi::ufo::reg_search )
            , ( bp::arg("content"), bp::arg("pattern"), bp::arg("index")=(int)(1) ) );
    
    }

    { //::gezi::ufo::reg_search
    
        typedef ::std::vector< std::string > ( *reg_search_function_type )( ::std::string const &,::boost::regex &,int );
        
        bp::def( 
            "reg_search"
            , reg_search_function_type( &::gezi::ufo::reg_search )
            , ( bp::arg("content"), bp::arg("reg"), bp::arg("index")=(int)(1) ) );
    
    }

    { //::gezi::reg_search
    
        typedef void ( *reg_search_function_type )( ::std::wstring const &,::std::wstring const &,::std::vector< std::wstring > &,int );
        
        bp::def( 
            "reg_search"
            , reg_search_function_type( &::gezi::reg_search )
            , ( bp::arg("content"), bp::arg("pattern"), bp::arg("result"), bp::arg("index")=(int)(1) ) );
    
    }

    { //::gezi::reg_search
    
        typedef ::std::wstring ( *reg_search_function_type )( ::std::wstring const &,::std::wstring const &,int );
        
        bp::def( 
            "reg_search"
            , reg_search_function_type( &::gezi::reg_search )
            , ( bp::arg("content"), bp::arg("pattern"), bp::arg("index")=(int)(1) ) );
    
    }

    { //::gezi::reg_search
    
        typedef void ( *reg_search_function_type )( ::std::string const &,::std::string const &,::std::vector< std::string > &,int );
        
        bp::def( 
            "reg_search"
            , reg_search_function_type( &::gezi::reg_search )
            , ( bp::arg("content"), bp::arg("pattern"), bp::arg("result"), bp::arg("index")=(int)(1) ) );
    
    }

    { //::gezi::reg_search
    
        typedef ::std::string ( *reg_search_function_type )( ::std::string const &,::std::string const &,int );
        
        bp::def( 
            "reg_search"
            , reg_search_function_type( &::gezi::reg_search )
            , ( bp::arg("content"), bp::arg("pattern"), bp::arg("index")=(int)(1) ) );
    
    }

    { //::gezi::reg_search
    
        typedef void ( *reg_search_function_type )( ::std::wstring const &,::boost::wregex &,::std::vector< std::wstring > &,int );
        
        bp::def( 
            "reg_search"
            , reg_search_function_type( &::gezi::reg_search )
            , ( bp::arg("content"), bp::arg("reg"), bp::arg("result"), bp::arg("index")=(int)(1) ) );
    
    }

    { //::gezi::reg_search
    
        typedef ::std::wstring ( *reg_search_function_type )( ::std::wstring const &,::boost::wregex &,int );
        
        bp::def( 
            "reg_search"
            , reg_search_function_type( &::gezi::reg_search )
            , ( bp::arg("content"), bp::arg("reg"), bp::arg("index")=(int)(1) ) );
    
    }

    { //::gezi::reg_search
    
        typedef void ( *reg_search_function_type )( ::std::string const &,::boost::regex &,::std::vector< std::string > &,int );
        
        bp::def( 
            "reg_search"
            , reg_search_function_type( &::gezi::reg_search )
            , ( bp::arg("content"), bp::arg("reg"), bp::arg("result"), bp::arg("index")=(int)(1) ) );
    
    }

    { //::gezi::reg_search
    
        typedef ::std::string ( *reg_search_function_type )( ::std::string const &,::boost::regex &,int );
        
        bp::def( 
            "reg_search"
            , reg_search_function_type( &::gezi::reg_search )
            , ( bp::arg("content"), bp::arg("reg"), bp::arg("index")=(int)(1) ) );
    
    }

    { //::gezi::reg_split
    
        typedef ::std::vector< std::wstring > ( *reg_split_function_type )( ::std::wstring const &,::std::wstring const & );
        
        bp::def( 
            "reg_split"
            , reg_split_function_type( &::gezi::reg_split )
            , ( bp::arg("input"), bp::arg("pattern") ) );
    
    }

    { //::gezi::reg_split
    
        typedef ::std::vector< std::string > ( *reg_split_function_type )( ::std::string const &,::std::string const & );
        
        bp::def( 
            "reg_split"
            , reg_split_function_type( &::gezi::reg_split )
            , ( bp::arg("input"), bp::arg("pattern") ) );
    
    }

    { //::gezi::remove_dupspace
    
        typedef ::std::string ( *remove_dupspace_function_type )( ::std::string const & );
        
        bp::def( 
            "remove_dupspace"
            , remove_dupspace_function_type( &::gezi::remove_dupspace )
            , ( bp::arg("input") ) );
    
    }

    { //::gezi::remove_space_cn
    
        typedef ::std::string ( *remove_space_cn_function_type )( ::std::string const & );
        
        bp::def( 
            "remove_space_cn"
            , remove_space_cn_function_type( &::gezi::remove_space_cn )
            , ( bp::arg("phrase") ) );
    
    }

    { //::gezi::remove_space_cnonly
    
        typedef ::std::string ( *remove_space_cnonly_function_type )( ::std::string const & );
        
        bp::def( 
            "remove_space_cnonly"
            , remove_space_cnonly_function_type( &::gezi::remove_space_cnonly )
            , ( bp::arg("phrase") ) );
    
    }

    { //::gezi::replace_special_whitespace
    
        typedef ::std::string ( *replace_special_whitespace_function_type )( ::std::string const &,char const );
        
        bp::def( 
            "replace_special_whitespace"
            , replace_special_whitespace_function_type( &::gezi::replace_special_whitespace )
            , ( bp::arg("s"), bp::arg("rep")=(char const)(' ') ) );
    
    }

    { //::gezi::seg_init
    
        typedef bool ( *seg_init_function_type )( ::std::string const &,int,::std::string const & );
        
        bp::def( 
            "seg_init"
            , seg_init_function_type( &::gezi::seg_init )
            , ( bp::arg("dict_dir")="./data/wordseg", bp::arg("type")=(int)(0), bp::arg("conf_path")="./conf/scw.conf" ) );
    
    }

    { //::gezi::seg_init2
    
        typedef bool ( *seg_init2_function_type )( ::std::string const &,int,::std::string const & );
        
        bp::def( 
            "seg_init2"
            , seg_init2_function_type( &::gezi::seg_init2 )
            , ( bp::arg("dict_dir")="./data/wordseg", bp::arg("type")=(int)(0), bp::arg("conf_path")="./conf/scw.conf" ) );
    
    }

    { //::gezi::seg_set_bufsize
    
        typedef void ( *seg_set_bufsize_function_type )( int );
        
        bp::def( 
            "seg_set_bufsize"
            , seg_set_bufsize_function_type( &::gezi::seg_set_bufsize )
            , ( bp::arg("max_len") ) );
    
    }

    { //::gezi::segment
    
        typedef ::std::string ( *segment_function_type )( ::std::string const &,::std::string,int );
        
        bp::def( 
            "segment"
            , segment_function_type( &::gezi::segment )
            , ( bp::arg("input"), bp::arg("sep")="\011", bp::arg("type")=(int)(4) ) );
    
    }

    { //::gezi::segment
    
        typedef bool ( *segment_function_type )( ::std::string const &,::std::vector< std::string > &,int );
        
        bp::def( 
            "segment"
            , segment_function_type( &::gezi::segment )
            , ( bp::arg("input"), bp::arg("result"), bp::arg("type")=(int)(4) ) );
    
    }

    { //::gezi::segment
    
        typedef bool ( *segment_function_type )( ::std::string const &,::std::vector< std::string > &,::gezi::SegHandle &,int );
        
        bp::def( 
            "segment"
            , segment_function_type( &::gezi::segment )
            , ( bp::arg("input"), bp::arg("result"), bp::arg("handle"), bp::arg("type")=(int)(4) ) );
    
    }

    { //::gezi::segment
    
        typedef bool ( *segment_function_type )( ::std::string const &,::gezi::SegHandle &,int );
        
        bp::def( 
            "segment"
            , segment_function_type( &::gezi::segment )
            , ( bp::arg("input"), bp::arg("handle"), bp::arg("type")=(int)(4) ) );
    
    }

    { //::gezi::segment2
    
        typedef ::std::string ( *segment2_function_type )( ::std::string const &,::std::string,int );
        
        bp::def( 
            "segment2"
            , segment2_function_type( &::gezi::segment2 )
            , ( bp::arg("input"), bp::arg("sep")="\011", bp::arg("type")=(int)(4) ) );
    
    }

    { //::gezi::segment2
    
        typedef bool ( *segment2_function_type )( ::std::string const &,::std::vector< std::string > &,int );
        
        bp::def( 
            "segment2"
            , segment2_function_type( &::gezi::segment2 )
            , ( bp::arg("input"), bp::arg("result"), bp::arg("type")=(int)(4) ) );
    
    }

    { //::gezi::startswith
    
        typedef bool ( *startswith_function_type )( ::std::string,::std::string );
        
        bp::def( 
            "startswith"
            , startswith_function_type( &::gezi::startswith )
            , ( bp::arg("input"), bp::arg("part") ) );
    
    }

    { //::gezi::str_replace_all
    
        typedef ::std::string ( *str_replace_all_function_type )( ::std::string const &,::std::string const &,::std::string const & );
        
        bp::def( 
            "str_replace_all"
            , str_replace_all_function_type( &::gezi::str_replace_all )
            , ( bp::arg("tstr"), bp::arg("old_value"), bp::arg("new_value") ) );
    
    }

    { //::gezi::strip_html
    
        typedef ::std::string ( *strip_html_function_type )( ::std::string );
        
        bp::def( 
            "strip_html"
            , strip_html_function_type( &::gezi::strip_html )
            , ( bp::arg("src") ) );
    
    }

    { //::gezi::to_cnvec
    
        typedef ::std::vector< std::string > ( *to_cnvec_function_type )( ::std::string );
        
        bp::def( 
            "to_cnvec"
            , to_cnvec_function_type( &::gezi::to_cnvec )
            , ( bp::arg("line") ) );
    
    }

    { //::gezi::to_gbk
    
        typedef ::std::string ( *to_gbk_function_type )( ::std::string const &,int );
        
        bp::def( 
            "to_gbk"
            , to_gbk_function_type( &::gezi::to_gbk )
            , ( bp::arg("src"), bp::arg("flags")=int(::UCONV_INVCHAR_IGNORE) ) );
    
    }

    { //::gezi::to_utf8
    
        typedef ::std::string ( *to_utf8_function_type )( ::std::string const &,int );
        
        bp::def( 
            "to_utf8"
            , to_utf8_function_type( &::gezi::to_utf8 )
            , ( bp::arg("src"), bp::arg("flags")=int(::UCONV_INVCHAR_IGNORE) ) );
    
    }

    { //::gezi::utf82gbk
    
        typedef ::std::string ( *utf82gbk_function_type )( ::std::string const &,int );
        
        bp::def( 
            "utf82gbk"
            , utf82gbk_function_type( &::gezi::utf82gbk )
            , ( bp::arg("src"), bp::arg("flags")=int(::UCONV_INVCHAR_IGNORE) ) );
    
    }

    { //::gezi::utf8_to_gbk
    
        typedef ::std::string ( *utf8_to_gbk_function_type )( ::std::string const &,int );
        
        bp::def( 
            "utf8_to_gbk"
            , utf8_to_gbk_function_type( &::gezi::utf8_to_gbk )
            , ( bp::arg("src"), bp::arg("flags")=int(::UCONV_INVCHAR_IGNORE) ) );
    
    }

    { //::gezi::wchar_count
    
        typedef int ( *wchar_count_function_type )( char const *,int );
        
        bp::def( 
            "wchar_count"
            , wchar_count_function_type( &::gezi::wchar_count )
            , ( bp::arg("buf"), bp::arg("len") ) );
    
    }

    { //::gezi::word_count
    
        typedef int ( *word_count_function_type )( ::std::string const & );
        
        bp::def( 
            "word_count"
            , word_count_function_type( &::gezi::word_count )
            , ( bp::arg("phrase") ) );
    
    }

    { //::gezi::ufo::wreg_search
    
        typedef ::std::vector< std::wstring > ( *wreg_search_function_type )( ::std::wstring const &,::std::wstring const &,int );
        
        bp::def( 
            "wreg_search"
            , wreg_search_function_type( &::gezi::ufo::wreg_search )
            , ( bp::arg("content"), bp::arg("pattern"), bp::arg("index")=(int)(1) ) );
    
    }
}

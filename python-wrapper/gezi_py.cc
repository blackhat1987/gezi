#include "../include/python_util.h"
// This file has been generated by Py++.

#include "boost/python.hpp"

#include "boost/python/suite/indexing/vector_indexing_suite.hpp"

#include "../include/word_seg.h"

#include "../include/log_util.h"

#include "../include/Matrix.h"

#include "../include/numeric/collocation.h"

#include "../include/feature/FeatureSelector.h"

#include "../include/tools/content_process.h"

namespace bp = boost::python;

BOOST_PYTHON_MODULE(libgezi){
UseStrVec;
			UseIntVec;
			UseFloatVec;
			UseDoubleVec;
			UseStrStrMap;
			UseStrIntMap;
			UseStrFloatMap;
			UseStrDoubleMap;
			
    { //::std::vector< std::vector< double > >
        typedef bp::class_< std::vector< std::vector< double > > > vector_less__std_scope_vector_less__double__greater___greater__exposer_t;
        vector_less__std_scope_vector_less__double__greater___greater__exposer_t vector_less__std_scope_vector_less__double__greater___greater__exposer = vector_less__std_scope_vector_less__double__greater___greater__exposer_t( "vector_less__std_scope_vector_less__double__greater___greater_" );
        bp::scope vector_less__std_scope_vector_less__double__greater___greater__scope( vector_less__std_scope_vector_less__double__greater___greater__exposer );
        //WARNING: the next line of code will not compile, because "::std::vector<double, std::allocator<double> >" does not have operator== !
        vector_less__std_scope_vector_less__double__greater___greater__exposer.def( bp::vector_indexing_suite< ::std::vector< std::vector< double > > >() );
    }

    { //::std::vector< std::string >
        typedef bp::class_< std::vector< std::string > > vector_less__std_scope_string__greater__exposer_t;
        vector_less__std_scope_string__greater__exposer_t vector_less__std_scope_string__greater__exposer = vector_less__std_scope_string__greater__exposer_t( "vector_less__std_scope_string__greater_" );
        bp::scope vector_less__std_scope_string__greater__scope( vector_less__std_scope_string__greater__exposer );
        vector_less__std_scope_string__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< std::string >, true >() );
    }

    bp::class_< std::vector< std::string > >("vector_less__std_scope_string__greater_")    
        .def( bp::vector_indexing_suite< ::std::vector< std::string > >() );

    bp::enum_< gezi::collocation::Method>("Method")
        .value("CHI", gezi::collocation::CHI)
        .value("IG", gezi::collocation::IG)
        .value("MI", gezi::collocation::MI)
        .value("MI2", gezi::collocation::MI2)
        .value("PMI", gezi::collocation::PMI)
        .value("ECE", gezi::collocation::ECE)
        .value("EMI", gezi::collocation::EMI)
        .value("T_TEST", gezi::collocation::T_TEST)
        .value("LIR", gezi::collocation::LIR)
        .value("FREQ", gezi::collocation::FREQ)
        .value("IDF", gezi::collocation::IDF)
        .export_values()
        ;

    bp::class_< gezi::ChiSquareFunc >( "ChiSquareFunc" )    
        .def( 
            "__call__"
            , (::Float ( ::gezi::ChiSquareFunc::* )( int,int,int,::uint64 ) )( &::gezi::ChiSquareFunc::operator() )
            , ( bp::arg("a"), bp::arg("n1"), bp::arg("n2"), bp::arg("total") ) );

    bp::class_< gezi::DiscountedMutualInfoFunc >( "DiscountedMutualInfoFunc" )    
        .def( 
            "__call__"
            , (::Float ( ::gezi::DiscountedMutualInfoFunc::* )( int,int,int,long long unsigned int ) )( &::gezi::DiscountedMutualInfoFunc::operator() )
            , ( bp::arg("a00"), bp::arg("nterm1"), bp::arg("nterm2"), bp::arg("n") ) );

    bp::class_< gezi::EChiSquareFunc >( "EChiSquareFunc" )    
        .def( 
            "__call__"
            , (::Float ( ::gezi::EChiSquareFunc::* )( int,int,int,long long unsigned int ) )( &::gezi::EChiSquareFunc::operator() )
            , ( bp::arg("a00"), bp::arg("nterm1"), bp::arg("nterm2"), bp::arg("n") ) );

    bp::class_< gezi::EMutualInfoFunc >( "EMutualInfoFunc" )    
        .def( 
            "__call__"
            , (::Float ( ::gezi::EMutualInfoFunc::* )( int,int,int,long long unsigned int ) )( &::gezi::EMutualInfoFunc::operator() )
            , ( bp::arg("a00"), bp::arg("nterm1"), bp::arg("nterm2"), bp::arg("n") ) );

    bp::class_< gezi::EchoFunc >( "EchoFunc" )    
        .def( 
            "__call__"
            , (::Float ( ::gezi::EchoFunc::* )( int,int,int,::uint64 ) )( &::gezi::EchoFunc::operator() )
            , ( bp::arg("a"), bp::arg("n1"), bp::arg("n2"), bp::arg("n") ) );

    { //::gezi::FeatureSelector
        typedef bp::class_< gezi::FeatureSelector > FeatureSelector_exposer_t;
        FeatureSelector_exposer_t FeatureSelector_exposer = FeatureSelector_exposer_t( "FeatureSelector", bp::init< >() );
        bp::scope FeatureSelector_scope( FeatureSelector_exposer );
        bp::enum_< gezi::FeatureSelector::Strategy>("Strategy")
            .value("MAX", gezi::FeatureSelector::MAX)
            .value("AVG", gezi::FeatureSelector::AVG)
            .value("SUM", gezi::FeatureSelector::SUM)
            .export_values()
            ;
        { //::gezi::FeatureSelector::add
        
            typedef void ( ::gezi::FeatureSelector::*add_function_type )( ::std::vector< std::string > const &,int ) ;
            
            FeatureSelector_exposer.def( 
                "add"
                , add_function_type( &::gezi::FeatureSelector::add )
                , ( bp::arg("words"), bp::arg("label") ) );
        
        }
        { //::gezi::FeatureSelector::add
        
            typedef void ( ::gezi::FeatureSelector::*add_function_type )( ::std::string,int,::std::string ) ;
            
            FeatureSelector_exposer.def( 
                "add"
                , add_function_type( &::gezi::FeatureSelector::add )
                , ( bp::arg("doc"), bp::arg("label"), bp::arg("sep")="\011" ) );
        
        }
        { //::gezi::FeatureSelector::calc
        
            typedef ::gezi::DMat & ( ::gezi::FeatureSelector::*calc_function_type )(  ) ;
            
            FeatureSelector_exposer.def( 
                "calc"
                , calc_function_type( &::gezi::FeatureSelector::calc )
            , bp::return_internal_reference<>());
        
        }
        { //::gezi::FeatureSelector::clear
        
            typedef void ( ::gezi::FeatureSelector::*clear_function_type )(  ) ;
            
            FeatureSelector_exposer.def( 
                "clear"
                , clear_function_type( &::gezi::FeatureSelector::clear ) );
        
        }
        { //::gezi::FeatureSelector::clearScore
        
            typedef void ( ::gezi::FeatureSelector::*clearScore_function_type )(  ) ;
            
            FeatureSelector_exposer.def( 
                "clearScore"
                , clearScore_function_type( &::gezi::FeatureSelector::clearScore ) );
        
        }
        { //::gezi::FeatureSelector::featureNum
        
            typedef int ( ::gezi::FeatureSelector::*featureNum_function_type )(  ) ;
            
            FeatureSelector_exposer.def( 
                "featureNum"
                , featureNum_function_type( &::gezi::FeatureSelector::featureNum ) );
        
        }
        { //::gezi::FeatureSelector::init
        
            typedef void ( ::gezi::FeatureSelector::*init_function_type )(  ) ;
            
            FeatureSelector_exposer.def( 
                "init"
                , init_function_type( &::gezi::FeatureSelector::init ) );
        
        }
        { //::gezi::FeatureSelector::initFunc
        
            typedef void ( ::gezi::FeatureSelector::*initFunc_function_type )(  ) ;
            
            FeatureSelector_exposer.def( 
                "initFunc"
                , initFunc_function_type( &::gezi::FeatureSelector::initFunc ) );
        
        }
        { //::gezi::FeatureSelector::instanceNum
        
            typedef ::int64 ( ::gezi::FeatureSelector::*instanceNum_function_type )(  ) ;
            
            FeatureSelector_exposer.def( 
                "instanceNum"
                , instanceNum_function_type( &::gezi::FeatureSelector::instanceNum ) );
        
        }
        { //::gezi::FeatureSelector::labelNum
        
            typedef int ( ::gezi::FeatureSelector::*labelNum_function_type )(  ) ;
            
            FeatureSelector_exposer.def( 
                "labelNum"
                , labelNum_function_type( &::gezi::FeatureSelector::labelNum ) );
        
        }
        { //::gezi::FeatureSelector::labelNum
        
            typedef ::gezi::FeatureSelector & ( ::gezi::FeatureSelector::*labelNum_function_type )( int ) ;
            
            FeatureSelector_exposer.def( 
                "labelNum"
                , labelNum_function_type( &::gezi::FeatureSelector::labelNum )
                , ( bp::arg("labelNum") )
            , bp::return_internal_reference<>());
        
        }
        { //::gezi::FeatureSelector::method
        
            typedef int ( ::gezi::FeatureSelector::*method_function_type )(  ) ;
            
            FeatureSelector_exposer.def( 
                "method"
                , method_function_type( &::gezi::FeatureSelector::method ) );
        
        }
        { //::gezi::FeatureSelector::method
        
            typedef ::gezi::FeatureSelector & ( ::gezi::FeatureSelector::*method_function_type )( ::gezi::collocation::Method ) ;
            
            FeatureSelector_exposer.def( 
                "method"
                , method_function_type( &::gezi::FeatureSelector::method )
                , ( bp::arg("method") )
            , bp::return_internal_reference<>());
        
        }
        { //::gezi::FeatureSelector::minSupport
        
            typedef int ( ::gezi::FeatureSelector::*minSupport_function_type )(  ) ;
            
            FeatureSelector_exposer.def( 
                "minSupport"
                , minSupport_function_type( &::gezi::FeatureSelector::minSupport ) );
        
        }
        { //::gezi::FeatureSelector::minSupport
        
            typedef ::gezi::FeatureSelector & ( ::gezi::FeatureSelector::*minSupport_function_type )( int ) ;
            
            FeatureSelector_exposer.def( 
                "minSupport"
                , minSupport_function_type( &::gezi::FeatureSelector::minSupport )
                , ( bp::arg("minSupport") )
            , bp::return_internal_reference<>());
        
        }
        { //::gezi::FeatureSelector::save
        
            typedef void ( ::gezi::FeatureSelector::*save_function_type )( ::std::string,int,int ) ;
            
            FeatureSelector_exposer.def( 
                "save"
                , save_function_type( &::gezi::FeatureSelector::save )
                , ( bp::arg("file"), bp::arg("maxFeatureNum")=(int)(1024), bp::arg("idx")=(int)(-0x00000000000000001) ) );
        
        }
        { //::gezi::FeatureSelector::save
        
            typedef void ( ::gezi::FeatureSelector::*save_function_type )( ::std::ostream &,int,int ) ;
            
            FeatureSelector_exposer.def( 
                "save"
                , save_function_type( &::gezi::FeatureSelector::save )
                , ( bp::arg("os"), bp::arg("maxFeatureNum"), bp::arg("idx") ) );
        
        }
        { //::gezi::FeatureSelector::show
        
            typedef void ( ::gezi::FeatureSelector::*show_function_type )( int,int ) ;
            
            FeatureSelector_exposer.def( 
                "show"
                , show_function_type( &::gezi::FeatureSelector::show )
                , ( bp::arg("maxFeatureNum")=(int)(1024), bp::arg("idx")=(int)(-0x00000000000000001) ) );
        
        }
        { //::gezi::FeatureSelector::strategy
        
            typedef int ( ::gezi::FeatureSelector::*strategy_function_type )(  ) ;
            
            FeatureSelector_exposer.def( 
                "strategy"
                , strategy_function_type( &::gezi::FeatureSelector::strategy ) );
        
        }
        { //::gezi::FeatureSelector::strategy
        
            typedef ::gezi::FeatureSelector & ( ::gezi::FeatureSelector::*strategy_function_type )( ::gezi::FeatureSelector::Strategy ) ;
            
            FeatureSelector_exposer.def( 
                "strategy"
                , strategy_function_type( &::gezi::FeatureSelector::strategy )
                , ( bp::arg("strategy") )
            , bp::return_internal_reference<>());
        
        }
    }

    bp::class_< gezi::LogEChiSquareFunc >( "LogEChiSquareFunc" )    
        .def( 
            "__call__"
            , (::Float ( ::gezi::LogEChiSquareFunc::* )( int,int,int,long long unsigned int ) )( &::gezi::LogEChiSquareFunc::operator() )
            , ( bp::arg("a00"), bp::arg("nterm1"), bp::arg("nterm2"), bp::arg("n") ) );

    { //::gezi::LogHelper
        typedef bp::class_< gezi::LogHelper > LogHelper_exposer_t;
        LogHelper_exposer_t LogHelper_exposer = LogHelper_exposer_t( "LogHelper", bp::init< bp::optional< int > >(( bp::arg("log_level")=(int)(16) )) );
        bp::scope LogHelper_scope( LogHelper_exposer );
        bp::implicitly_convertible< int, gezi::LogHelper >();
        LogHelper_exposer.def( bp::init< bool >(( bp::arg("with_conf") )) );
        bp::implicitly_convertible< bool, gezi::LogHelper >();
        LogHelper_exposer.def( bp::init< std::string const &, std::string const & >(( bp::arg("conf_path"), bp::arg("conf_file") )) );
        { //::gezi::LogHelper::set_level
        
            typedef void ( *set_level_function_type )( int );
            
            LogHelper_exposer.def( 
                "set_level"
                , set_level_function_type( &::gezi::LogHelper::set_level )
                , ( bp::arg("log_level") ) );
        
        }
        LogHelper_exposer.staticmethod( "set_level" );
    }

    bp::class_< gezi::PointMutualInfoFunc >( "PointMutualInfoFunc" )    
        .def( 
            "__call__"
            , (::Float ( ::gezi::PointMutualInfoFunc::* )( int,int,int,::uint64 ) )( &::gezi::PointMutualInfoFunc::operator() )
            , ( bp::arg("a"), bp::arg("n1"), bp::arg("n2"), bp::arg("n") ) );

    bp::class_< gezi::TTestFunc >( "TTestFunc" )    
        .def( 
            "__call__"
            , (::Float ( ::gezi::TTestFunc::* )( int,int,int,long long unsigned int ) )( &::gezi::TTestFunc::operator() )
            , ( bp::arg("a00"), bp::arg("nterm1"), bp::arg("nterm2"), bp::arg("n") ) );

    bp::class_< gezi::ThreadLogHelper >( "ThreadLogHelper", bp::init< >() );

    { //::gezi::chi_square
    
        typedef ::Float ( *chi_square_function_type )( int,int,int,::uint64 );
        
        bp::def( 
            "chi_square"
            , chi_square_function_type( &::gezi::chi_square )
            , ( bp::arg("a"), bp::arg("n1"), bp::arg("n2"), bp::arg("total") ) );
    
    }

    { //::gezi::cross_entropy
    
        typedef ::Float ( *cross_entropy_function_type )( int,int,int,::uint64 );
        
        bp::def( 
            "cross_entropy"
            , cross_entropy_function_type( &::gezi::cross_entropy )
            , ( bp::arg("nfc"), bp::arg("nf"), bp::arg("nc"), bp::arg("n") ) );
    
    }

    { //::gezi::information_gain
    
        typedef ::Float ( *information_gain_function_type )( int,int,int,::uint64 );
        
        bp::def( 
            "information_gain"
            , information_gain_function_type( &::gezi::information_gain )
            , ( bp::arg("nfc"), bp::arg("nf"), bp::arg("nc"), bp::arg("n") ) );
    
    }

    { //::gezi::mutual_info
    
        typedef ::Float ( *mutual_info_function_type )( int,int,int,::uint64 );
        
        bp::def( 
            "mutual_info"
            , mutual_info_function_type( &::gezi::mutual_info )
            , ( bp::arg("nfc"), bp::arg("nf"), bp::arg("nc"), bp::arg("n") ) );
    
    }

    { //::gezi::mutual_info2
    
        typedef ::Float ( *mutual_info2_function_type )( int,int,int,::uint64 );
        
        bp::def( 
            "mutual_info2"
            , mutual_info2_function_type( &::gezi::mutual_info2 )
            , ( bp::arg("nfc"), bp::arg("nf"), bp::arg("nc"), bp::arg("n") ) );
    
    }

    { //::gezi::point_mutual_info
    
        typedef ::Float ( *point_mutual_info_function_type )( int,int,int,::uint64 );
        
        bp::def( 
            "point_mutual_info"
            , point_mutual_info_function_type( &::gezi::point_mutual_info )
            , ( bp::arg("a"), bp::arg("n1"), bp::arg("n2"), bp::arg("n") ) );
    
    }

    { //::gezi::seg_init
    
        typedef bool ( *seg_init_function_type )( ::std::string const &,int,::std::string const & );
        
        bp::def( 
            "seg_init"
            , seg_init_function_type( &::gezi::seg_init )
            , ( bp::arg("dict_dir")="./data/wordseg", bp::arg("type")=(int)(0), bp::arg("conf_path")="./conf/scw.conf" ) );
    
    }

    { //::gezi::seg_set_bufsize
    
        typedef void ( *seg_set_bufsize_function_type )( int );
        
        bp::def( 
            "seg_set_bufsize"
            , seg_set_bufsize_function_type( &::gezi::seg_set_bufsize )
            , ( bp::arg("max_len") ) );
    
    }

    { //::gezi::segment
    
        typedef ::std::string ( *segment_function_type )( ::std::string const &,int );
        
        bp::def( 
            "segment"
            , segment_function_type( &::gezi::segment )
            , ( bp::arg("input"), bp::arg("type")=(int)(4) ) );
    
    }

    { //::gezi::segment
    
        typedef bool ( *segment_function_type )( ::std::string const &,::std::vector< std::string > &,int );
        
        bp::def( 
            "segment"
            , segment_function_type( &::gezi::segment )
            , ( bp::arg("input"), bp::arg("result"), bp::arg("type")=(int)(4) ) );
    
    }

    { //::gezi::segment
    
        typedef bool ( *segment_function_type )( ::std::string const &,::gezi::SegHandle &,int );
        
        bp::def( 
            "segment"
            , segment_function_type( &::gezi::segment )
            , ( bp::arg("input"), bp::arg("handle"), bp::arg("type")=(int)(4) ) );
    
    }

    { //::gezi::strip_html
    
        typedef ::std::string ( *strip_html_function_type )( ::std::string );
        
        bp::def( 
            "strip_html"
            , strip_html_function_type( &::gezi::strip_html )
            , ( bp::arg("src") ) );
    
    }
}

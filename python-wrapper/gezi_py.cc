#define private public
#define protected public
#include "python_util.h"
// This file has been generated by Py++.

#include "boost/python.hpp"

#include "boost/python/suite/indexing/vector_indexing_suite.hpp"

#include "boost/python/suite/indexing/map_indexing_suite.hpp"

#include "common_util.h"

#include "ProgressBar.h"

#include "conf_util.h"

#include "log_util.h"

#include "tools/content_process.h"

#include "string_util.h"

#include "reg_util.h"

#include "file_util.h"

#include "encoding_convert.h"

namespace bp = boost::python;

BOOST_PYTHON_MODULE(libgezi){
DEF_VEC(ivec);
DEF_VEC(dvec);
DEF_VEC(uvec);
DEF_VEC(svec);
DEF_VEC(ulvec);
DEF_MAP(id_map);
DEF_MAP(sd_map);
DEF_MAP(si_map);

{ //::std::vector< std::string >
typedef bp::class_< std::vector< std::string > > vector_less__std_scope_string__greater__exposer_t;
vector_less__std_scope_string__greater__exposer_t vector_less__std_scope_string__greater__exposer = vector_less__std_scope_string__greater__exposer_t( "vector_less__std_scope_string__greater_" );
bp::scope vector_less__std_scope_string__greater__scope( vector_less__std_scope_string__greater__exposer );
vector_less__std_scope_string__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< std::string >, true >() )
VEC_METHOD(::std::vector< std::string >);
}

bp::class_< std::vector< std::wstring > >("vector_less__std_scope_wstring__greater_")
.def( bp::vector_indexing_suite< ::std::vector< std::wstring >, true >() )
VEC_METHOD(::std::vector< std::wstring >);

bp::class_< std::vector< std::string > >("vector_less__std_scope_string__greater_")
.def( bp::vector_indexing_suite< ::std::vector< std::string >, true >() )
VEC_METHOD(::std::vector< std::string >);

bp::class_< std::vector< std::string > >("vector_less__std_scope_string__greater_")
.def( bp::vector_indexing_suite< ::std::vector< std::string >, true >() )
VEC_METHOD(::std::vector< std::string >);

bp::class_< std::vector< std::string > >("vector_less__std_scope_string__greater_")
.def( bp::vector_indexing_suite< ::std::vector< std::string >, true >() )
VEC_METHOD(::std::vector< std::string >);

{ //::std::map< std::string, std::string >
typedef bp::class_< std::map< std::string, std::string > > ss_map_exposer_t;
ss_map_exposer_t ss_map_exposer = ss_map_exposer_t( "ss_map" );
bp::scope ss_map_scope( ss_map_exposer );
ss_map_exposer.def( bp::map_indexing_suite< ::std::map< std::string, std::string >, true >() )
MAP_METHOD(::std::map< std::string COMMA  std::string >);
}

bp::class_< std::map< std::string, int > >("map_less__std_scope_string_comma__int__greater_")
.def( bp::map_indexing_suite< ::std::map< std::string, int >, true >() )
MAP_METHOD(::std::map< std::string COMMA  int >);

{ //::gezi::LogHelper
typedef bp::class_< gezi::LogHelper > LogHelper_exposer_t;
LogHelper_exposer_t LogHelper_exposer = LogHelper_exposer_t( "LogHelper", bp::init< bp::optional< int > >(( bp::arg("log_level")=(int)(16) )) );
bp::scope LogHelper_scope( LogHelper_exposer );
bp::implicitly_convertible< int, gezi::LogHelper >();
LogHelper_exposer.def( bp::init< std::string const &, bp::optional< std::string const & > >(( bp::arg("conf_file"), bp::arg("conf_path")="./conf" )) );
{ //::gezi::LogHelper::set_level

typedef void ( *set_level_function_type )( int );

LogHelper_exposer.def(
"set_level"
, set_level_function_type( &::gezi::LogHelper::set_level )
, ( bp::arg("log_level") ) );

}
LogHelper_exposer.staticmethod( "set_level" );
}

bp::class_< gezi::NoProgressBar >( "NoProgressBar" )
.def(
"__call__"
, (void ( ::gezi::NoProgressBar::* )( ::size_t,::size_t ) const)( &::gezi::NoProgressBar::operator() )
, ( bp::arg("arg0"), bp::arg("arg1") ) );

{ //::gezi::ProgressBar
typedef bp::class_< gezi::ProgressBar > ProgressBar_exposer_t;
ProgressBar_exposer_t ProgressBar_exposer = ProgressBar_exposer_t( "ProgressBar", bp::init< >() );
bp::scope ProgressBar_scope( ProgressBar_exposer );
ProgressBar_exposer.def( bp::init< std::string >(( bp::arg("log_word") )) );
bp::implicitly_convertible< std::string, gezi::ProgressBar >();
ProgressBar_exposer.def( bp::init< size_t >(( bp::arg("total") )) );
bp::implicitly_convertible< size_t, gezi::ProgressBar >();
ProgressBar_exposer.def( bp::init< std::string, size_t >(( bp::arg("log_word"), bp::arg("total") )) );
ProgressBar_exposer.def( bp::init< size_t, std::string >(( bp::arg("total"), bp::arg("log_word") )) );
{ //::gezi::ProgressBar::counter

typedef ::size_t ( ::gezi::ProgressBar::*counter_function_type )(  ) const;

ProgressBar_exposer.def(
"counter"
, counter_function_type( &::gezi::ProgressBar::counter ) );

}
{ //::gezi::ProgressBar::operator()

typedef void ( ::gezi::ProgressBar::*__call___function_type )( ::size_t ) ;

ProgressBar_exposer.def(
"__call__"
, __call___function_type( &::gezi::ProgressBar::operator() )
, ( bp::arg("current") ) );

}
{ //::gezi::ProgressBar::operator()

typedef void ( ::gezi::ProgressBar::*__call___function_type )( ::size_t,::size_t ) ;

ProgressBar_exposer.def(
"__call__"
, __call___function_type( &::gezi::ProgressBar::operator() )
, ( bp::arg("current"), bp::arg("total") ) );

}
ProgressBar_exposer.def( bp::self += bp::other< size_t >() );
{ //::gezi::ProgressBar::progress

typedef void ( ::gezi::ProgressBar::*progress_function_type )( ::size_t ) ;

ProgressBar_exposer.def(
"progress"
, progress_function_type( &::gezi::ProgressBar::progress )
, ( bp::arg("current") ) );

}
{ //::gezi::ProgressBar::progress

typedef void ( ::gezi::ProgressBar::*progress_function_type )( ::size_t,::size_t ) ;

ProgressBar_exposer.def(
"progress"
, progress_function_type( &::gezi::ProgressBar::progress )
, ( bp::arg("current"), bp::arg("total") ) );

}
{ //::gezi::ProgressBar::set_level

typedef void ( ::gezi::ProgressBar::*set_level_function_type )( int ) ;

ProgressBar_exposer.def(
"set_level"
, set_level_function_type( &::gezi::ProgressBar::set_level )
, ( bp::arg("level") ) );

}
}

bp::class_< gezi::SharedConf >( "SharedConf" )
.def(
"init"
, (bool (*)( ::std::string,::std::string ))( &::gezi::SharedConf::init )
, ( bp::arg("config_file")="strategy.conf", bp::arg("dir")="./conf" ) )
.staticmethod( "init" );

bp::class_< gezi::ThreadLogHelper >( "ThreadLogHelper", bp::init< >() );

{ //::gezi::Vec2dWriter
typedef bp::class_< gezi::Vec2dWriter, boost::noncopyable > Vec2dWriter_exposer_t;
Vec2dWriter_exposer_t Vec2dWriter_exposer = Vec2dWriter_exposer_t( "Vec2dWriter", bp::init< std::string const & >(( bp::arg("file") )) );
bp::scope Vec2dWriter_scope( Vec2dWriter_exposer );
bp::implicitly_convertible< std::string const &, gezi::Vec2dWriter >();
{ //::gezi::Vec2dWriter::close

typedef void ( ::gezi::Vec2dWriter::*close_function_type )(  ) ;

Vec2dWriter_exposer.def(
"close"
, close_function_type( &::gezi::Vec2dWriter::close ) );

}
}

{ //::gezi::VecWriter
typedef bp::class_< gezi::VecWriter, boost::noncopyable > VecWriter_exposer_t;
VecWriter_exposer_t VecWriter_exposer = VecWriter_exposer_t( "VecWriter", bp::init< std::ofstream & >(( bp::arg("ofs") )) );
bp::scope VecWriter_scope( VecWriter_exposer );
bp::implicitly_convertible< std::ofstream &, gezi::VecWriter >();
{ //::gezi::VecWriter::close

typedef void ( ::gezi::VecWriter::*close_function_type )(  ) ;

VecWriter_exposer.def(
"close"
, close_function_type( &::gezi::VecWriter::close ) );

}
}

{ //::gezi::GetOutputFileName

typedef ::std::string ( *GetOutputFileName_function_type )( ::std::string,::std::string,bool );

bp::def(
"GetOutputFileName"
, GetOutputFileName_function_type( &::gezi::GetOutputFileName )
, ( bp::arg("infile"), bp::arg("suffix"), bp::arg("removeTxt")=(bool)(false) ) );

}

{ //::gezi::all_en

typedef bool ( *all_en_function_type )( ::std::string );

bp::def(
"all_en"
, all_en_function_type( &::gezi::all_en )
, ( bp::arg("phrase") ) );

}

{ //::gezi::arg

typedef ::std::string ( *arg_function_type )( ::std::string );

bp::def(
"arg"
, arg_function_type( &::gezi::arg )
, ( bp::arg("input") ) );

}

{ //::gezi::conf_trim

typedef ::std::string ( *conf_trim_function_type )( ::std::string );

bp::def(
"conf_trim"
, conf_trim_function_type( &::gezi::conf_trim )
, ( bp::arg("input") ) );

}

{ //::gezi::contains

typedef bool ( *contains_function_type )( ::std::string,::std::string );

bp::def(
"contains"
, contains_function_type( &::gezi::contains )
, ( bp::arg("input"), bp::arg("part") ) );

}

{ //::gezi::contains

typedef bool ( *contains_function_type )( ::std::string,char );

bp::def(
"contains"
, contains_function_type( &::gezi::contains )
, ( bp::arg("input"), bp::arg("part") ) );

}

{ //::gezi::contains_any

typedef bool ( *contains_any_function_type )( ::std::string,::std::string );

bp::def(
"contains_any"
, contains_any_function_type( &::gezi::contains_any )
, ( bp::arg("src"), bp::arg("type") ) );

}

{ //::gezi::contains_at

typedef bool ( *contains_at_function_type )( ::std::string );

bp::def(
"contains_at"
, contains_at_function_type( &::gezi::contains_at )
, ( bp::arg("src") ) );

}

{ //::gezi::contains_audio

typedef bool ( *contains_audio_function_type )( ::std::string );

bp::def(
"contains_audio"
, contains_audio_function_type( &::gezi::contains_audio )
, ( bp::arg("src") ) );

}

{ //::gezi::contains_emails

typedef bool ( *contains_emails_function_type )( ::std::string );

bp::def(
"contains_emails"
, contains_emails_function_type( &::gezi::contains_emails )
, ( bp::arg("src") ) );

}

{ //::gezi::contains_num

typedef bool ( *contains_num_function_type )( ::std::string );

bp::def(
"contains_num"
, contains_num_function_type( &::gezi::contains_num )
, ( bp::arg("src") ) );

}

{ //::gezi::contains_pic

typedef bool ( *contains_pic_function_type )( ::std::string );

bp::def(
"contains_pic"
, contains_pic_function_type( &::gezi::contains_pic )
, ( bp::arg("src") ) );

}

{ //::gezi::contains_url

typedef bool ( *contains_url_function_type )( ::std::string );

bp::def(
"contains_url"
, contains_url_function_type( &::gezi::contains_url )
, ( bp::arg("src") ) );

}

{ //::gezi::contains_video

typedef bool ( *contains_video_function_type )( ::std::string );

bp::def(
"contains_video"
, contains_video_function_type( &::gezi::contains_video )
, ( bp::arg("src") ) );

}

{ //::gezi::copy_file

typedef void ( *copy_file_function_type )( ::std::string,::std::string );

bp::def(
"copy_file"
, copy_file_function_type( &::gezi::copy_file )
, ( bp::arg("src"), bp::arg("dest") ) );

}

{ //::gezi::endswith

typedef bool ( *endswith_function_type )( ::std::string,::std::string );

bp::def(
"endswith"
, endswith_function_type( &::gezi::endswith )
, ( bp::arg("input"), bp::arg("part") ) );

}

{ //::gezi::erase

typedef ::std::string ( *erase_function_type )( ::std::string,::std::string );

bp::def(
"erase"
, erase_function_type( &::gezi::erase )
, ( bp::arg("content"), bp::arg("chars") ) );

}

{ //::gezi::erase_chars

typedef ::std::string ( *erase_chars_function_type )( ::std::string,::std::string );

bp::def(
"erase_chars"
, erase_chars_function_type( &::gezi::erase_chars )
, ( bp::arg("content"), bp::arg("chars") ) );

}

{ //::gezi::erase_from

typedef ::std::string ( *erase_from_function_type )( ::std::string,::std::string );

bp::def(
"erase_from"
, erase_from_function_type( &::gezi::erase_from )
, ( bp::arg("content"), bp::arg("part") ) );

}

{ //::gezi::extract_chinese

typedef ::std::string ( *extract_chinese_function_type )( ::std::string );

bp::def(
"extract_chinese"
, extract_chinese_function_type( &::gezi::extract_chinese )
, ( bp::arg("temp") ) );

}

{ //::gezi::extract_gbk_dual

typedef ::std::string ( *extract_gbk_dual_function_type )( ::std::string );

bp::def(
"extract_gbk_dual"
, extract_gbk_dual_function_type( &::gezi::extract_gbk_dual )
, ( bp::arg("temp") ) );

}

{ //::gezi::extract_suspect_symb

typedef ::std::string ( *extract_suspect_symb_function_type )( ::std::string );

bp::def(
"extract_suspect_symb"
, extract_suspect_symb_function_type( &::gezi::extract_suspect_symb )
, ( bp::arg("temp") ) );

}

{ //::gezi::filter_str

typedef ::std::string ( *filter_str_function_type )( ::std::string );

bp::def(
"filter_str"
, filter_str_function_type( &::gezi::filter_str )
, ( bp::arg("temp") ) );

}

{ //::gezi::first

typedef ::std::string ( *first_function_type )( ::std::string,int );

bp::def(
"first"
, first_function_type( &::gezi::first )
, ( bp::arg("input"), bp::arg("length") ) );

}

{ //::gezi::gbk2utf8

typedef ::std::string ( *gbk2utf8_function_type )( ::std::string const &,int );

bp::def(
"gbk2utf8"
, gbk2utf8_function_type( &::gezi::gbk2utf8 )
, ( bp::arg("src"), bp::arg("flags")=int(::UCONV_INVCHAR_IGNORE) ) );

}

{ //::gezi::gbk_substr

typedef ::std::string ( *gbk_substr_function_type )( ::std::string,int,::size_t );

bp::def(
"gbk_substr"
, gbk_substr_function_type( &::gezi::gbk_substr )
, ( bp::arg("input"), bp::arg("start_"), bp::arg("len")=(long unsigned int)(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) ) );

}

{ //::gezi::gbk_to_utf8

typedef ::std::string ( *gbk_to_utf8_function_type )( ::std::string const &,int );

bp::def(
"gbk_to_utf8"
, gbk_to_utf8_function_type( &::gezi::gbk_to_utf8 )
, ( bp::arg("src"), bp::arg("flags")=int(::UCONV_INVCHAR_IGNORE) ) );

}

{ //::gezi::get_ats

typedef ::std::vector< std::string > ( *get_ats_function_type )( ::std::string );

bp::def(
"get_ats"
, get_ats_function_type( &::gezi::get_ats )
, ( bp::arg("src") ) );

}

{ //::gezi::get_emails

typedef ::std::vector< std::string > ( *get_emails_function_type )( ::std::string );

bp::def(
"get_emails"
, get_emails_function_type( &::gezi::get_emails )
, ( bp::arg("src") ) );

}

{ //::gezi::get_nums

typedef ::std::vector< std::string > ( *get_nums_function_type )( ::std::string );

bp::def(
"get_nums"
, get_nums_function_type( &::gezi::get_nums )
, ( bp::arg("src") ) );

}

{ //::gezi::get_pics

typedef ::std::vector< std::string > ( *get_pics_function_type )( ::std::string );

bp::def(
"get_pics"
, get_pics_function_type( &::gezi::get_pics )
, ( bp::arg("src") ) );

}

{ //::gezi::get_skip_bigram

typedef void ( *get_skip_bigram_function_type )( ::svec const &,::svec &,int,::std::string );

bp::def(
"get_skip_bigram"
, get_skip_bigram_function_type( &::gezi::get_skip_bigram )
, ( bp::arg("l"), bp::arg("li"), bp::arg("n"), bp::arg("sep")="$#$" ) );

}

{ //::gezi::get_skipn_bigram

typedef void ( *get_skipn_bigram_function_type )( ::svec const &,::svec &,int,::std::string );

bp::def(
"get_skipn_bigram"
, get_skipn_bigram_function_type( &::gezi::get_skipn_bigram )
, ( bp::arg("l"), bp::arg("li"), bp::arg("n"), bp::arg("sep")="$#$" ) );

}

{ //::gezi::get_urls

typedef ::std::vector< std::string > ( *get_urls_function_type )( ::std::string );

bp::def(
"get_urls"
, get_urls_function_type( &::gezi::get_urls )
, ( bp::arg("src") ) );

}

{ //::gezi::get_val

typedef void ( *get_val_function_type )( ::comcfg::Configure const &,char *,::std::string,::std::string,::std::string );

bp::def(
"get_val"
, get_val_function_type( &::gezi::get_val )
, ( bp::arg("conf"), bp::arg("dest"), bp::arg("field"), bp::arg("key"), bp::arg("default_val") ) );

}

{ //::gezi::get_val

typedef void ( *get_val_function_type )( ::comcfg::Configure const &,char *,::std::string,::std::string );

bp::def(
"get_val"
, get_val_function_type( &::gezi::get_val )
, ( bp::arg("conf"), bp::arg("dest"), bp::arg("key"), bp::arg("default_val") ) );

}

{ //::gezi::get_val

typedef double ( *get_val_function_type )( ::comcfg::Configure const &,::std::string,::std::string,double );

bp::def(
"get_val"
, get_val_function_type( &::gezi::get_val )
, ( bp::arg("conf"), bp::arg("field"), bp::arg("key"), bp::arg("default_val") ) );

}

{ //::gezi::get_val

typedef double ( *get_val_function_type )( ::comcfg::Configure const &,::std::string,double );

bp::def(
"get_val"
, get_val_function_type( &::gezi::get_val )
, ( bp::arg("conf"), bp::arg("key"), bp::arg("default_val") ) );

}

{ //::gezi::get_val

typedef long long int ( *get_val_function_type )( ::comcfg::Configure const &,::std::string,::std::string &,long long int );

bp::def(
"get_val"
, get_val_function_type( &::gezi::get_val )
, ( bp::arg("conf"), bp::arg("field"), bp::arg("key"), bp::arg("default_val") ) );

}

{ //::gezi::get_val

typedef long long int ( *get_val_function_type )( ::comcfg::Configure const &,::std::string,long long int );

bp::def(
"get_val"
, get_val_function_type( &::gezi::get_val )
, ( bp::arg("conf"), bp::arg("key"), bp::arg("default_val") ) );

}

{ //::gezi::get_val

typedef int ( *get_val_function_type )( ::comcfg::Configure const &,::std::string,::std::string,int );

bp::def(
"get_val"
, get_val_function_type( &::gezi::get_val )
, ( bp::arg("conf"), bp::arg("field"), bp::arg("key"), bp::arg("default_val") ) );

}

{ //::gezi::get_val

typedef int ( *get_val_function_type )( ::comcfg::Configure const &,::std::string,int );

bp::def(
"get_val"
, get_val_function_type( &::gezi::get_val )
, ( bp::arg("conf"), bp::arg("key"), bp::arg("default_val") ) );

}

{ //::gezi::get_val

typedef ::std::string ( *get_val_function_type )( ::comcfg::Configure const &,::std::string,::std::string,::std::string );

bp::def(
"get_val"
, get_val_function_type( &::gezi::get_val )
, ( bp::arg("conf"), bp::arg("field"), bp::arg("key"), bp::arg("default_val") ) );

}

{ //::gezi::get_val

typedef ::std::string ( *get_val_function_type )( ::comcfg::Configure const &,::std::string,::std::string );

bp::def(
"get_val"
, get_val_function_type( &::gezi::get_val )
, ( bp::arg("conf"), bp::arg("key"), bp::arg("default_val") ) );

}

{ //::gezi::get_videos

typedef ::std::vector< std::string > ( *get_videos_function_type )( ::std::string );

bp::def(
"get_videos"
, get_videos_function_type( &::gezi::get_videos )
, ( bp::arg("src") ) );

}

{ //::gezi::get_words

typedef ::std::vector< std::string > ( *get_words_function_type )( ::std::vector< std::string > &,int,::std::string );

bp::def(
"get_words"
, get_words_function_type( &::gezi::get_words )
, ( bp::arg("l"), bp::arg("ngram")=(int)(3), bp::arg("sep")="$#$" ) );

}

{ //::gezi::get_words

typedef ::std::vector< std::string > ( *get_words_function_type )( ::std::vector< std::string > &,int,::std::string );

bp::def(
"get_words"
, get_words_function_type( &::gezi::get_words )
, ( bp::arg("l"), bp::arg("ngram")=(int)(3), bp::arg("sep")="$#$" ) );

}

{ //::gezi::is_alpha_only

typedef bool ( *is_alpha_only_function_type )( ::std::string );

bp::def(
"is_alpha_only"
, is_alpha_only_function_type( &::gezi::is_alpha_only )
, ( bp::arg("input") ) );

}

{ //::gezi::is_en_dominate

typedef bool ( *is_en_dominate_function_type )( ::std::string,int );

bp::def(
"is_en_dominate"
, is_en_dominate_function_type( &::gezi::is_en_dominate )
, ( bp::arg("phrase"), bp::arg("var")=(int)(3) ) );

}

{ //::gezi::is_gb2312

typedef bool ( *is_gb2312_function_type )( unsigned char,unsigned char );

bp::def(
"is_gb2312"
, is_gb2312_function_type( &::gezi::is_gb2312 )
, ( bp::arg("ch1"), bp::arg("ch2") ) );

}

{ //::gezi::is_gbk_ch

typedef bool ( *is_gbk_ch_function_type )( ::std::string );

bp::def(
"is_gbk_ch"
, is_gbk_ch_function_type( &::gezi::is_gbk_ch )
, ( bp::arg("phrase") ) );

}

{ //::gezi::is_gbk_ch

typedef bool ( *is_gbk_ch_function_type )( unsigned char,unsigned char );

bp::def(
"is_gbk_ch"
, is_gbk_ch_function_type( &::gezi::is_gbk_ch )
, ( bp::arg("ch1"), bp::arg("ch2") ) );

}

{ //::gezi::json_empty

typedef bool ( *json_empty_function_type )( ::std::string );

bp::def(
"json_empty"
, json_empty_function_type( &::gezi::json_empty )
, ( bp::arg("value") ) );

}

{ //::gezi::last

typedef ::std::string ( *last_function_type )( ::std::string,int );

bp::def(
"last"
, last_function_type( &::gezi::last )
, ( bp::arg("input"), bp::arg("length") ) );

}

{ //::gezi::max

typedef ::std::string ( *max_function_type )( ::std::string,int );

bp::def(
"max"
, max_function_type( &::gezi::max )
, ( bp::arg("input"), bp::arg("length") ) );

}

{ //::gezi::normalize_feature_str

typedef void ( *normalize_feature_str_function_type )( ::std::string & );

bp::def(
"normalize_feature_str"
, normalize_feature_str_function_type( &::gezi::normalize_feature_str )
, ( bp::arg("feature_str") ) );

}

{ //::gezi::normalize_str

typedef ::std::string ( *normalize_str_function_type )( ::std::string );

bp::def(
"normalize_str"
, normalize_str_function_type( &::gezi::normalize_str )
, ( bp::arg("input") ) );

}

{ //::gezi::pad_right

typedef ::std::string ( *pad_right_function_type )( ::std::string,int );

bp::def(
"pad_right"
, pad_right_function_type( &::gezi::pad_right )
, ( bp::arg("input"), bp::arg("count") ) );

}

{ //::gezi::parse_bool_param

typedef bool ( *parse_bool_param_function_type )( ::std::string,::std::string );

bp::def(
"parse_bool_param"
, parse_bool_param_function_type( &::gezi::parse_bool_param )
, ( bp::arg("name"), bp::arg("line") ) );

}

{ //::gezi::parse_double_param

typedef double ( *parse_double_param_function_type )( ::std::string,::std::string );

bp::def(
"parse_double_param"
, parse_double_param_function_type( &::gezi::parse_double_param )
, ( bp::arg("name"), bp::arg("line") ) );

}

{ //::gezi::parse_int_param

typedef int ( *parse_int_param_function_type )( ::std::string,::std::string );

bp::def(
"parse_int_param"
, parse_int_param_function_type( &::gezi::parse_int_param )
, ( bp::arg("name"), bp::arg("line") ) );

}

{ //::gezi::parse_string_param

typedef ::std::string ( *parse_string_param_function_type )( ::std::string,::std::string );

bp::def(
"parse_string_param"
, parse_string_param_function_type( &::gezi::parse_string_param )
, ( bp::arg("name"), bp::arg("line") ) );

}

{ //::gezi::read_file

typedef ::std::string ( *read_file_function_type )( ::std::string const & );

bp::def(
"read_file"
, read_file_function_type( &::gezi::read_file )
, ( bp::arg("infile") ) );

}

{ //::gezi::read_lines

typedef void ( *read_lines_function_type )( ::std::string,::std::vector< std::string > & );

bp::def(
"read_lines"
, read_lines_function_type( &::gezi::read_lines )
, ( bp::arg("infile"), bp::arg("vec") ) );

}

{ //::gezi::read_lines

typedef ::std::vector< std::string > ( *read_lines_function_type )( ::std::ifstream & );

bp::def(
"read_lines"
, read_lines_function_type( &::gezi::read_lines )
, ( bp::arg("ifs") ) );

}

{ //::gezi::read_lines

typedef ::std::vector< std::string > ( *read_lines_function_type )( ::std::string,::std::string );

bp::def(
"read_lines"
, read_lines_function_type( &::gezi::read_lines )
, ( bp::arg("infile"), bp::arg("ignore") ) );

}

{ //::gezi::read_lines

typedef ::std::vector< std::string > ( *read_lines_function_type )( ::std::string );

bp::def(
"read_lines"
, read_lines_function_type( &::gezi::read_lines )
, ( bp::arg("infile") ) );

}

{ //::gezi::read_lines

typedef void ( *read_lines_function_type )( ::std::string,::std::vector< std::string > & );

bp::def(
"read_lines"
, read_lines_function_type( &::gezi::read_lines )
, ( bp::arg("infile"), bp::arg("vec") ) );

}

{ //::gezi::read_lines

typedef ::std::vector< std::string > ( *read_lines_function_type )( ::std::ifstream & );

bp::def(
"read_lines"
, read_lines_function_type( &::gezi::read_lines )
, ( bp::arg("ifs") ) );

}

{ //::gezi::read_lines

typedef ::std::vector< std::string > ( *read_lines_function_type )( ::std::string,::std::string );

bp::def(
"read_lines"
, read_lines_function_type( &::gezi::read_lines )
, ( bp::arg("infile"), bp::arg("ignore") ) );

}

{ //::gezi::read_lines

typedef ::std::vector< std::string > ( *read_lines_function_type )( ::std::string );

bp::def(
"read_lines"
, read_lines_function_type( &::gezi::read_lines )
, ( bp::arg("infile") ) );

}

{ //::gezi::read_lines_fast

typedef ::std::vector< std::string > ( *read_lines_fast_function_type )( ::std::string,::std::string );

bp::def(
"read_lines_fast"
, read_lines_fast_function_type( &::gezi::read_lines_fast )
, ( bp::arg("infile"), bp::arg("ignore") ) );

}

{ //::gezi::read_lines_fast

typedef ::std::vector< std::string > ( *read_lines_fast_function_type )( ::std::string );

bp::def(
"read_lines_fast"
, read_lines_fast_function_type( &::gezi::read_lines_fast )
, ( bp::arg("infile") ) );

}

{ //::gezi::read_lines_fast

typedef ::std::vector< std::string > ( *read_lines_fast_function_type )( ::std::string,::std::string );

bp::def(
"read_lines_fast"
, read_lines_fast_function_type( &::gezi::read_lines_fast )
, ( bp::arg("infile"), bp::arg("ignore") ) );

}

{ //::gezi::read_lines_fast

typedef ::std::vector< std::string > ( *read_lines_fast_function_type )( ::std::string );

bp::def(
"read_lines_fast"
, read_lines_fast_function_type( &::gezi::read_lines_fast )
, ( bp::arg("infile") ) );

}

{ //::gezi::read_lines_noempty

typedef ::std::vector< std::string > ( *read_lines_noempty_function_type )( ::std::string );

bp::def(
"read_lines_noempty"
, read_lines_noempty_function_type( &::gezi::read_lines_noempty )
, ( bp::arg("infile") ) );

}

{ //::gezi::read_lines_noempty

typedef ::std::vector< std::string > ( *read_lines_noempty_function_type )( ::std::string );

bp::def(
"read_lines_noempty"
, read_lines_noempty_function_type( &::gezi::read_lines_noempty )
, ( bp::arg("infile") ) );

}

{ //::gezi::read_map

typedef void ( *read_map_function_type )( ::std::string const &,::std::unordered_map< std::basic_string< char, std::char_traits< char >, std::allocator< char > >, std::basic_string< char, std::char_traits< char >, std::allocator< char > >, boost::hash< std::basic_string< char, std::char_traits< char >, std::allocator< char > > >, std::equal_to< std::basic_string< char, std::char_traits< char >, std::allocator< char > > >, std::allocator< std::pair< const std::basic_string< char, std::char_traits< char >, std::allocator< char > >, std::basic_string< char, std::char_traits< char >, std::allocator< char > > > > > &,::std::string,int,int );

bp::def(
"read_map"
, read_map_function_type( &::gezi::read_map )
, ( bp::arg("infile"), bp::arg("container"), bp::arg("sep")="\011", bp::arg("key_idx")=(int)(0), bp::arg("value_idx")=(int)(1) ) );

}

{ //::gezi::read_map

typedef void ( *read_map_function_type )( ::std::string const &,::std::map< std::string, std::string > &,::std::string,int,int );

bp::def(
"read_map"
, read_map_function_type( &::gezi::read_map )
, ( bp::arg("infile"), bp::arg("container"), bp::arg("sep")="\011", bp::arg("key_idx")=(int)(0), bp::arg("value_idx")=(int)(1) ) );

}

{ //::gezi::read_to_set

typedef void ( *read_to_set_function_type )( ::std::string const &,::std::unordered_set< std::basic_string< char, std::char_traits< char >, std::allocator< char > >, boost::hash< std::basic_string< char, std::char_traits< char >, std::allocator< char > > >, std::equal_to< std::basic_string< char, std::char_traits< char >, std::allocator< char > > >, std::allocator< std::basic_string< char, std::char_traits< char >, std::allocator< char > > > > &,int,::std::string );

bp::def(
"read_to_set"
, read_to_set_function_type( &::gezi::read_to_set )
, ( bp::arg("infile"), bp::arg("container"), bp::arg("index")=(int)(0), bp::arg("sep")="\011 " ) );

}

{ //::gezi::read_to_set

typedef void ( *read_to_set_function_type )( ::std::string const &,::std::set< std::string > &,int,::std::string );

bp::def(
"read_to_set"
, read_to_set_function_type( &::gezi::read_to_set )
, ( bp::arg("infile"), bp::arg("container"), bp::arg("index")=(int)(0), bp::arg("sep")="\011 " ) );

}

{ //::gezi::read_to_vec

typedef ::std::vector< std::string > ( *read_to_vec_function_type )( ::std::string const &,int,::std::string );

bp::def(
"read_to_vec"
, read_to_vec_function_type( &::gezi::read_to_vec )
, ( bp::arg("infile"), bp::arg("index")=(int)(0), bp::arg("sep")="\011 " ) );

}

{ //::gezi::read_to_vec

typedef void ( *read_to_vec_function_type )( ::std::string const &,::std::vector< std::string > &,int,::std::string );

bp::def(
"read_to_vec"
, read_to_vec_function_type( &::gezi::read_to_vec )
, ( bp::arg("infile"), bp::arg("container"), bp::arg("index")=(int)(0), bp::arg("sep")="\011 " ) );

}

{ //::gezi::read_to_vec

typedef ::std::vector< std::string > ( *read_to_vec_function_type )( ::std::string const &,int,::std::string );

bp::def(
"read_to_vec"
, read_to_vec_function_type( &::gezi::read_to_vec )
, ( bp::arg("infile"), bp::arg("index")=(int)(0), bp::arg("sep")="\011 " ) );

}

{ //::gezi::read_to_vec

typedef void ( *read_to_vec_function_type )( ::std::string const &,::std::vector< std::string > &,int,::std::string );

bp::def(
"read_to_vec"
, read_to_vec_function_type( &::gezi::read_to_vec )
, ( bp::arg("infile"), bp::arg("container"), bp::arg("index")=(int)(0), bp::arg("sep")="\011 " ) );

}

{ //::gezi::reg_find

typedef bool ( *reg_find_function_type )( ::std::string const &,::std::string );

bp::def(
"reg_find"
, reg_find_function_type( &::gezi::reg_find )
, ( bp::arg("content"), bp::arg("pattern") ) );

}

{ //::gezi::reg_remove

typedef ::std::wstring ( *reg_remove_function_type )( ::std::wstring const &,::std::wstring );

bp::def(
"reg_remove"
, reg_remove_function_type( &::gezi::reg_remove )
, ( bp::arg("input"), bp::arg("pattern") ) );

}

{ //::gezi::reg_remove

typedef ::std::string ( *reg_remove_function_type )( ::std::string const &,::std::string );

bp::def(
"reg_remove"
, reg_remove_function_type( &::gezi::reg_remove )
, ( bp::arg("input"), bp::arg("pattern") ) );

}

{ //::gezi::reg_replace

typedef ::std::wstring ( *reg_replace_function_type )( ::std::wstring const &,::std::wstring,::std::wstring );

bp::def(
"reg_replace"
, reg_replace_function_type( &::gezi::reg_replace )
, ( bp::arg("input"), bp::arg("pattern"), bp::arg("replacement")="\000\000\000" ) );

}

{ //::gezi::reg_replace

typedef ::std::string ( *reg_replace_function_type )( ::std::string const &,::std::string,::std::string );

bp::def(
"reg_replace"
, reg_replace_function_type( &::gezi::reg_replace )
, ( bp::arg("input"), bp::arg("pattern"), bp::arg("replacement")="" ) );

}

{ //::gezi::reg_search

typedef void ( *reg_search_function_type )( ::std::wstring const &,::std::wstring,::std::vector< std::wstring > &,int );

bp::def(
"reg_search"
, reg_search_function_type( &::gezi::reg_search )
, ( bp::arg("content"), bp::arg("pattern"), bp::arg("result"), bp::arg("index")=(int)(1) ) );

}

{ //::gezi::reg_search

typedef ::std::wstring ( *reg_search_function_type )( ::std::wstring const &,::std::wstring,int );

bp::def(
"reg_search"
, reg_search_function_type( &::gezi::reg_search )
, ( bp::arg("content"), bp::arg("pattern"), bp::arg("index")=(int)(1) ) );

}

{ //::gezi::reg_search

typedef void ( *reg_search_function_type )( ::std::string const &,::std::string,::std::vector< std::string > &,int );

bp::def(
"reg_search"
, reg_search_function_type( &::gezi::reg_search )
, ( bp::arg("content"), bp::arg("pattern"), bp::arg("result"), bp::arg("index")=(int)(1) ) );

}

{ //::gezi::reg_search

typedef ::std::string ( *reg_search_function_type )( ::std::string const &,::std::string,int );

bp::def(
"reg_search"
, reg_search_function_type( &::gezi::reg_search )
, ( bp::arg("content"), bp::arg("pattern"), bp::arg("index")=(int)(1) ) );

}

{ //::gezi::reg_search

typedef void ( *reg_search_function_type )( ::std::wstring const &,::boost::wregex &,::std::vector< std::wstring > &,int );

bp::def(
"reg_search"
, reg_search_function_type( &::gezi::reg_search )
, ( bp::arg("content"), bp::arg("reg"), bp::arg("result"), bp::arg("index")=(int)(1) ) );

}

{ //::gezi::reg_search

typedef ::std::wstring ( *reg_search_function_type )( ::std::wstring const &,::boost::wregex &,int );

bp::def(
"reg_search"
, reg_search_function_type( &::gezi::reg_search )
, ( bp::arg("content"), bp::arg("reg"), bp::arg("index")=(int)(1) ) );

}

{ //::gezi::reg_search

typedef void ( *reg_search_function_type )( ::std::string const &,::boost::regex &,::std::vector< std::string > &,int );

bp::def(
"reg_search"
, reg_search_function_type( &::gezi::reg_search )
, ( bp::arg("content"), bp::arg("reg"), bp::arg("result"), bp::arg("index")=(int)(1) ) );

}

{ //::gezi::reg_search

typedef ::std::string ( *reg_search_function_type )( ::std::string const &,::boost::regex &,int );

bp::def(
"reg_search"
, reg_search_function_type( &::gezi::reg_search )
, ( bp::arg("content"), bp::arg("reg"), bp::arg("index")=(int)(1) ) );

}

{ //::gezi::ufo::reg_search

typedef ::std::vector< std::wstring > ( *reg_search_function_type )( ::std::wstring const &,::boost::wregex &,int );

bp::def(
"reg_search"
, reg_search_function_type( &::gezi::ufo::reg_search )
, ( bp::arg("content"), bp::arg("reg"), bp::arg("index")=(int)(1) ) );

}

{ //::gezi::ufo::reg_search

typedef ::std::vector< std::string > ( *reg_search_function_type )( ::std::string const &,::std::string,int );

bp::def(
"reg_search"
, reg_search_function_type( &::gezi::ufo::reg_search )
, ( bp::arg("content"), bp::arg("pattern"), bp::arg("index")=(int)(1) ) );

}

{ //::gezi::ufo::reg_search

typedef ::std::vector< std::string > ( *reg_search_function_type )( ::std::string const &,::boost::regex &,int );

bp::def(
"reg_search"
, reg_search_function_type( &::gezi::ufo::reg_search )
, ( bp::arg("content"), bp::arg("reg"), bp::arg("index")=(int)(1) ) );

}

{ //::gezi::ufo::reg_search

typedef ::std::vector< std::string > ( *reg_search_function_type )( ::std::string const &,::std::string,int );

bp::def(
"reg_search"
, reg_search_function_type( &::gezi::ufo::reg_search )
, ( bp::arg("content"), bp::arg("pattern"), bp::arg("index")=(int)(1) ) );

}

{ //::gezi::ufo::reg_search

typedef ::std::vector< std::string > ( *reg_search_function_type )( ::std::string const &,::boost::regex &,int );

bp::def(
"reg_search"
, reg_search_function_type( &::gezi::ufo::reg_search )
, ( bp::arg("content"), bp::arg("reg"), bp::arg("index")=(int)(1) ) );

}

{ //::gezi::reg_search

typedef void ( *reg_search_function_type )( ::std::string const &,::std::string,::std::vector< std::string > &,int );

bp::def(
"reg_search"
, reg_search_function_type( &::gezi::reg_search )
, ( bp::arg("content"), bp::arg("pattern"), bp::arg("result"), bp::arg("index")=(int)(1) ) );

}

{ //::gezi::reg_search

typedef void ( *reg_search_function_type )( ::std::string const &,::boost::regex &,::std::vector< std::string > &,int );

bp::def(
"reg_search"
, reg_search_function_type( &::gezi::reg_search )
, ( bp::arg("content"), bp::arg("reg"), bp::arg("result"), bp::arg("index")=(int)(1) ) );

}

{ //::gezi::reg_split

typedef ::std::vector< std::wstring > ( *reg_split_function_type )( ::std::wstring const &,::std::wstring );

bp::def(
"reg_split"
, reg_split_function_type( &::gezi::reg_split )
, ( bp::arg("input"), bp::arg("pattern") ) );

}

{ //::gezi::reg_split

typedef ::std::vector< std::string > ( *reg_split_function_type )( ::std::string const &,::std::string );

bp::def(
"reg_split"
, reg_split_function_type( &::gezi::reg_split )
, ( bp::arg("input"), bp::arg("pattern") ) );

}

{ //::gezi::reg_split

typedef ::std::vector< std::string > ( *reg_split_function_type )( ::std::string const &,::std::string );

bp::def(
"reg_split"
, reg_split_function_type( &::gezi::reg_split )
, ( bp::arg("input"), bp::arg("pattern") ) );

}

{ //::gezi::remove_dupspace

typedef ::std::string ( *remove_dupspace_function_type )( ::std::string );

bp::def(
"remove_dupspace"
, remove_dupspace_function_type( &::gezi::remove_dupspace )
, ( bp::arg("input") ) );

}

{ //::gezi::remove_space_cn

typedef ::std::string ( *remove_space_cn_function_type )( ::std::string );

bp::def(
"remove_space_cn"
, remove_space_cn_function_type( &::gezi::remove_space_cn )
, ( bp::arg("phrase") ) );

}

{ //::gezi::remove_space_cnonly

typedef ::std::string ( *remove_space_cnonly_function_type )( ::std::string );

bp::def(
"remove_space_cnonly"
, remove_space_cnonly_function_type( &::gezi::remove_space_cnonly )
, ( bp::arg("phrase") ) );

}

{ //::gezi::replace

typedef ::std::string ( *replace_function_type )( ::std::string,char,char );

bp::def(
"replace"
, replace_function_type( &::gezi::replace )
, ( bp::arg("input"), bp::arg("a"), bp::arg("b") ) );

}

{ //::gezi::replace_chars

typedef ::std::string ( *replace_chars_function_type )( ::std::string,::std::string,char );

bp::def(
"replace_chars"
, replace_chars_function_type( &::gezi::replace_chars )
, ( bp::arg("content"), bp::arg("chars"), bp::arg("dest") ) );

}

{ //::gezi::replace_special_whitespace

typedef ::std::string ( *replace_special_whitespace_function_type )( ::std::string,char const );

bp::def(
"replace_special_whitespace"
, replace_special_whitespace_function_type( &::gezi::replace_special_whitespace )
, ( bp::arg("s"), bp::arg("rep")=(char const)(' ') ) );

}

{ //::gezi::set_val

typedef void ( *set_val_function_type )( ::comcfg::Configure const &,::std::string,::std::string,double & );

bp::def(
"set_val"
, set_val_function_type( &::gezi::set_val )
, ( bp::arg("conf"), bp::arg("field"), bp::arg("key"), bp::arg("val") ) );

}

{ //::gezi::set_val

typedef void ( *set_val_function_type )( ::comcfg::Configure const &,::std::string,double & );

bp::def(
"set_val"
, set_val_function_type( &::gezi::set_val )
, ( bp::arg("conf"), bp::arg("key"), bp::arg("val") ) );

}

{ //::gezi::set_val

typedef void ( *set_val_function_type )( ::comcfg::Configure const &,::std::string,::std::string &,long long int & );

bp::def(
"set_val"
, set_val_function_type( &::gezi::set_val )
, ( bp::arg("conf"), bp::arg("field"), bp::arg("key"), bp::arg("val") ) );

}

{ //::gezi::set_val

typedef void ( *set_val_function_type )( ::comcfg::Configure const &,::std::string,long long int & );

bp::def(
"set_val"
, set_val_function_type( &::gezi::set_val )
, ( bp::arg("conf"), bp::arg("key"), bp::arg("val") ) );

}

{ //::gezi::set_val

typedef void ( *set_val_function_type )( ::comcfg::Configure const &,::std::string,::std::string,bool & );

bp::def(
"set_val"
, set_val_function_type( &::gezi::set_val )
, ( bp::arg("conf"), bp::arg("field"), bp::arg("key"), bp::arg("val") ) );

}

{ //::gezi::set_val

typedef void ( *set_val_function_type )( ::comcfg::Configure const &,::std::string,bool & );

bp::def(
"set_val"
, set_val_function_type( &::gezi::set_val )
, ( bp::arg("conf"), bp::arg("key"), bp::arg("val") ) );

}

{ //::gezi::set_val

typedef void ( *set_val_function_type )( ::comcfg::Configure const &,::std::string,::std::string,int & );

bp::def(
"set_val"
, set_val_function_type( &::gezi::set_val )
, ( bp::arg("conf"), bp::arg("field"), bp::arg("key"), bp::arg("val") ) );

}

{ //::gezi::set_val

typedef void ( *set_val_function_type )( ::comcfg::Configure const &,::std::string,int & );

bp::def(
"set_val"
, set_val_function_type( &::gezi::set_val )
, ( bp::arg("conf"), bp::arg("key"), bp::arg("val") ) );

}

{ //::gezi::set_val

typedef void ( *set_val_function_type )( ::comcfg::Configure const &,::std::string,::std::string,::std::string & );

bp::def(
"set_val"
, set_val_function_type( &::gezi::set_val )
, ( bp::arg("conf"), bp::arg("field"), bp::arg("key"), bp::arg("val") ) );

}

{ //::gezi::set_val

typedef void ( *set_val_function_type )( ::comcfg::Configure const &,::std::string,::std::string & );

bp::def(
"set_val"
, set_val_function_type( &::gezi::set_val )
, ( bp::arg("conf"), bp::arg("key"), bp::arg("val") ) );

}

{ //::gezi::ufo::split_regex

typedef ::std::vector< std::string > ( *split_regex_function_type )( ::std::string const &,::std::string );

bp::def(
"split_regex"
, split_regex_function_type( &::gezi::ufo::split_regex )
, ( bp::arg("input"), bp::arg("pattern") ) );

}

{ //::gezi::ufo::split_regex

typedef ::std::vector< std::string > ( *split_regex_function_type )( ::std::string const &,::std::string );

bp::def(
"split_regex"
, split_regex_function_type( &::gezi::ufo::split_regex )
, ( bp::arg("input"), bp::arg("pattern") ) );

}

{ //::gezi::startswith

typedef bool ( *startswith_function_type )( ::std::string,char );

bp::def(
"startswith"
, startswith_function_type( &::gezi::startswith )
, ( bp::arg("input"), bp::arg("part") ) );

}

{ //::gezi::startswith

typedef bool ( *startswith_function_type )( ::std::string,::std::string );

bp::def(
"startswith"
, startswith_function_type( &::gezi::startswith )
, ( bp::arg("input"), bp::arg("part") ) );

}

{ //::gezi::str_replace_all

typedef ::std::string ( *str_replace_all_function_type )( ::std::string,::std::string,::std::string );

bp::def(
"str_replace_all"
, str_replace_all_function_type( &::gezi::str_replace_all )
, ( bp::arg("tstr"), bp::arg("old_value"), bp::arg("new_value") ) );

}

{ //::gezi::strip_from

typedef ::std::string ( *strip_from_function_type )( ::std::string );

bp::def(
"strip_from"
, strip_from_function_type( &::gezi::strip_from )
, ( bp::arg("src") ) );

}

{ //::gezi::strip_html

typedef ::std::string ( *strip_html_function_type )( ::std::string );

bp::def(
"strip_html"
, strip_html_function_type( &::gezi::strip_html )
, ( bp::arg("src") ) );

}

{ //::gezi::to_cnvec

typedef ::std::vector< std::string > ( *to_cnvec_function_type )( ::std::string );

bp::def(
"to_cnvec"
, to_cnvec_function_type( &::gezi::to_cnvec )
, ( bp::arg("line") ) );

}

{ //::gezi::to_cnvec

typedef ::std::vector< std::string > ( *to_cnvec_function_type )( ::std::string );

bp::def(
"to_cnvec"
, to_cnvec_function_type( &::gezi::to_cnvec )
, ( bp::arg("line") ) );

}

{ //::gezi::to_gbk

typedef ::std::string ( *to_gbk_function_type )( ::std::string const &,int );

bp::def(
"to_gbk"
, to_gbk_function_type( &::gezi::to_gbk )
, ( bp::arg("src"), bp::arg("flags")=int(::UCONV_INVCHAR_IGNORE) ) );

}

{ //::gezi::to_hashset

typedef ::std::unordered_set< std::basic_string< char, std::char_traits< char >, std::allocator< char > >, boost::hash< std::basic_string< char, std::char_traits< char >, std::allocator< char > > >, std::equal_to< std::basic_string< char, std::char_traits< char >, std::allocator< char > > >, std::allocator< std::basic_string< char, std::char_traits< char >, std::allocator< char > > > > ( *to_hashset_function_type )( ::std::string );

bp::def(
"to_hashset"
, to_hashset_function_type( &::gezi::to_hashset )
, ( bp::arg("infile") ) );

}

{ //::gezi::to_identifer_hashmap

typedef ::std::unordered_map< std::string, int, boost::hash< std::string >, std::equal_to< std::string >, std::allocator< std::pair< std::string const, int > > > ( *to_identifer_hashmap_function_type )( ::std::string,int );

bp::def(
"to_identifer_hashmap"
, to_identifer_hashmap_function_type( &::gezi::to_identifer_hashmap )
, ( bp::arg("infile"), bp::arg("start")=(int)(0) ) );

}

{ //::gezi::to_identifer_hashmap

typedef ::std::unordered_map< std::basic_string< char, std::char_traits< char >, std::allocator< char > >, int, boost::hash< std::basic_string< char, std::char_traits< char >, std::allocator< char > > >, std::equal_to< std::basic_string< char, std::char_traits< char >, std::allocator< char > > >, std::allocator< std::pair< const std::basic_string< char, std::char_traits< char >, std::allocator< char > >, int > > > ( *to_identifer_hashmap_function_type )( ::std::string,int );

bp::def(
"to_identifer_hashmap"
, to_identifer_hashmap_function_type( &::gezi::to_identifer_hashmap )
, ( bp::arg("infile"), bp::arg("start")=(int)(0) ) );

}

{ //::gezi::to_identifer_map

typedef ::std::map< std::string, int > ( *to_identifer_map_function_type )( ::std::string,int );

bp::def(
"to_identifer_map"
, to_identifer_map_function_type( &::gezi::to_identifer_map )
, ( bp::arg("infile"), bp::arg("start")=(int)(0) ) );

}

{ //::gezi::to_set

typedef ::std::set< std::string > ( *to_set_function_type )( ::std::string );

bp::def(
"to_set"
, to_set_function_type( &::gezi::to_set )
, ( bp::arg("infile") ) );

}

{ //::gezi::to_utf8

typedef ::std::string ( *to_utf8_function_type )( ::std::string const &,int );

bp::def(
"to_utf8"
, to_utf8_function_type( &::gezi::to_utf8 )
, ( bp::arg("src"), bp::arg("flags")=int(::UCONV_INVCHAR_IGNORE) ) );

}

{ //::gezi::try_create_dir

typedef void ( *try_create_dir_function_type )( ::std::string );

bp::def(
"try_create_dir"
, try_create_dir_function_type( &::gezi::try_create_dir )
, ( bp::arg("dir") ) );

}

{ //::gezi::utf82gbk

typedef ::std::string ( *utf82gbk_function_type )( ::std::string const &,int );

bp::def(
"utf82gbk"
, utf82gbk_function_type( &::gezi::utf82gbk )
, ( bp::arg("src"), bp::arg("flags")=int(::UCONV_INVCHAR_IGNORE) ) );

}

{ //::gezi::utf8_to_gbk

typedef ::std::string ( *utf8_to_gbk_function_type )( ::std::string const &,int );

bp::def(
"utf8_to_gbk"
, utf8_to_gbk_function_type( &::gezi::utf8_to_gbk )
, ( bp::arg("src"), bp::arg("flags")=int(::UCONV_INVCHAR_IGNORE) ) );

}

{ //::gezi::wchar_count

typedef int ( *wchar_count_function_type )( char const *,int );

bp::def(
"wchar_count"
, wchar_count_function_type( &::gezi::wchar_count )
, ( bp::arg("buf"), bp::arg("len") ) );

}

{ //::gezi::word_count

typedef int ( *word_count_function_type )( ::std::string );

bp::def(
"word_count"
, word_count_function_type( &::gezi::word_count )
, ( bp::arg("phrase") ) );

}

{ //::gezi::ufo::wreg_search

typedef ::std::vector< std::wstring > ( *wreg_search_function_type )( ::std::wstring const &,::std::wstring,int );

bp::def(
"wreg_search"
, wreg_search_function_type( &::gezi::ufo::wreg_search )
, ( bp::arg("content"), bp::arg("pattern"), bp::arg("index")=(int)(1) ) );

}
}

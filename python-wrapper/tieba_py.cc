#define private public
#define protected public
#include "python_util.h"
// This file has been generated by Py++.

#include "boost/python.hpp"

#include "boost/python/suite/indexing/vector_indexing_suite.hpp"

#include "boost/python/suite/indexing/map_indexing_suite.hpp"

#include "common_util.h"

#include "tools/IpFinder.h"
const int gezi::IpFinder::INDEX_LENGTH;
const int gezi::IpFinder::IP_LENGTH;
const int gezi::IpFinder::OFFSET_LENGTH;

#include "tools/ip.h"

#include "tools/uname_util.h"

#include "tieba/tieba_util.h"

#include "tieba/get_info.h"

#include "tieba/get_parsed_info.h"

#include "tieba/info/delete_info.h"

#include "tieba/info/forum_info.h"

#include "tieba/info/post_info.h"

#include "tieba/info/thread_info.h"

#include "tieba/info/url_info.h"

#include "tieba/info/user_info.h"

#include "tieba/info/user_posts_info.h"

#include "tieba/info_def.h"

#include "tieba/uname_util.h"

#include "tieba/common_def.h"

#include "tieba/urate/get_urate_info.h"

#include "tieba/urate/urate_info.h"

namespace bp = boost::python;

BOOST_PYTHON_MODULE(libtieba){
DEF_VEC(ivec);
DEF_VEC(dvec);
DEF_VEC(uvec);
DEF_VEC(svec);
DEF_VEC(ulvec);
DEF_MAP(id_map);
DEF_MAP(sd_map);
DEF_MAP(si_map);

{ //::std::vector< unsigned long long >
typedef bp::class_< std::vector< unsigned long long > > ulvec_exposer_t;
ulvec_exposer_t ulvec_exposer = ulvec_exposer_t( "ulvec" );
bp::scope ulvec_scope( ulvec_exposer );
ulvec_exposer.def( bp::vector_indexing_suite< ::std::vector< unsigned long long >, true >() )
VEC_METHOD(::std::vector< unsigned long long >);
}

{ //::std::vector< unsigned int >
typedef bp::class_< std::vector< unsigned int > > vector_less__unsigned_int__greater__exposer_t;
vector_less__unsigned_int__greater__exposer_t vector_less__unsigned_int__greater__exposer = vector_less__unsigned_int__greater__exposer_t( "vector_less__unsigned_int__greater_" );
bp::scope vector_less__unsigned_int__greater__scope( vector_less__unsigned_int__greater__exposer );
vector_less__unsigned_int__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< unsigned int >, true >() )
VEC_METHOD(::std::vector< unsigned int >);
}

{ //::std::vector< std::vector< std::string > >
typedef bp::class_< std::vector< std::vector< std::string > > > vector_less__std_scope_vector_less__std_scope_string__greater___greater__exposer_t;
vector_less__std_scope_vector_less__std_scope_string__greater___greater__exposer_t vector_less__std_scope_vector_less__std_scope_string__greater___greater__exposer = vector_less__std_scope_vector_less__std_scope_string__greater___greater__exposer_t( "vector_less__std_scope_vector_less__std_scope_string__greater___greater_" );
bp::scope vector_less__std_scope_vector_less__std_scope_string__greater___greater__scope( vector_less__std_scope_vector_less__std_scope_string__greater___greater__exposer );
//WARNING: the next line of code will not compile, because "::std::vector<std::string, std::allocator<std::string> >" does not have operator== !
//         vector_less__std_scope_vector_less__std_scope_string__greater___greater__exposer.def( bp::vector_indexing_suite< ::std::vector< std::vector< std::string > > >() );
}

{ //::std::vector< std::vector< gezi::tieba::CommentInfo > >
typedef bp::class_< std::vector< std::vector< gezi::tieba::CommentInfo > > > vector_less__std_scope_vector_less__gezi_scope_tieba_scope_CommentInfo__greater___greater__exposer_t;
vector_less__std_scope_vector_less__gezi_scope_tieba_scope_CommentInfo__greater___greater__exposer_t vector_less__std_scope_vector_less__gezi_scope_tieba_scope_CommentInfo__greater___greater__exposer = vector_less__std_scope_vector_less__gezi_scope_tieba_scope_CommentInfo__greater___greater__exposer_t( "vector_less__std_scope_vector_less__gezi_scope_tieba_scope_CommentInfo__greater___greater_" );
bp::scope vector_less__std_scope_vector_less__gezi_scope_tieba_scope_CommentInfo__greater___greater__scope( vector_less__std_scope_vector_less__gezi_scope_tieba_scope_CommentInfo__greater___greater__exposer );
//WARNING: the next line of code will not compile, because "::std::vector<gezi::tieba::CommentInfo, std::allocator<gezi::tieba::CommentInfo> >" does not have operator== !
//         vector_less__std_scope_vector_less__gezi_scope_tieba_scope_CommentInfo__greater___greater__exposer.def( bp::vector_indexing_suite< ::std::vector< std::vector< gezi::tieba::CommentInfo > > >() );
}

{ //::std::vector< std::string >
typedef bp::class_< std::vector< std::string > > vector_less__std_scope_string__greater__exposer_t;
vector_less__std_scope_string__greater__exposer_t vector_less__std_scope_string__greater__exposer = vector_less__std_scope_string__greater__exposer_t( "vector_less__std_scope_string__greater_" );
bp::scope vector_less__std_scope_string__greater__scope( vector_less__std_scope_string__greater__exposer );
vector_less__std_scope_string__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< std::string >, true >() )
VEC_METHOD(::std::vector< std::string >);
}

{ //::std::vector< long long >
typedef bp::class_< std::vector< long long > > lvec_exposer_t;
lvec_exposer_t lvec_exposer = lvec_exposer_t( "lvec" );
bp::scope lvec_scope( lvec_exposer );
lvec_exposer.def( bp::vector_indexing_suite< ::std::vector< long long >, true >() )
VEC_METHOD(::std::vector< long long >);
}

bp::class_< std::vector< long long unsigned int > >("vector_less__long_long_unsigned_int__greater_")
.def( bp::vector_indexing_suite< ::std::vector< long long unsigned int >, true >() )
VEC_METHOD(::std::vector< long long unsigned int >);

{ //::std::vector< int >
typedef bp::class_< std::vector< int > > ivec_exposer_t;
ivec_exposer_t ivec_exposer = ivec_exposer_t( "ivec" );
bp::scope ivec_scope( ivec_exposer );
ivec_exposer.def( bp::vector_indexing_suite< ::std::vector< int >, true >() )
VEC_METHOD(::std::vector< int >);
}

bp::class_< std::vector< gezi::tieba::UserInfo > >("vector_less__gezi_scope_tieba_scope_UserInfo__greater_")
.def( bp::vector_indexing_suite< ::std::vector< gezi::tieba::UserInfo > >() )
VEC_METHOD(::std::vector< gezi::tieba::UserInfo >);

bp::class_< std::vector< gezi::tieba::UrlInfo > >("vector_less__gezi_scope_tieba_scope_UrlInfo__greater_")
.def( bp::vector_indexing_suite< ::std::vector< gezi::tieba::UrlInfo > >() )
VEC_METHOD(::std::vector< gezi::tieba::UrlInfo >);

bp::class_< std::vector< gezi::tieba::ThreadInfo > >("vector_less__gezi_scope_tieba_scope_ThreadInfo__greater_")
.def( bp::vector_indexing_suite< ::std::vector< gezi::tieba::ThreadInfo > >() )
VEC_METHOD(::std::vector< gezi::tieba::ThreadInfo >);

bp::class_< std::vector< gezi::tieba::PostInfo > >("vector_less__gezi_scope_tieba_scope_PostInfo__greater_")
.def( bp::vector_indexing_suite< ::std::vector< gezi::tieba::PostInfo > >() )
VEC_METHOD(::std::vector< gezi::tieba::PostInfo >);

bp::class_< std::vector< gezi::tieba::ForumInfo > >("vector_less__gezi_scope_tieba_scope_ForumInfo__greater_")
.def( bp::vector_indexing_suite< ::std::vector< gezi::tieba::ForumInfo > >() )
VEC_METHOD(::std::vector< gezi::tieba::ForumInfo >);

{ //::std::vector< gezi::tieba::CommentInfo >
typedef bp::class_< std::vector< gezi::tieba::CommentInfo > > vector_less__gezi_scope_tieba_scope_CommentInfo__greater__exposer_t;
vector_less__gezi_scope_tieba_scope_CommentInfo__greater__exposer_t vector_less__gezi_scope_tieba_scope_CommentInfo__greater__exposer = vector_less__gezi_scope_tieba_scope_CommentInfo__greater__exposer_t( "vector_less__gezi_scope_tieba_scope_CommentInfo__greater_" );
bp::scope vector_less__gezi_scope_tieba_scope_CommentInfo__greater__scope( vector_less__gezi_scope_tieba_scope_CommentInfo__greater__exposer );
vector_less__gezi_scope_tieba_scope_CommentInfo__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< gezi::tieba::CommentInfo > >() )
VEC_METHOD(::std::vector< gezi::tieba::CommentInfo >);
}

{ //::std::vector< bool >
typedef bp::class_< std::vector< bool > > BitArray_exposer_t;
BitArray_exposer_t BitArray_exposer = BitArray_exposer_t( "BitArray" );
bp::scope BitArray_scope( BitArray_exposer );
BitArray_exposer.def( bp::vector_indexing_suite< ::std::vector< bool >, true >() )
VEC_METHOD(::std::vector< bool >);
}

bp::class_< std::map< unsigned int, std::string > >("map_less__unsigned_int_comma__std_scope_string__greater_")
.def( bp::map_indexing_suite< ::std::map< unsigned int, std::string >, true >() )
MAP_METHOD(::std::map< unsigned int COMMA  std::string >);

bp::class_< std::map< unsigned int, gezi::tieba::UserInfo > >("map_less__unsigned_int_comma__gezi_scope_tieba_scope_UserInfo__greater_")
.def( bp::map_indexing_suite< ::std::map< unsigned int, gezi::tieba::UserInfo > >() )
MAP_METHOD(::std::map< unsigned int COMMA  gezi::tieba::UserInfo >);

bp::class_< std::map< unsigned int, gezi::tieba::ForumInfo > >("map_less__unsigned_int_comma__gezi_scope_tieba_scope_ForumInfo__greater_")
.def( bp::map_indexing_suite< ::std::map< unsigned int, gezi::tieba::ForumInfo > >() )
MAP_METHOD(::std::map< unsigned int COMMA  gezi::tieba::ForumInfo >);

{ //::std::map< unsigned int, gezi::tieba::UserPostNumInfo >
typedef bp::class_< std::map< unsigned int, gezi::tieba::UserPostNumInfo > > map_less__unsigned_int_comma__gezi_scope_tieba_scope_UserPostNumInfo__greater__exposer_t;
map_less__unsigned_int_comma__gezi_scope_tieba_scope_UserPostNumInfo__greater__exposer_t map_less__unsigned_int_comma__gezi_scope_tieba_scope_UserPostNumInfo__greater__exposer = map_less__unsigned_int_comma__gezi_scope_tieba_scope_UserPostNumInfo__greater__exposer_t( "map_less__unsigned_int_comma__gezi_scope_tieba_scope_UserPostNumInfo__greater_" );
bp::scope map_less__unsigned_int_comma__gezi_scope_tieba_scope_UserPostNumInfo__greater__scope( map_less__unsigned_int_comma__gezi_scope_tieba_scope_UserPostNumInfo__greater__exposer );
//WARNING: the next line of code will not compile, because "::gezi::tieba::UserPostNumInfo" does not have operator== !
//         map_less__unsigned_int_comma__gezi_scope_tieba_scope_UserPostNumInfo__greater__exposer.def( bp::map_indexing_suite< ::std::map< unsigned int, gezi::tieba::UserPostNumInfo > >() );
}

{ //::std::map< std::string, unsigned int >
typedef bp::class_< std::map< std::string, unsigned int > > map_less__std_scope_string_comma__unsigned_int__greater__exposer_t;
map_less__std_scope_string_comma__unsigned_int__greater__exposer_t map_less__std_scope_string_comma__unsigned_int__greater__exposer = map_less__std_scope_string_comma__unsigned_int__greater__exposer_t( "map_less__std_scope_string_comma__unsigned_int__greater_" );
bp::scope map_less__std_scope_string_comma__unsigned_int__greater__scope( map_less__std_scope_string_comma__unsigned_int__greater__exposer );
map_less__std_scope_string_comma__unsigned_int__greater__exposer.def( bp::map_indexing_suite< ::std::map< std::string, unsigned int >, true >() )
MAP_METHOD(::std::map< std::string COMMA  unsigned int >);
}

{ //::std::map< std::string, gezi::tieba::UserLikeForumInfo::Node >
typedef bp::class_< std::map< std::string, gezi::tieba::UserLikeForumInfo::Node > > map_less__std_scope_string_comma__gezi_scope_tieba_scope_UserLikeForumInfo_scope_Node__greater__exposer_t;
map_less__std_scope_string_comma__gezi_scope_tieba_scope_UserLikeForumInfo_scope_Node__greater__exposer_t map_less__std_scope_string_comma__gezi_scope_tieba_scope_UserLikeForumInfo_scope_Node__greater__exposer = map_less__std_scope_string_comma__gezi_scope_tieba_scope_UserLikeForumInfo_scope_Node__greater__exposer_t( "map_less__std_scope_string_comma__gezi_scope_tieba_scope_UserLikeForumInfo_scope_Node__greater_" );
bp::scope map_less__std_scope_string_comma__gezi_scope_tieba_scope_UserLikeForumInfo_scope_Node__greater__scope( map_less__std_scope_string_comma__gezi_scope_tieba_scope_UserLikeForumInfo_scope_Node__greater__exposer );
map_less__std_scope_string_comma__gezi_scope_tieba_scope_UserLikeForumInfo_scope_Node__greater__exposer.def( bp::map_indexing_suite< ::std::map< std::string, gezi::tieba::UserLikeForumInfo::Node > >() )
MAP_METHOD(::std::map< std::string COMMA  gezi::tieba::UserLikeForumInfo::Node >);
}

{ //::std::map< std::string, gezi::tieba::UrlInfo >
typedef bp::class_< std::map< std::string, gezi::tieba::UrlInfo > > map_less__std_scope_string_comma__gezi_scope_tieba_scope_UrlInfo__greater__exposer_t;
map_less__std_scope_string_comma__gezi_scope_tieba_scope_UrlInfo__greater__exposer_t map_less__std_scope_string_comma__gezi_scope_tieba_scope_UrlInfo__greater__exposer = map_less__std_scope_string_comma__gezi_scope_tieba_scope_UrlInfo__greater__exposer_t( "map_less__std_scope_string_comma__gezi_scope_tieba_scope_UrlInfo__greater_" );
bp::scope map_less__std_scope_string_comma__gezi_scope_tieba_scope_UrlInfo__greater__scope( map_less__std_scope_string_comma__gezi_scope_tieba_scope_UrlInfo__greater__exposer );
map_less__std_scope_string_comma__gezi_scope_tieba_scope_UrlInfo__greater__exposer.def( bp::map_indexing_suite< ::std::map< std::string, gezi::tieba::UrlInfo > >() )
MAP_METHOD(::std::map< std::string COMMA  gezi::tieba::UrlInfo >);
}

{ //scope begin
typedef bp::class_< std::map< std::string, boost::any > > map_less__std_scope_string_comma__boost_scope_any__greater__exposer_t;
map_less__std_scope_string_comma__boost_scope_any__greater__exposer_t map_less__std_scope_string_comma__boost_scope_any__greater__exposer = map_less__std_scope_string_comma__boost_scope_any__greater__exposer_t("map_less__std_scope_string_comma__boost_scope_any__greater_");
bp::scope map_less__std_scope_string_comma__boost_scope_any__greater__scope( map_less__std_scope_string_comma__boost_scope_any__greater__exposer );
//WARNING: the next line of code will not compile, because "::boost::any" does not have operator== !
//         map_less__std_scope_string_comma__boost_scope_any__greater__exposer.def( bp::map_indexing_suite< ::std::map< std::string, boost::any > >() );
} //scope end

bp::class_< std::map< long long unsigned int, gezi::tieba::ThreadInfo > >("map_less__long_long_unsigned_int_comma__gezi_scope_tieba_scope_ThreadInfo__greater_")
.def( bp::map_indexing_suite< ::std::map< long long unsigned int, gezi::tieba::ThreadInfo > >() )
MAP_METHOD(::std::map< long long unsigned int COMMA  gezi::tieba::ThreadInfo >);

bp::class_< std::map< long long unsigned int, gezi::tieba::PostInfo > >("map_less__long_long_unsigned_int_comma__gezi_scope_tieba_scope_PostInfo__greater_")
.def( bp::map_indexing_suite< ::std::map< long long unsigned int, gezi::tieba::PostInfo > >() )
MAP_METHOD(::std::map< long long unsigned int COMMA  gezi::tieba::PostInfo >);

bp::class_< std::map< long long unsigned int, gezi::tieba::DeleteInfo > >("map_less__long_long_unsigned_int_comma__gezi_scope_tieba_scope_DeleteInfo__greater_")
.def( bp::map_indexing_suite< ::std::map< long long unsigned int, gezi::tieba::DeleteInfo > >() )
MAP_METHOD(::std::map< long long unsigned int COMMA  gezi::tieba::DeleteInfo >);

{ //::gezi::IpFinder
typedef bp::class_< gezi::IpFinder > IpFinder_exposer_t;
IpFinder_exposer_t IpFinder_exposer = IpFinder_exposer_t( "IpFinder", bp::init< >() );
bp::scope IpFinder_scope( IpFinder_exposer );
bp::scope().attr("REDIRECT_MODE_1") = (int)gezi::IpFinder::REDIRECT_MODE_1;
bp::scope().attr("REDIRECT_MODE_2") = (int)gezi::IpFinder::REDIRECT_MODE_2;
IpFinder_exposer.def( bp::init< std::string >(( bp::arg("file") )) );
bp::implicitly_convertible< std::string, gezi::IpFinder >();
IpFinder_exposer.def( bp::init< char const * >(( bp::arg("pszFileName") )) );
bp::implicitly_convertible< char const *, gezi::IpFinder >();
{ //::gezi::IpFinder::GetAddressByIp

typedef void ( ::gezi::IpFinder::*GetAddressByIp_function_type )( long unsigned int,::std::string &,::std::string & ) const;

IpFinder_exposer.def(
"GetAddressByIp"
, GetAddressByIp_function_type( &::gezi::IpFinder::GetAddressByIp )
, ( bp::arg("ipValue"), bp::arg("strCountry"), bp::arg("strLocation") ) );

}
{ //::gezi::IpFinder::GetAddressByIp

typedef void ( ::gezi::IpFinder::*GetAddressByIp_function_type )( char const *,::std::string &,::std::string & ) const;

IpFinder_exposer.def(
"GetAddressByIp"
, GetAddressByIp_function_type( &::gezi::IpFinder::GetAddressByIp )
, ( bp::arg("pszIp"), bp::arg("strCountry"), bp::arg("strLocation") ) );

}
{ //::gezi::IpFinder::GetAddressByIp

typedef void ( ::gezi::IpFinder::*GetAddressByIp_function_type )( ::std::string const &,::std::string &,::std::string & ) const;

IpFinder_exposer.def(
"GetAddressByIp"
, GetAddressByIp_function_type( &::gezi::IpFinder::GetAddressByIp )
, ( bp::arg("ip"), bp::arg("strCountry"), bp::arg("strLocation") ) );

}
{ //::gezi::IpFinder::GetAddressByOffset

typedef void ( ::gezi::IpFinder::*GetAddressByOffset_function_type )( long unsigned int,::std::string &,::std::string & ) const;

IpFinder_exposer.def(
"GetAddressByOffset"
, GetAddressByOffset_function_type( &::gezi::IpFinder::GetAddressByOffset )
, ( bp::arg("ulOffset"), bp::arg("strCountry"), bp::arg("strLocation") ) );

}
{ //::gezi::IpFinder::GetString

typedef long unsigned int ( ::gezi::IpFinder::*GetString_function_type )( ::std::string &,long unsigned int ) const;

IpFinder_exposer.def(
"GetString"
, GetString_function_type( &::gezi::IpFinder::GetString )
, ( bp::arg("str"), bp::arg("indexStart") ) );

}
{ //::gezi::IpFinder::GetValue3

typedef long unsigned int ( ::gezi::IpFinder::*GetValue3_function_type )( long unsigned int ) const;

IpFinder_exposer.def(
"GetValue3"
, GetValue3_function_type( &::gezi::IpFinder::GetValue3 )
, ( bp::arg("indexStart") ) );

}
{ //::gezi::IpFinder::GetValue4

typedef long unsigned int ( ::gezi::IpFinder::*GetValue4_function_type )( long unsigned int ) const;

IpFinder_exposer.def(
"GetValue4"
, GetValue4_function_type( &::gezi::IpFinder::GetValue4 )
, ( bp::arg("indexStart") ) );

}
{ //::gezi::IpFinder::Init

typedef bool ( ::gezi::IpFinder::*Init_function_type )( ::std::string ) ;

IpFinder_exposer.def(
"Init"
, Init_function_type( &::gezi::IpFinder::Init )
, ( bp::arg("file") ) );

}
{ //::gezi::IpFinder::IpString2IpValue

typedef long unsigned int ( ::gezi::IpFinder::*IpString2IpValue_function_type )( char const * ) const;

IpFinder_exposer.def(
"IpString2IpValue"
, IpString2IpValue_function_type( &::gezi::IpFinder::IpString2IpValue )
, ( bp::arg("pszIp") ) );

}
{ //::gezi::IpFinder::IpValue2IpString

typedef void ( ::gezi::IpFinder::*IpValue2IpString_function_type )( long unsigned int,char *,int ) const;

IpFinder_exposer.def(
"IpValue2IpString"
, IpValue2IpString_function_type( &::gezi::IpFinder::IpValue2IpString )
, ( bp::arg("ipValue"), bp::arg("pszIpAddress"), bp::arg("nMaxCount") ) );

}
{ //::gezi::IpFinder::IsRightIpString

typedef bool ( ::gezi::IpFinder::*IsRightIpString_function_type )( char const * ) const;

IpFinder_exposer.def(
"IsRightIpString"
, IsRightIpString_function_type( &::gezi::IpFinder::IsRightIpString )
, ( bp::arg("pszIp") ) );

}
{ //::gezi::IpFinder::Open

typedef bool ( ::gezi::IpFinder::*Open_function_type )( ::std::string ) ;

IpFinder_exposer.def(
"Open"
, Open_function_type( &::gezi::IpFinder::Open )
, ( bp::arg("file") ) );

}
{ //::gezi::IpFinder::Open

typedef bool ( ::gezi::IpFinder::*Open_function_type )( char const * ) ;

IpFinder_exposer.def(
"Open"
, Open_function_type( &::gezi::IpFinder::Open )
, ( bp::arg("pszFileName") ) );

}
{ //::gezi::IpFinder::OutputData

typedef long unsigned int ( ::gezi::IpFinder::*OutputData_function_type )( char const *,long unsigned int,long unsigned int ) const;

IpFinder_exposer.def(
"OutputData"
, OutputData_function_type( &::gezi::IpFinder::OutputData )
, ( bp::arg("pszFileName"), bp::arg("indexStart")=(long unsigned int)(0), bp::arg("indexEnd")=(long unsigned int)(0) ) );

}
{ //::gezi::IpFinder::OutputDataByIp

typedef long unsigned int ( ::gezi::IpFinder::*OutputDataByIp_function_type )( char const *,long unsigned int,long unsigned int ) const;

IpFinder_exposer.def(
"OutputDataByIp"
, OutputDataByIp_function_type( &::gezi::IpFinder::OutputDataByIp )
, ( bp::arg("pszFileName"), bp::arg("ipValueStart"), bp::arg("ipValueEnd") ) );

}
{ //::gezi::IpFinder::OutputDataByIp

typedef long unsigned int ( ::gezi::IpFinder::*OutputDataByIp_function_type )( char const *,char const *,char const * ) const;

IpFinder_exposer.def(
"OutputDataByIp"
, OutputDataByIp_function_type( &::gezi::IpFinder::OutputDataByIp )
, ( bp::arg("pszFileName"), bp::arg("pszStartIp"), bp::arg("pszEndIp") ) );

}
{ //::gezi::IpFinder::SearchIp

typedef long unsigned int ( ::gezi::IpFinder::*SearchIp_function_type )( long unsigned int,long unsigned int,long unsigned int ) const;

IpFinder_exposer.def(
"SearchIp"
, SearchIp_function_type( &::gezi::IpFinder::SearchIp )
, ( bp::arg("ipValue"), bp::arg("indexStart")=(long unsigned int)(0), bp::arg("indexEnd")=(long unsigned int)(0) ) );

}
{ //::gezi::IpFinder::SearchIp

typedef long unsigned int ( ::gezi::IpFinder::*SearchIp_function_type )( char const *,long unsigned int,long unsigned int ) const;

IpFinder_exposer.def(
"SearchIp"
, SearchIp_function_type( &::gezi::IpFinder::SearchIp )
, ( bp::arg("pszIp"), bp::arg("indexStart")=(long unsigned int)(0), bp::arg("indexEnd")=(long unsigned int)(0) ) );

}
IpFinder_exposer.def_readonly( "INDEX_LENGTH", gezi::IpFinder::INDEX_LENGTH );
IpFinder_exposer.def_readonly( "IP_LENGTH", gezi::IpFinder::IP_LENGTH );
IpFinder_exposer.def_readonly( "OFFSET_LENGTH", gezi::IpFinder::OFFSET_LENGTH );
}

bp::class_< gezi::tieba::CommentInfo >( "CommentInfo" )
.def( bp::self == bp::self )
.def_readwrite( "commentId", &gezi::tieba::CommentInfo::commentId )
.def_readwrite( "content", &gezi::tieba::CommentInfo::content )
.def_readwrite( "createTime", &gezi::tieba::CommentInfo::createTime )
.def_readwrite( "ip", &gezi::tieba::CommentInfo::ip )
.def_readwrite( "postId", &gezi::tieba::CommentInfo::postId )
.def_readwrite( "threadId", &gezi::tieba::CommentInfo::threadId )
.def_readwrite( "userId", &gezi::tieba::CommentInfo::userId )
.def_readwrite( "userName", &gezi::tieba::CommentInfo::userName );

bp::class_< gezi::tieba::DeleteInfo >( "DeleteInfo" )
.def( bp::self == bp::self )
.def_readwrite( "isDeleted", &gezi::tieba::DeleteInfo::isDeleted )
.def_readwrite( "monitorType", &gezi::tieba::DeleteInfo::monitorType )
.def_readwrite( "opTime", &gezi::tieba::DeleteInfo::opTime )
.def_readwrite( "opUid", &gezi::tieba::DeleteInfo::opUid )
.def_readwrite( "pid", &gezi::tieba::DeleteInfo::pid )
.def_readwrite( "tid", &gezi::tieba::DeleteInfo::tid );

bp::class_< gezi::tieba::PostInfo >( "PostInfo" )
.def(
"IsQuote"
, (bool ( ::gezi::tieba::PostInfo::* )(  ) const)( &::gezi::tieba::PostInfo::IsQuote ) )
.def(
"IsThread"
, (bool ( ::gezi::tieba::PostInfo::* )(  ) const)( &::gezi::tieba::PostInfo::IsThread ) )
.def( bp::self < bp::self )
.def( bp::self == bp::self )
.def_readwrite( "content", &gezi::tieba::PostInfo::content )
.def_readwrite( "createTime", &gezi::tieba::PostInfo::createTime )
.def_readwrite( "forumId", &gezi::tieba::PostInfo::forumId )
.def_readwrite( "forumName", &gezi::tieba::PostInfo::forumName )
.def_readwrite( "ip", &gezi::tieba::PostInfo::ip )
.def_readwrite( "postId", &gezi::tieba::PostInfo::postId )
.def_readwrite( "quoteInfo", &gezi::tieba::PostInfo::quoteInfo )
.def_readwrite( "threadId", &gezi::tieba::PostInfo::threadId )
.def_readwrite( "title", &gezi::tieba::PostInfo::title )
.def_readwrite( "userId", &gezi::tieba::PostInfo::userId )
.def_readwrite( "userName", &gezi::tieba::PostInfo::userName );

bp::class_< gezi::tieba::ExtendedPostInfo, bp::bases< gezi::tieba::PostInfo > >( "ExtendedPostInfo" )
.def_readwrite( "urlInfoMap", &gezi::tieba::ExtendedPostInfo::urlInfoMap )
.def_readwrite( "urls", &gezi::tieba::ExtendedPostInfo::urls );

bp::class_< gezi::tieba::ForumInfo >( "ForumInfo" )
.def( bp::self == bp::self )
.def_readwrite( "fid", &gezi::tieba::ForumInfo::fid )
.def_readwrite( "hotValue", &gezi::tieba::ForumInfo::hotValue )
.def_readwrite( "level1Name", &gezi::tieba::ForumInfo::level1Name )
.def_readwrite( "level2Name", &gezi::tieba::ForumInfo::level2Name )
.def_readwrite( "rank", &gezi::tieba::ForumInfo::rank );

bp::class_< gezi::tieba::FullPostsInfo >( "FullPostsInfo" )
.def(
"GetComments"
, (::gezi::tieba::Comments const & ( ::gezi::tieba::FullPostsInfo::* )( int ) const)( &::gezi::tieba::FullPostsInfo::GetComments )
, ( bp::arg("idx") )
, bp::return_value_policy< bp::copy_const_reference >() )
.def(
"IsValid"
, (bool ( ::gezi::tieba::FullPostsInfo::* )(  ) )( &::gezi::tieba::FullPostsInfo::IsValid ) )
.def(
"size"
, (::size_t ( ::gezi::tieba::FullPostsInfo::* )(  ) )( &::gezi::tieba::FullPostsInfo::size ) )
.def_readwrite( "commentsVec", &gezi::tieba::FullPostsInfo::commentsVec )
.def_readwrite( "contents", &gezi::tieba::FullPostsInfo::contents )
.def_readwrite( "forumId", &gezi::tieba::FullPostsInfo::forumId )
.def_readwrite( "forumName", &gezi::tieba::FullPostsInfo::forumName )
.def_readwrite( "ips", &gezi::tieba::FullPostsInfo::ips )
.def_readwrite( "isDeleted", &gezi::tieba::FullPostsInfo::isDeleted )
.def_readwrite( "numPosts", &gezi::tieba::FullPostsInfo::numPosts )
.def_readwrite( "pids", &gezi::tieba::FullPostsInfo::pids )
.def_readwrite( "threadId", &gezi::tieba::FullPostsInfo::threadId )
.def_readwrite( "times", &gezi::tieba::FullPostsInfo::times )
.def_readwrite( "title", &gezi::tieba::FullPostsInfo::title )
.def_readwrite( "uids", &gezi::tieba::FullPostsInfo::uids )
.def_readwrite( "unames", &gezi::tieba::FullPostsInfo::unames );

bp::class_< gezi::tieba::ImgInfo >( "ImgInfo" )
.def( bp::self == bp::self )
.def(
"size"
, (::size_t ( ::gezi::tieba::ImgInfo::* )(  ) )( &::gezi::tieba::ImgInfo::size ) )
.def_readwrite( "color_rate", &gezi::tieba::ImgInfo::color_rate )
.def_readwrite( "gameporn_rate", &gezi::tieba::ImgInfo::gameporn_rate )
.def_readwrite( "imgCount", &gezi::tieba::ImgInfo::imgCount )
.def_readwrite( "ocr_img", &gezi::tieba::ImgInfo::ocr_img )
.def_readwrite( "pid", &gezi::tieba::ImgInfo::pid )
.def_readwrite( "porn_rate", &gezi::tieba::ImgInfo::porn_rate )
.def_readwrite( "simi_rate", &gezi::tieba::ImgInfo::simi_rate )
.def_readwrite( "text_ratio", &gezi::tieba::ImgInfo::text_ratio )
.def_readwrite( "textbox_num", &gezi::tieba::ImgInfo::textbox_num );

bp::class_< gezi::tieba::PostsInfo >( "PostsInfo" )
.def(
"size"
, (::size_t ( ::gezi::tieba::PostsInfo::* )(  ) )( &::gezi::tieba::PostsInfo::size ) )
.def_readwrite( "contents", &gezi::tieba::PostsInfo::contents )
.def_readwrite( "fids", &gezi::tieba::PostsInfo::fids )
.def_readwrite( "fnames", &gezi::tieba::PostsInfo::fnames )
.def_readwrite( "ips", &gezi::tieba::PostsInfo::ips )
.def_readwrite( "isThreads", &gezi::tieba::PostsInfo::isThreads )
.def_readwrite( "pids", &gezi::tieba::PostsInfo::pids )
.def_readwrite( "tids", &gezi::tieba::PostsInfo::tids )
.def_readwrite( "times", &gezi::tieba::PostsInfo::times )
.def_readwrite( "titles", &gezi::tieba::PostsInfo::titles )
.def_readwrite( "uids", &gezi::tieba::PostsInfo::uids );

//    bp::class_< gezi::tieba::PyHack_Comments >( "PyHack_Comments" )
//        .def_readwrite( "comments", &gezi::tieba::PyHack_Comments::comments );

bp::class_< gezi::tieba::QuoteInfo >( "QuoteInfo" )
.def( bp::self == bp::self )
.def_readwrite( "content", &gezi::tieba::QuoteInfo::content )
.def_readwrite( "ip", &gezi::tieba::QuoteInfo::ip )
.def_readwrite( "postId", &gezi::tieba::QuoteInfo::postId )
.def_readwrite( "userId", &gezi::tieba::QuoteInfo::userId )
.def_readwrite( "userName", &gezi::tieba::QuoteInfo::userName );

bp::class_< gezi::tieba::ReplyInfo >( "ReplyInfo" )
.def_readwrite( "createTime", &gezi::tieba::ReplyInfo::createTime )
.def_readwrite( "forumId", &gezi::tieba::ReplyInfo::forumId )
.def_readwrite( "ip", &gezi::tieba::ReplyInfo::ip )
.def_readwrite( "postId", &gezi::tieba::ReplyInfo::postId )
.def_readwrite( "threadId", &gezi::tieba::ReplyInfo::threadId )
.def_readwrite( "userId", &gezi::tieba::ReplyInfo::userId );

bp::class_< gezi::tieba::ThreadInfo >( "ThreadInfo" )
.def( bp::self == bp::self )
.def_readwrite( "address", &gezi::tieba::ThreadInfo::address )
.def_readwrite( "content", &gezi::tieba::ThreadInfo::content )
.def_readwrite( "createTime", &gezi::tieba::ThreadInfo::createTime )
.def_readwrite( "forumId", &gezi::tieba::ThreadInfo::forumId )
.def_readwrite( "forumName", &gezi::tieba::ThreadInfo::forumName )
.def_readwrite( "hasMedia", &gezi::tieba::ThreadInfo::hasMedia )
.def_readwrite( "ip", &gezi::tieba::ThreadInfo::ip )
.def_readwrite( "isDeleted", &gezi::tieba::ThreadInfo::isDeleted )
.def_readwrite( "postId", &gezi::tieba::ThreadInfo::postId )
.def_readwrite( "threadId", &gezi::tieba::ThreadInfo::threadId )
.def_readwrite( "title", &gezi::tieba::ThreadInfo::title )
.def_readwrite( "userId", &gezi::tieba::ThreadInfo::userId );

bp::class_< gezi::tieba::UrateInfo >( "UrateInfo" )
.def(
"IsValid"
, (bool ( ::gezi::tieba::UrateInfo::* )(  ) )( &::gezi::tieba::UrateInfo::IsValid ) )
.def(
"size"
, (::size_t ( ::gezi::tieba::UrateInfo::* )(  ) )( &::gezi::tieba::UrateInfo::size ) )
.def(
"type"
, (int ( ::gezi::tieba::UrateInfo::* )(  ) )( &::gezi::tieba::UrateInfo::type ) )
.def_readwrite( "imginfo", &gezi::tieba::UrateInfo::imginfo )
.def_readwrite( "isWhiteTitle", &gezi::tieba::UrateInfo::isWhiteTitle )
.def_readwrite( "nowPostInfo", &gezi::tieba::UrateInfo::nowPostInfo )
.def_readwrite( "postId", &gezi::tieba::UrateInfo::postId )
.def_readwrite( "postsInfo", &gezi::tieba::UrateInfo::postsInfo )
.def_readwrite( "urlInfoMap", &gezi::tieba::UrateInfo::urlInfoMap )
.def_readwrite( "urlsVec", &gezi::tieba::UrateInfo::urlsVec )
.def_readwrite( "userInfo", &gezi::tieba::UrateInfo::userInfo )
.def_readwrite( "userLikeForumInfo", &gezi::tieba::UrateInfo::userLikeForumInfo )
.def_readwrite( "userPostNumInForum", &gezi::tieba::UrateInfo::userPostNumInForum )
.def_readwrite( "userPostNumInfo", &gezi::tieba::UrateInfo::userPostNumInfo );

bp::class_< gezi::tieba::UrlInfo >( "UrlInfo" )
.def( bp::self == bp::self )
.def_readwrite( "content", &gezi::tieba::UrlInfo::content )
.def_readwrite( "isJump", &gezi::tieba::UrlInfo::isJump )
.def_readwrite( "jumRank", &gezi::tieba::UrlInfo::jumRank )
.def_readwrite( "rank", &gezi::tieba::UrlInfo::rank )
.def_readwrite( "url", &gezi::tieba::UrlInfo::url );

bp::class_< gezi::tieba::UserInfo >( "UserInfo" )
.def( bp::self == bp::self )
.def_readwrite( "birthYear", &gezi::tieba::UserInfo::birthYear )
.def_readwrite( "email", &gezi::tieba::UserInfo::email )
.def_readwrite( "followCount", &gezi::tieba::UserInfo::followCount )
.def_readwrite( "followedCount", &gezi::tieba::UserInfo::followedCount )
.def_readwrite( "isGroupOwner", &gezi::tieba::UserInfo::isGroupOwner )
.def_readwrite( "mobile", &gezi::tieba::UserInfo::mobile )
.def_readwrite( "regTime", &gezi::tieba::UserInfo::regTime )
.def_readwrite( "userDetail", &gezi::tieba::UserInfo::userDetail )
.def_readwrite( "userId", &gezi::tieba::UserInfo::userId )
.def_readwrite( "userName", &gezi::tieba::UserInfo::userName )
.def_readwrite( "userSex", &gezi::tieba::UserInfo::userSex )
.def_readwrite( "userStatus", &gezi::tieba::UserInfo::userStatus )
.def_readwrite( "userTag", &gezi::tieba::UserInfo::userTag )
.def_readwrite( "userType", &gezi::tieba::UserInfo::userType );

{ //::gezi::tieba::UserLikeForumInfo
typedef bp::class_< gezi::tieba::UserLikeForumInfo > UserLikeForumInfo_exposer_t;
UserLikeForumInfo_exposer_t UserLikeForumInfo_exposer = UserLikeForumInfo_exposer_t( "UserLikeForumInfo" );
bp::scope UserLikeForumInfo_scope( UserLikeForumInfo_exposer );
bp::class_< gezi::tieba::UserLikeForumInfo::Node >( "Node" )
.def( bp::self < bp::self )
.def( bp::self == bp::self )
.def_readwrite( "curScore", &gezi::tieba::UserLikeForumInfo::Node::curScore )
.def_readwrite( "forumName", &gezi::tieba::UserLikeForumInfo::Node::forumName )
.def_readwrite( "leftScore", &gezi::tieba::UserLikeForumInfo::Node::leftScore )
.def_readwrite( "level", &gezi::tieba::UserLikeForumInfo::Node::level )
.def_readwrite( "time", &gezi::tieba::UserLikeForumInfo::Node::time );
{ //::gezi::tieba::UserLikeForumInfo::GetLevel

typedef int ( ::gezi::tieba::UserLikeForumInfo::*GetLevel_function_type )( ::std::string ) ;

UserLikeForumInfo_exposer.def(
"GetLevel"
, GetLevel_function_type( &::gezi::tieba::UserLikeForumInfo::GetLevel )
, ( bp::arg("forumName") ) );

}
UserLikeForumInfo_exposer.def_readwrite( "forumNames", &gezi::tieba::UserLikeForumInfo::forumNames );
UserLikeForumInfo_exposer.def_readwrite( "infoMap", &gezi::tieba::UserLikeForumInfo::infoMap );
UserLikeForumInfo_exposer.def_readwrite( "levels", &gezi::tieba::UserLikeForumInfo::levels );
UserLikeForumInfo_exposer.def_readwrite( "maxLevel", &gezi::tieba::UserLikeForumInfo::maxLevel );
UserLikeForumInfo_exposer.def_readwrite( "numLikes", &gezi::tieba::UserLikeForumInfo::numLikes );
UserLikeForumInfo_exposer.def_readwrite( "sumLevels", &gezi::tieba::UserLikeForumInfo::sumLevels );
UserLikeForumInfo_exposer.def_readwrite( "userId", &gezi::tieba::UserLikeForumInfo::userId );
}

bp::class_< gezi::tieba::UserPostNumInfo >( "UserPostNumInfo" )
.def_readwrite( "numGoods", &gezi::tieba::UserPostNumInfo::numGoods )
.def_readwrite( "numPhotos", &gezi::tieba::UserPostNumInfo::numPhotos )
.def_readwrite( "numPosts", &gezi::tieba::UserPostNumInfo::numPosts )
.def_readwrite( "numThreads", &gezi::tieba::UserPostNumInfo::numThreads )
.def_readwrite( "userId", &gezi::tieba::UserPostNumInfo::userId );

bp::class_< gezi::tieba::UserPostsInfo >( "UserPostsInfo" )
.def(
"size"
, (::size_t ( ::gezi::tieba::UserPostsInfo::* )(  ) )( &::gezi::tieba::UserPostsInfo::size ) )
.def_readwrite( "contents", &gezi::tieba::UserPostsInfo::contents )
.def_readwrite( "fids", &gezi::tieba::UserPostsInfo::fids )
.def_readwrite( "fnames", &gezi::tieba::UserPostsInfo::fnames )
.def_readwrite( "hotValues", &gezi::tieba::UserPostsInfo::hotValues )
.def_readwrite( "ips", &gezi::tieba::UserPostsInfo::ips )
.def_readwrite( "isPostsDeleted", &gezi::tieba::UserPostsInfo::isPostsDeleted )
.def_readwrite( "isThreads", &gezi::tieba::UserPostsInfo::isThreads )
.def_readwrite( "level1Names", &gezi::tieba::UserPostsInfo::level1Names )
.def_readwrite( "level2Names", &gezi::tieba::UserPostsInfo::level2Names )
.def_readwrite( "numPosts", &gezi::tieba::UserPostsInfo::numPosts )
.def_readwrite( "pids", &gezi::tieba::UserPostsInfo::pids )
.def_readwrite( "ranks", &gezi::tieba::UserPostsInfo::ranks )
.def_readwrite( "tids", &gezi::tieba::UserPostsInfo::tids )
.def_readwrite( "times", &gezi::tieba::UserPostsInfo::times )
.def_readwrite( "titles", &gezi::tieba::UserPostsInfo::titles )
.def_readwrite( "userId", &gezi::tieba::UserPostsInfo::userId );

{ //::gezi::get_address

typedef ::std::string ( *get_address_function_type )( ::gezi::IpFinder &,::uint64 );

bp::def(
"get_address"
, get_address_function_type( &::gezi::get_address )
, ( bp::arg("ipFinder"), bp::arg("ipl") ) );

}

{ //::gezi::tieba::get_delete_info

typedef ::gezi::tieba::DeleteInfo ( *get_delete_info_function_type )( ::uint64,::std::string );

bp::def(
"get_delete_info"
, get_delete_info_function_type( &::gezi::tieba::get_delete_info )
, ( bp::arg("id"), bp::arg("type") ) );

}

{ //::gezi::tieba::get_delete_info_str

typedef ::std::string ( *get_delete_info_str_function_type )( ::std::string );

bp::def(
"get_delete_info_str"
, get_delete_info_str_function_type( &::gezi::tieba::get_delete_info_str )
, ( bp::arg("pids") ) );

}

{ //::gezi::tieba::get_deleted_posts

typedef ::std::set< long long unsigned int > ( *get_deleted_posts_function_type )( ::std::vector< unsigned long long > const &,bool );

bp::def(
"get_deleted_posts"
, get_deleted_posts_function_type( &::gezi::tieba::get_deleted_posts )
, ( bp::arg("pids"), bp::arg("allowError")=(bool)(true) ) );

}

{ //::gezi::tieba::get_deleted_threads

typedef ::std::set< long long unsigned int > ( *get_deleted_threads_function_type )( ::std::vector< unsigned long long > const &,bool );

bp::def(
"get_deleted_threads"
, get_deleted_threads_function_type( &::gezi::tieba::get_deleted_threads )
, ( bp::arg("tids"), bp::arg("allowError")=(bool)(true) ) );

}

{ //::gezi::tieba::get_deletes_info

typedef ::std::map< long long unsigned int, gezi::tieba::DeleteInfo > ( *get_deletes_info_function_type )( ::std::vector< unsigned long long > const &,::std::string,bool );

bp::def(
"get_deletes_info"
, get_deletes_info_function_type( &::gezi::tieba::get_deletes_info )
, ( bp::arg("ids_"), bp::arg("type"), bp::arg("allowError")=(bool)(true) ) );

}

{ //::gezi::tieba::get_extended_post_info

typedef ::gezi::tieba::ExtendedPostInfo ( *get_extended_post_info_function_type )( ::uint64 );

bp::def(
"get_extended_post_info"
, get_extended_post_info_function_type( &::gezi::tieba::get_extended_post_info )
, ( bp::arg("pid") ) );

}

{ //::gezi::tieba::get_field_method

typedef void ( *get_field_method_function_type )( ::std::string,::std::string &,::std::string & );

bp::def(
"get_field_method"
, get_field_method_function_type( &::gezi::tieba::get_field_method )
, ( bp::arg("url"), bp::arg("field"), bp::arg("method") ) );

}

{ //::gezi::tieba::get_forum_id

typedef ::uint ( *get_forum_id_function_type )( ::std::string );

bp::def(
"get_forum_id"
, get_forum_id_function_type( &::gezi::tieba::get_forum_id )
, ( bp::arg("forumName") ) );

}

{ //::gezi::tieba::get_forum_id_str

typedef ::std::string ( *get_forum_id_str_function_type )( ::std::string );

bp::def(
"get_forum_id_str"
, get_forum_id_str_function_type( &::gezi::tieba::get_forum_id_str )
, ( bp::arg("forumNames") ) );

}

{ //::gezi::tieba::get_forum_ids

typedef ::std::vector< unsigned int > ( *get_forum_ids_function_type )( ::svec const &,bool );

bp::def(
"get_forum_ids"
, get_forum_ids_function_type( &::gezi::tieba::get_forum_ids )
, ( bp::arg("forumNames_"), bp::arg("allowError")=(bool)(true) ) );

}

{ //::gezi::tieba::get_forum_ids_map

typedef ::std::map< std::string, unsigned int > ( *get_forum_ids_map_function_type )( ::svec const & );

bp::def(
"get_forum_ids_map"
, get_forum_ids_map_function_type( &::gezi::tieba::get_forum_ids_map )
, ( bp::arg("forumNames_") ) );

}

{ //::gezi::tieba::get_forum_info

typedef ::gezi::tieba::ForumInfo ( *get_forum_info_function_type )( ::std::string );

bp::def(
"get_forum_info"
, get_forum_info_function_type( &::gezi::tieba::get_forum_info )
, ( bp::arg("forumName") ) );

}

{ //::gezi::tieba::get_forum_info

typedef ::gezi::tieba::ForumInfo ( *get_forum_info_function_type )( ::uint );

bp::def(
"get_forum_info"
, get_forum_info_function_type( &::gezi::tieba::get_forum_info )
, ( bp::arg("forumId") ) );

}

{ //::gezi::tieba::get_forum_info_str

typedef ::std::string ( *get_forum_info_str_function_type )( ::uint );

bp::def(
"get_forum_info_str"
, get_forum_info_str_function_type( &::gezi::tieba::get_forum_info_str )
, ( bp::arg("forumId") ) );

}

{ //::gezi::tieba::get_forum_info_str

typedef ::std::string ( *get_forum_info_str_function_type )( ::std::string );

bp::def(
"get_forum_info_str"
, get_forum_info_str_function_type( &::gezi::tieba::get_forum_info_str )
, ( bp::arg("params") ) );

}

{ //::gezi::tieba::get_forum_name

typedef ::std::string ( *get_forum_name_function_type )( ::uint );

bp::def(
"get_forum_name"
, get_forum_name_function_type( &::gezi::tieba::get_forum_name )
, ( bp::arg("forumId") ) );

}

{ //::gezi::tieba::get_forum_name_str

typedef ::std::string ( *get_forum_name_str_function_type )( ::std::vector< unsigned int > const & );

bp::def(
"get_forum_name_str"
, get_forum_name_str_function_type( &::gezi::tieba::get_forum_name_str )
, ( bp::arg("forumIds") ) );

}

{ //::gezi::tieba::get_forum_name_str

typedef ::std::string ( *get_forum_name_str_function_type )( ::uint );

bp::def(
"get_forum_name_str"
, get_forum_name_str_function_type( &::gezi::tieba::get_forum_name_str )
, ( bp::arg("forumId") ) );

}

{ //::gezi::tieba::get_forum_name_str

typedef ::std::string ( *get_forum_name_str_function_type )( ::std::string );

bp::def(
"get_forum_name_str"
, get_forum_name_str_function_type( &::gezi::tieba::get_forum_name_str )
, ( bp::arg("params") ) );

}

{ //::gezi::tieba::get_forum_names

typedef ::std::vector< std::string > ( *get_forum_names_function_type )( ::std::vector< unsigned int > const & );

bp::def(
"get_forum_names"
, get_forum_names_function_type( &::gezi::tieba::get_forum_names )
, ( bp::arg("forumIds") ) );

}

{ //::gezi::tieba::get_forum_names_map

typedef ::std::map< unsigned int, std::string > ( *get_forum_names_map_function_type )( ::std::vector< unsigned int > const & );

bp::def(
"get_forum_names_map"
, get_forum_names_map_function_type( &::gezi::tieba::get_forum_names_map )
, ( bp::arg("forumIds_") ) );

}

{ //::gezi::tieba::get_forums_info

typedef ::std::vector< gezi::tieba::ForumInfo > ( *get_forums_info_function_type )( ::std::vector< unsigned int >,bool );

bp::def(
"get_forums_info"
, get_forums_info_function_type( &::gezi::tieba::get_forums_info )
, ( bp::arg("forumIds_"), bp::arg("allowError")=(bool)(true) ) );

}

{ //::gezi::tieba::get_forums_info_map

typedef ::std::map< unsigned int, gezi::tieba::ForumInfo > ( *get_forums_info_map_function_type )( ::std::vector< unsigned int > );

bp::def(
"get_forums_info_map"
, get_forums_info_map_function_type( &::gezi::tieba::get_forums_info_map )
, ( bp::arg("forumIds_") ) );

}

{ //::gezi::tieba::get_forums_info_str

typedef ::std::string ( *get_forums_info_str_function_type )( ::std::vector< unsigned int > const & );

bp::def(
"get_forums_info_str"
, get_forums_info_str_function_type( &::gezi::tieba::get_forums_info_str )
, ( bp::arg("forumIds") ) );

}

{ //::gezi::tieba::get_full_posts_info

typedef ::gezi::tieba::FullPostsInfo ( *get_full_posts_info_function_type )( ::uint64,int,int,int,::uint64 );

bp::def(
"get_full_posts_info"
, get_full_posts_info_function_type( &::gezi::tieba::get_full_posts_info )
, ( bp::arg("threadId"), bp::arg("resNum")=(int)(100), bp::arg("offset")=(int)(0), bp::arg("hasComment")=(int)(0), bp::arg("postId")=(long long unsigned int)(0) ) );

}

{ //::gezi::tieba::get_full_posts_info_str

typedef ::std::string ( *get_full_posts_info_str_function_type )( ::uint64,int,int,int,::uint64 );

bp::def(
"get_full_posts_info_str"
, get_full_posts_info_str_function_type( &::gezi::tieba::get_full_posts_info_str )
, ( bp::arg("threadId"), bp::arg("resNum")=(int)(100), bp::arg("offset")=(int)(0), bp::arg("hasComment")=(int)(0), bp::arg("postId")=(long long unsigned int)(0) ) );

}

{ //::gezi::tieba::get_full_urate_info

typedef ::gezi::tieba::UrateInfo ( *get_full_urate_info_function_type )( ::uint64,int,bool );

bp::def(
"get_full_urate_info"
, get_full_urate_info_function_type( &::gezi::tieba::get_full_urate_info )
, ( bp::arg("pid"), bp::arg("historyNum")=(int)(25), bp::arg("needUrl")=(bool)(true) ) );

}

{ //::gezi::tieba::get_img_info

typedef ::gezi::tieba::ImgInfo ( *get_img_info_function_type )( ::uint64,::int64 );

bp::def(
"get_img_info"
, get_img_info_function_type( &::gezi::tieba::get_img_info )
, ( bp::arg("pid"), bp::arg("createTime") ) );

}

{ //::gezi::tieba::get_img_info_str

typedef ::std::string ( *get_img_info_str_function_type )( ::uint64,::int64 );

bp::def(
"get_img_info_str"
, get_img_info_str_function_type( &::gezi::tieba::get_img_info_str )
, ( bp::arg("pid"), bp::arg("createTime") ) );

}

{ //::gezi::tieba::get_info_str

typedef ::std::string ( *get_info_str_function_type )( ::std::string,int );

bp::def(
"get_info_str"
, get_info_str_function_type( &::gezi::tieba::get_info_str )
, ( bp::arg("url"), bp::arg("timeout")=(int)(-0x00000000000000001) ) );

}

{ //::gezi::get_ipgroups

typedef void ( *get_ipgroups_function_type )( ::uint64,::uint64 &,::uint64 &,::uint64 & );

bp::def(
"get_ipgroups"
, get_ipgroups_function_type( &::gezi::get_ipgroups )
, ( bp::arg("ipl"), bp::arg("top3"), bp::arg("top2"), bp::arg("top1") ) );

}

{ //::gezi::get_location

typedef ::std::string ( *get_location_function_type )( ::gezi::IpFinder &,::uint64 );

bp::def(
"get_location"
, get_location_function_type( &::gezi::get_location )
, ( bp::arg("ipFinder"), bp::arg("ipl") ) );

}

{ //::gezi::tieba::get_post_delete_info

typedef ::gezi::tieba::DeleteInfo ( *get_post_delete_info_function_type )( ::uint64 );

bp::def(
"get_post_delete_info"
, get_post_delete_info_function_type( &::gezi::tieba::get_post_delete_info )
, ( bp::arg("pid") ) );

}

{ //::gezi::tieba::get_post_deleted_info

typedef bool ( *get_post_deleted_info_function_type )( ::uint64,::uint64,bool &,bool & );

bp::def(
"get_post_deleted_info"
, get_post_deleted_info_function_type( &::gezi::tieba::get_post_deleted_info )
, ( bp::arg("pid"), bp::arg("tid"), bp::arg("isPostDeleted"), bp::arg("isThreadDeleted") ) );

}

{ //::gezi::tieba::get_post_info

typedef ::gezi::tieba::PostInfo ( *get_post_info_function_type )( ::uint64 );

bp::def(
"get_post_info"
, get_post_info_function_type( &::gezi::tieba::get_post_info )
, ( bp::arg("pid") ) );

}

{ //::gezi::tieba::get_post_info

typedef bool ( *get_post_info_function_type )( ::uint64,::std::string &,::std::string & );

bp::def(
"get_post_info"
, get_post_info_function_type( &::gezi::tieba::get_post_info )
, ( bp::arg("pid"), bp::arg("title"), bp::arg("content") ) );

}

{ //::gezi::tieba::get_post_info_str

typedef ::std::string ( *get_post_info_str_function_type )( ::svec const & );

bp::def(
"get_post_info_str"
, get_post_info_str_function_type( &::gezi::tieba::get_post_info_str )
, ( bp::arg("pids") ) );

}

{ //::gezi::tieba::get_post_info_str

typedef ::std::string ( *get_post_info_str_function_type )( ::uint64 );

bp::def(
"get_post_info_str"
, get_post_info_str_function_type( &::gezi::tieba::get_post_info_str )
, ( bp::arg("pid") ) );

}

{ //::gezi::tieba::get_posts_delete_info

typedef int ( *get_posts_delete_info_function_type )( ::std::vector< unsigned long long > const &,::std::vector< unsigned long long > const &,int );

bp::def(
"get_posts_delete_info"
, get_posts_delete_info_function_type( &::gezi::tieba::get_posts_delete_info )
, ( bp::arg("pids"), bp::arg("tids"), bp::arg("maxCount")=(int)(50) ) );

}

{ //::gezi::tieba::get_posts_delete_info

typedef ::std::map< long long unsigned int, gezi::tieba::DeleteInfo > ( *get_posts_delete_info_function_type )( ::std::vector< unsigned long long > const &,bool );

bp::def(
"get_posts_delete_info"
, get_posts_delete_info_function_type( &::gezi::tieba::get_posts_delete_info )
, ( bp::arg("pids"), bp::arg("allowError")=(bool)(true) ) );

}

{ //::gezi::tieba::get_posts_info

typedef ::std::vector< gezi::tieba::PostInfo > ( *get_posts_info_function_type )( ::std::vector< unsigned long long > const &,bool );

bp::def(
"get_posts_info"
, get_posts_info_function_type( &::gezi::tieba::get_posts_info )
, ( bp::arg("pids_"), bp::arg("allowError")=(bool)(true) ) );

}

{ //::gezi::tieba::get_posts_info_map

typedef ::std::map< long long unsigned int, gezi::tieba::PostInfo > ( *get_posts_info_map_function_type )( ::std::vector< unsigned long long > const & );

bp::def(
"get_posts_info_map"
, get_posts_info_map_function_type( &::gezi::tieba::get_posts_info_map )
, ( bp::arg("pids_") ) );

}

{ //::gezi::tieba::get_posts_info_str

typedef ::std::string ( *get_posts_info_str_function_type )( ::std::vector< long long unsigned int > const & );

bp::def(
"get_posts_info_str"
, get_posts_info_str_function_type( &::gezi::tieba::get_posts_info_str )
, ( bp::arg("pids") ) );

}

{ //::gezi::tieba::get_posts_info_str

typedef ::std::string ( *get_posts_info_str_function_type )( ::svec const & );

bp::def(
"get_posts_info_str"
, get_posts_info_str_function_type( &::gezi::tieba::get_posts_info_str )
, ( bp::arg("pids") ) );

}

{ //::gezi::tieba::get_posts_info_str

typedef ::std::string ( *get_posts_info_str_function_type )( ::std::string );

bp::def(
"get_posts_info_str"
, get_posts_info_str_function_type( &::gezi::tieba::get_posts_info_str )
, ( bp::arg("pids") ) );

}

{ //::gezi::tieba::get_posts_info_str

typedef ::std::string ( *get_posts_info_str_function_type )( ::std::vector< unsigned long long > const & );

bp::def(
"get_posts_info_str"
, get_posts_info_str_function_type( &::gezi::tieba::get_posts_info_str )
, ( bp::arg("pids") ) );

}

{ //::gezi::tieba::get_real_title

typedef ::std::string ( *get_real_title_function_type )( ::std::string );

bp::def(
"get_real_title"
, get_real_title_function_type( &::gezi::tieba::get_real_title )
, ( bp::arg("title") ) );

}

{ //::gezi::tieba::get_serialized_urate_info_str

typedef ::std::string ( *get_serialized_urate_info_str_function_type )( ::uint64,bool,int,bool );

bp::def(
"get_serialized_urate_info_str"
, get_serialized_urate_info_str_function_type( &::gezi::tieba::get_serialized_urate_info_str )
, ( bp::arg("pid"), bp::arg("needHistory")=(bool)(true), bp::arg("historyNum")=(int)(25), bp::arg("needUrlInfo")=(bool)(true) ) );

}

{ //::gezi::tieba::get_thread_delete_info

typedef ::gezi::tieba::DeleteInfo ( *get_thread_delete_info_function_type )( ::uint64 );

bp::def(
"get_thread_delete_info"
, get_thread_delete_info_function_type( &::gezi::tieba::get_thread_delete_info )
, ( bp::arg("tid") ) );

}

{ //::gezi::tieba::get_thread_info

typedef ::gezi::tieba::ThreadInfo ( *get_thread_info_function_type )( ::uint64,bool,bool );

bp::def(
"get_thread_info"
, get_thread_info_function_type( &::gezi::tieba::get_thread_info )
, ( bp::arg("threadId"), bp::arg("need_abstract")=(bool)(true), bp::arg("allowError")=(bool)(true) ) );

}

{ //::gezi::tieba::get_thread_info_str

typedef ::std::string ( *get_thread_info_str_function_type )( ::uint64,bool );

bp::def(
"get_thread_info_str"
, get_thread_info_str_function_type( &::gezi::tieba::get_thread_info_str )
, ( bp::arg("tid"), bp::arg("need_abstract")=(bool)(true) ) );

}

{ //::gezi::tieba::get_threads_delete_info

typedef ::std::map< long long unsigned int, gezi::tieba::DeleteInfo > ( *get_threads_delete_info_function_type )( ::std::vector< unsigned long long > const &,bool );

bp::def(
"get_threads_delete_info"
, get_threads_delete_info_function_type( &::gezi::tieba::get_threads_delete_info )
, ( bp::arg("tids"), bp::arg("allowError")=(bool)(true) ) );

}

{ //::gezi::tieba::get_threads_info

typedef ::std::vector< gezi::tieba::ThreadInfo > ( *get_threads_info_function_type )( ::std::vector< unsigned long long > const &,bool,bool );

bp::def(
"get_threads_info"
, get_threads_info_function_type( &::gezi::tieba::get_threads_info )
, ( bp::arg("tidVec"), bp::arg("need_abstract")=(bool)(true), bp::arg("allowError")=(bool)(true) ) );

}

{ //::gezi::tieba::get_threads_info

typedef ::std::vector< gezi::tieba::ThreadInfo > ( *get_threads_info_function_type )( ::svec const &,bool,bool );

bp::def(
"get_threads_info"
, get_threads_info_function_type( &::gezi::tieba::get_threads_info )
, ( bp::arg("tidVec"), bp::arg("need_abstract")=(bool)(true), bp::arg("allowError")=(bool)(true) ) );

}

{ //::gezi::tieba::get_threads_info_map

typedef ::std::map< long long unsigned int, gezi::tieba::ThreadInfo > ( *get_threads_info_map_function_type )( ::std::vector< unsigned long long > const &,bool );

bp::def(
"get_threads_info_map"
, get_threads_info_map_function_type( &::gezi::tieba::get_threads_info_map )
, ( bp::arg("tidVec"), bp::arg("need_abstract")=(bool)(true) ) );

}

{ //::gezi::tieba::get_threads_info_str

typedef ::std::string ( *get_threads_info_str_function_type )( ::std::vector< long long unsigned int > const &,bool );

bp::def(
"get_threads_info_str"
, get_threads_info_str_function_type( &::gezi::tieba::get_threads_info_str )
, ( bp::arg("tids"), bp::arg("need_abstract")=(bool)(true) ) );

}

{ //::gezi::tieba::get_threads_info_str

typedef ::std::string ( *get_threads_info_str_function_type )( ::svec const &,bool );

bp::def(
"get_threads_info_str"
, get_threads_info_str_function_type( &::gezi::tieba::get_threads_info_str )
, ( bp::arg("tids"), bp::arg("need_abstract")=(bool)(true) ) );

}

{ //::gezi::tieba::get_threads_info_str

typedef ::std::string ( *get_threads_info_str_function_type )( ::std::string,bool );

bp::def(
"get_threads_info_str"
, get_threads_info_str_function_type( &::gezi::tieba::get_threads_info_str )
, ( bp::arg("tids_"), bp::arg("need_abstract")=(bool)(true) ) );

}

{ //::gezi::tieba::get_threads_info_str

typedef ::std::string ( *get_threads_info_str_function_type )( ::std::vector< unsigned long long > const &,bool );

bp::def(
"get_threads_info_str"
, get_threads_info_str_function_type( &::gezi::tieba::get_threads_info_str )
, ( bp::arg("tids"), bp::arg("need_abstract")=(bool)(true) ) );

}

{ //::gezi::get_topn_ipgroup

typedef ::uint64 ( *get_topn_ipgroup_function_type )( ::uint64,int );

bp::def(
"get_topn_ipgroup"
, get_topn_ipgroup_function_type( &::gezi::get_topn_ipgroup )
, ( bp::arg("ipl"), bp::arg("n") ) );

}

{ //::gezi::tieba::get_urate_info

typedef ::gezi::tieba::UrateInfo ( *get_urate_info_function_type )( ::uint64,bool,int,bool );

bp::def(
"get_urate_info"
, get_urate_info_function_type( &::gezi::tieba::get_urate_info )
, ( bp::arg("pid"), bp::arg("needHistory")=(bool)(true), bp::arg("historyNum")=(int)(25), bp::arg("needUrlInfo")=(bool)(true) ) );

}

{ //::gezi::tieba::get_urate_info_from_uid

typedef ::gezi::tieba::UrateInfo ( *get_urate_info_from_uid_function_type )( ::uint64 );

bp::def(
"get_urate_info_from_uid"
, get_urate_info_from_uid_function_type( &::gezi::tieba::get_urate_info_from_uid )
, ( bp::arg("uid") ) );

}

{ //::gezi::tieba::get_urate_info_from_uid

typedef void ( *get_urate_info_from_uid_function_type )( ::uint64,::gezi::tieba::UrateInfo & );

bp::def(
"get_urate_info_from_uid"
, get_urate_info_from_uid_function_type( &::gezi::tieba::get_urate_info_from_uid )
, ( bp::arg("uid"), bp::arg("urateInfo") ) );

}

{ //::gezi::tieba::get_url_info

typedef ::gezi::tieba::UrlInfo ( *get_url_info_function_type )( ::std::string );

bp::def(
"get_url_info"
, get_url_info_function_type( &::gezi::tieba::get_url_info )
, ( bp::arg("url") ) );

}

{ //::gezi::tieba::get_url_info_params_

typedef ::std::string ( *get_url_info_params__function_type )( ::std::vector< std::string > const & );

bp::def(
"get_url_info_params_"
, get_url_info_params__function_type( &::gezi::tieba::get_url_info_params_ )
, ( bp::arg("urls") ) );

}

{ //::gezi::tieba::get_urls_info

typedef ::std::vector< gezi::tieba::UrlInfo > ( *get_urls_info_function_type )( ::std::vector< std::string > const & );

bp::def(
"get_urls_info"
, get_urls_info_function_type( &::gezi::tieba::get_urls_info )
, ( bp::arg("urls") ) );

}

{ //::gezi::tieba::get_urls_info_map

typedef ::std::map< std::string, gezi::tieba::UrlInfo > ( *get_urls_info_map_function_type )( ::std::vector< std::string > const & );

bp::def(
"get_urls_info_map"
, get_urls_info_map_function_type( &::gezi::tieba::get_urls_info_map )
, ( bp::arg("urls") ) );

}

{ //::gezi::tieba::get_user_fans

typedef bool ( *get_user_fans_function_type )( ::uint64,int &,int & );

bp::def(
"get_user_fans"
, get_user_fans_function_type( &::gezi::tieba::get_user_fans )
, ( bp::arg("uid"), bp::arg("follow_count"), bp::arg("followed_count") ) );

}

{ //::gezi::tieba::get_user_fans

typedef bool ( *get_user_fans_function_type )( ::uint64,::AnyMap & );

bp::def(
"get_user_fans"
, get_user_fans_function_type( &::gezi::tieba::get_user_fans )
, ( bp::arg("uid"), bp::arg("result") ) );

}

{ //::gezi::tieba::get_user_fans

typedef ::std::string ( *get_user_fans_function_type )( ::uint64 );

bp::def(
"get_user_fans"
, get_user_fans_function_type( &::gezi::tieba::get_user_fans )
, ( bp::arg("uid") ) );

}

{ //::gezi::tieba::get_user_info

typedef ::gezi::tieba::UserInfo ( *get_user_info_function_type )( ::uint,bool,bool );

bp::def(
"get_user_info"
, get_user_info_function_type( &::gezi::tieba::get_user_info )
, ( bp::arg("uid"), bp::arg("needFollowInfo")=(bool)(true), bp::arg("needPassInfo")=(bool)(true) ) );

}

{ //::gezi::tieba::get_user_like_forum_info

typedef ::gezi::tieba::UserLikeForumInfo ( *get_user_like_forum_info_function_type )( ::uint );

bp::def(
"get_user_like_forum_info"
, get_user_like_forum_info_function_type( &::gezi::tieba::get_user_like_forum_info )
, ( bp::arg("uid") ) );

}

{ //::gezi::tieba::get_user_post_num_info

typedef ::gezi::tieba::UserPostNumInfo ( *get_user_post_num_info_function_type )( ::uint,::uint );

bp::def(
"get_user_post_num_info"
, get_user_post_num_info_function_type( &::gezi::tieba::get_user_post_num_info )
, ( bp::arg("uid"), bp::arg("forumId") ) );

}

{ //::gezi::tieba::get_user_post_num_info

typedef ::gezi::tieba::UserPostNumInfo ( *get_user_post_num_info_function_type )( ::uint );

bp::def(
"get_user_post_num_info"
, get_user_post_num_info_function_type( &::gezi::tieba::get_user_post_num_info )
, ( bp::arg("uid") ) );

}

{ //::gezi::tieba::get_user_post_num_info_

typedef ::gezi::tieba::UserPostNumInfo ( *get_user_post_num_info__function_type )( ::std::string );

bp::def(
"get_user_post_num_info_"
, get_user_post_num_info__function_type( &::gezi::tieba::get_user_post_num_info_ )
, ( bp::arg("url") ) );

}

{ //::gezi::tieba::get_user_posts_info

typedef ::gezi::tieba::UserPostsInfo ( *get_user_posts_info_function_type )( ::uint,int,bool,::uint64,int,int );

bp::def(
"get_user_posts_info"
, get_user_posts_info_function_type( &::gezi::tieba::get_user_posts_info )
, ( bp::arg("uid"), bp::arg("resNum")=(int)(25), bp::arg("needContent")=(bool)(true), bp::arg("endTime")=(long long unsigned int)(0), bp::arg("orderType")=(int)(1), bp::arg("offset")=(int)(0) ) );

}

{ //::gezi::tieba::get_user_posts_info_until

typedef ::gezi::tieba::UserPostsInfo ( *get_user_posts_info_until_function_type )( ::uint64,int,bool,int,int );

bp::def(
"get_user_posts_info_until"
, get_user_posts_info_until_function_type( &::gezi::tieba::get_user_posts_info_until )
, ( bp::arg("pid"), bp::arg("resNum")=(int)(25), bp::arg("needContent")=(bool)(true), bp::arg("orderType")=(int)(1), bp::arg("offset")=(int)(0) ) );

}

{ //::gezi::tieba::get_user_posts_info_until

typedef ::gezi::tieba::UserPostsInfo ( *get_user_posts_info_until_function_type )( ::gezi::tieba::PostInfo const &,int,bool,int,int );

bp::def(
"get_user_posts_info_until"
, get_user_posts_info_until_function_type( &::gezi::tieba::get_user_posts_info_until )
, ( bp::arg("info"), bp::arg("resNum")=(int)(25), bp::arg("needContent")=(bool)(true), bp::arg("orderType")=(int)(1), bp::arg("offset")=(int)(0) ) );

}

{ //::gezi::tieba::get_users_info

typedef ::std::vector< gezi::tieba::UserInfo > ( *get_users_info_function_type )( ::std::vector< unsigned int > const,bool,bool );

bp::def(
"get_users_info"
, get_users_info_function_type( &::gezi::tieba::get_users_info )
, ( bp::arg("uids_"), bp::arg("needFollowInfo")=(bool)(true), bp::arg("needPassInfo")=(bool)(true) ) );

}

{ //::gezi::tieba::get_users_info_map

typedef ::std::map< unsigned int, gezi::tieba::UserInfo > ( *get_users_info_map_function_type )( ::std::vector< unsigned int > const,bool,bool );

bp::def(
"get_users_info_map"
, get_users_info_map_function_type( &::gezi::tieba::get_users_info_map )
, ( bp::arg("uids_"), bp::arg("needFollowInfo")=(bool)(true), bp::arg("needPassInfo")=(bool)(true) ) );

}

{ //::gezi::tieba::is_deleted

typedef bool ( *is_deleted_function_type )( ::uint64,::std::string );

bp::def(
"is_deleted"
, is_deleted_function_type( &::gezi::tieba::is_deleted )
, ( bp::arg("id"), bp::arg("type") ) );

}

{ //::gezi::tieba::is_deletes

typedef ::std::set< long long unsigned int > ( *is_deletes_function_type )( ::std::vector< unsigned long long > const &,::std::string,bool );

bp::def(
"is_deletes"
, is_deletes_function_type( &::gezi::tieba::is_deletes )
, ( bp::arg("ids_"), bp::arg("type"), bp::arg("allowError")=(bool)(true) ) );

}

{ //::gezi::is_en_num_name

typedef bool ( *is_en_num_name_function_type )( ::std::string );

bp::def(
"is_en_num_name"
, is_en_num_name_function_type( &::gezi::is_en_num_name )
, ( bp::arg("uname") ) );

}

{ //::gezi::is_en_num_name

typedef bool ( *is_en_num_name_function_type )( ::std::vector< int > const & );

bp::def(
"is_en_num_name"
, is_en_num_name_function_type( &::gezi::is_en_num_name )
, ( bp::arg("nameFeatures") ) );

}

{ //::gezi::is_en_num_simple_name_pattern

typedef bool ( *is_en_num_simple_name_pattern_function_type )( ::std::string );

bp::def(
"is_en_num_simple_name_pattern"
, is_en_num_simple_name_pattern_function_type( &::gezi::is_en_num_simple_name_pattern )
, ( bp::arg("pattern") ) );

}

{ //::gezi::tieba::is_post_deleted

typedef bool ( *is_post_deleted_function_type )( ::uint64 );

bp::def(
"is_post_deleted"
, is_post_deleted_function_type( &::gezi::tieba::is_post_deleted )
, ( bp::arg("pid") ) );

}

{ //::gezi::tieba::is_posts_deleted

typedef ::std::set< long long unsigned int > ( *is_posts_deleted_function_type )( ::std::vector< unsigned long long > const &,bool );

bp::def(
"is_posts_deleted"
, is_posts_deleted_function_type( &::gezi::tieba::is_posts_deleted )
, ( bp::arg("pids"), bp::arg("allowError")=(bool)(true) ) );

}

{ //::gezi::is_qq_name

typedef bool ( *is_qq_name_function_type )( ::std::string );

bp::def(
"is_qq_name"
, is_qq_name_function_type( &::gezi::is_qq_name )
, ( bp::arg("uname") ) );

}

{ //::gezi::tieba::is_thread

typedef bool ( *is_thread_function_type )( ::std::string );

bp::def(
"is_thread"
, is_thread_function_type( &::gezi::tieba::is_thread )
, ( bp::arg("title") ) );

}

{ //::gezi::tieba::is_thread_deleted

typedef bool ( *is_thread_deleted_function_type )( ::uint64 );

bp::def(
"is_thread_deleted"
, is_thread_deleted_function_type( &::gezi::tieba::is_thread_deleted )
, ( bp::arg("tid") ) );

}

{ //::gezi::tieba::is_threads_deleted

typedef ::std::set< long long unsigned int > ( *is_threads_deleted_function_type )( ::std::vector< unsigned long long > const &,bool );

bp::def(
"is_threads_deleted"
, is_threads_deleted_function_type( &::gezi::tieba::is_threads_deleted )
, ( bp::arg("tids"), bp::arg("allowError")=(bool)(true) ) );

}

{ //::gezi::name_feature

typedef ::std::vector< int > ( *name_feature_function_type )( ::std::string );

bp::def(
"name_feature"
, name_feature_function_type( &::gezi::name_feature )
, ( bp::arg("uname") ) );

}

{ //::gezi::name_pattern

typedef ::std::string ( *name_pattern_function_type )( ::std::string );

bp::def(
"name_pattern"
, name_pattern_function_type( &::gezi::name_pattern )
, ( bp::arg("uname") ) );

}

{ //::gezi::tieba::name_pattern

typedef ::std::string ( *name_pattern_function_type )( ::std::string );

bp::def(
"name_pattern"
, name_pattern_function_type( &::gezi::tieba::name_pattern )
, ( bp::arg("uname") ) );

}

{ //::gezi::tieba::parse_delete_info_

typedef void ( *parse_delete_info__function_type )( ::Json::Value const &,::gezi::tieba::DeleteInfo &,::std::string );

bp::def(
"parse_delete_info_"
, parse_delete_info__function_type( &::gezi::tieba::parse_delete_info_ )
, ( bp::arg("jsonDelInfo"), bp::arg("deleteInfo"), bp::arg("type") ) );

}

{ //::gezi::tieba::parse_img_info

typedef void ( *parse_img_info_function_type )( ::Json::Value const &,::gezi::tieba::ImgInfo & );

bp::def(
"parse_img_info"
, parse_img_info_function_type( &::gezi::tieba::parse_img_info )
, ( bp::arg("m"), bp::arg("info") ) );

}

{ //::gezi::tieba::parse_post_info

typedef void ( *parse_post_info_function_type )( ::Json::Value const &,::gezi::tieba::PostInfo & );

bp::def(
"parse_post_info"
, parse_post_info_function_type( &::gezi::tieba::parse_post_info )
, ( bp::arg("m"), bp::arg("info") ) );

}

{ //::gezi::tieba::parse_user_info_

typedef void ( *parse_user_info__function_type )( ::Json::Value const &,::gezi::tieba::UserInfo &,bool,bool );

bp::def(
"parse_user_info_"
, parse_user_info__function_type( &::gezi::tieba::parse_user_info_ )
, ( bp::arg("m"), bp::arg("info"), bp::arg("needFollowInfo"), bp::arg("needPassInfo") ) );

}

{ //::gezi::tieba::parse_user_post_num_info_

typedef void ( *parse_user_post_num_info__function_type )( ::Json::Value const &,::gezi::tieba::UserPostNumInfo & );

bp::def(
"parse_user_post_num_info_"
, parse_user_post_num_info__function_type( &::gezi::tieba::parse_user_post_num_info_ )
, ( bp::arg("root"), bp::arg("info") ) );

}

{ //::gezi::tieba::reg_days

typedef int ( *reg_days_function_type )( ::uint64,::uint64 );

bp::def(
"reg_days"
, reg_days_function_type( &::gezi::tieba::reg_days )
, ( bp::arg("nowTime"), bp::arg("regTime") ) );

}

{ //::gezi::tieba::reg_span

typedef ::uint64 ( *reg_span_function_type )( ::uint64,::uint64 );

bp::def(
"reg_span"
, reg_span_function_type( &::gezi::tieba::reg_span )
, ( bp::arg("nowTime"), bp::arg("regTime") ) );

}

{ //::gezi::simple_name_pattern

typedef ::std::string ( *simple_name_pattern_function_type )( ::std::string );

bp::def(
"simple_name_pattern"
, simple_name_pattern_function_type( &::gezi::simple_name_pattern )
, ( bp::arg("uname") ) );

}

{ //::gezi::to_iparray

typedef ::boost::array< int, 4ul > ( *to_iparray_function_type )( ::uint64 );

bp::def(
"to_iparray"
, to_iparray_function_type( &::gezi::to_iparray )
, ( bp::arg("ipl") ) );

}

{ //::gezi::to_ipstr

typedef ::std::string ( *to_ipstr_function_type )( ::uint64 );

bp::def(
"to_ipstr"
, to_ipstr_function_type( &::gezi::to_ipstr )
, ( bp::arg("ipl") ) );

}

bp::scope().attr("kMaxRequestCount") = gezi::tieba::kMaxRequestCount;
}

#edit-mode: -*- python -*-
#coding:gbk

#工作路径.
WORKROOT('../../../../../../')

#使用硬链接copy.
CopyUsingHardLink(True)

#支持32位/64位平台编译
#ENABLE_MULTI_LIBS(True)

#C预处理器参数.
CPPFLAGS('-D_GNU_SOURCE -D__STDC_LIMIT_MACROS -DVERSION=\\\"1.9.8.7\\\"')
#为32位目标编译指定额外的预处理参数
#CPPFLAGS_32('-D_XOPEN_SOURE=500')

#C编译参数.
CFLAGS('-g -pipe -W -Wall -fPIC')

#C++编译参数.
CXXFLAGS('-g -pipe -W -Wall -fPIC')

#IDL编译参数
IDLFLAGS('--compack')

#UBRPC编译参数
UBRPCFLAGS('--compack')

#头文件路径.
INCPATHS('. ../include ../utils ../output ../output/include ../include/feature ../include/model')

#使用库
#LIBS('./librsc-sender.a')

#链接参数.
LDFLAGS('-lpthread -lcrypto -lrt -lssl -lldap -lcurl')

#依赖模块
ImportConfigsFrom('../')
#CONFIGS('third-64/json-cpp@base')

srcs=GLOB('../src/*.cpp ../src/feature/*.cpp ../src/model/*.cpp')
srcs=''
#可执行文件
#静态库
#StaticLibrary('gezi',Sources(user_sources),HeaderFiles(user_headers))
#共享库
#SharedLibrary('suffix-tree',Sources(user_sources),HeaderFiles(user_headers))
#子目录
#Directory('demo')

Application('test_bins',Sources('test_bins.cc'))
Application('test_datetime',Sources('test_datetime.cc'))
Application('test_content_filter',Sources('test_content_filter.cc'))
Application('test_regex',Sources('test_regex.cc',srcs))
Application('test_regex2',Sources('test_regex2.cc', srcs))
Application('test_encode',Sources('test_encode.cc', srcs))
Application('test_json',Sources('test_json.cc', srcs, GLOB('../src/json/*.cpp')))
Application('test_escape',Sources('test_escape.cc', srcs))
#Application('test_other',Sources('test_other.cc',srcs, ENV.CppFlags()+CppFlags('-O3 -DNDEBUG')))
Application('test_other',Sources('test_other.cc',srcs))

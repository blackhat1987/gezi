#edit-mode: -*- python -*-
#coding:gbk

#工作路径. 如果高版本gcc 需要修改两个路径 设置好TOOLCHAIN_ROOT
WORKROOT('../../../../../../')
TOOLCHAIN_ROOT='../../../../../../ps/se/toolchain'
RELATIVE_PATH='../'

#是否使用本地的gcc 比如本地安装了gcc 4.8.2使用本地的可以直接使用生成的bin文件 如./main
GCC_LOCAL=1
print 'GCC_LOCAL: %d'%GCC_LOCAL 
#是否使用高版本gcc 可以直接使用生成的bin文件 如./main 
GCC_HIGH=1
print 'GCC_HIGH: %d'%GCC_HIGH
#是否使用高版本动态链接库，即是否使用高版本libc 如果启用 可以使用openmp 但是需要设置LD_LIBRARY_PATH sh ./run.sh ./main
GCC_DYNAMIC=1
print 'GCC_DYNAMIC: %d'%GCC_DYNAMIC
GCC_VERSION='3.4.5'
if  GCC_HIGH == 1: 
	if GCC_DYNAMIC == 1:
		GCC_VERSION='4.8.1'
	else:
		GCC_VERSION='4.8.2'
print 'GCC_VERSION: %s'%GCC_VERSION
GLIBC_VERSION='2.9'
BINUTILS_VERSION='2.20'
KERNAL_VERSION='2.6.32'

#使用硬链接copy.
CopyUsingHardLink(True)

GCC_BIN='g++'
GCC_FLAGS = '' 
TOOLCHAIN=TOOLCHAIN_ROOT
if GCC_HIGH  == 1:
	if GCC_DYNAMIC == 1:	
		TOOLCHAIN += '/x86_64-unknown-linux-gnu-%s-%s-%s-%s'%(GCC_VERSION,GLIBC_VERSION,BINUTILS_VERSION,KERNAL_VERSION)
		GCC_BIN=TOOLCHAIN + '/bin/x86_64-unknown-linux-gnu-g++'
	else:
		TOOLCHAIN += '/gcc_only_%s'%(GCC_VERSION)
		GCC_BIN=TOOLCHAIN + '/bin/g++'
#对于static方式 LIBS_DIR不起任何作用
LIBS_DIR=TOOLCHAIN + '/x86_64-unknown-linux-gnu/lib/'

if GCC_HIGH == 1:
	content = '#!/bin/sh\nexport LD_LIBRARY_PATH=%s\n./$1\n'%LIBS_DIR
	open('run.sh','w').write(content)

print 'LIBS_DIR: %s'%LIBS_DIR

if GCC_LOCAL == 1:
	GCC_BIN = 'g++'
print 'GCC_BIN: %s'%GCC_BIN; os.system('%s -v'%GCC_BIN)
CC(GCC_BIN)
CXX(GCC_BIN)

#C预处理器参数.
CPPFLAGS('-D_GNU_SOURCE -D__STDC_LIMIT_MACROS -DVERSION=\\\"1.9.8.7\\\"')

#编译参数设置
COMMON_FLAGS = '-g -O0 -pipe -W -Wall -fPIC -DHAVE_NETINET_IN_H -Wno-unused-parameter'

if GCC_HIGH  == 1:
	GCC_FLAGS += '-std=c++0x -fpermissive -Wno-write-strings -Wno-literal-suffix -Wno-unused-local-typedefs'
	if GCC_DYNAMIC  == 1:
		GCC_FLAGS += ' -fopenmp'
		
#C编译参数.
CFLAGS(COMMON_FLAGS, GCC_FLAGS)

#C++编译参数.
CXXFLAGS(COMMON_FLAGS, GCC_FLAGS)

#IDL编译参数
IDLFLAGS('--compack')

#UBRPC编译参数
UBRPCFLAGS('--compack')

#链接参数.
GCC_LDFLAGS=''
if GCC_HIGH  == 1: 
	if GCC_DYNAMIC  == 1:
		GCC_LDFLAGS += ' -lgomp -rdynamic -Wl,-rpath=../../../../../../ps/se/toolchain/x86_64-unknown-linux-gnu-4.8.1-2.9-2.20-2.6.32/x86_64-unknown-linux-gnu/lib/'
		if GCC_LOCAL != 1:
			GCC_LDFLAGS += ' -Wl,--dynamic-linker=./ld-linux-x86-64.so.2 -L%s'%(LIBS_DIR)
		TARGET('.copy-so', ShellCommands('ln -s %s/ld-linux-x86-64.so.2 ld-linux-x86-64.so.2 .'%(LIBS_DIR)), 
          CleanCommands('rm -rf ld-linux-x86-64.so.2')) 
	else: 
		GCC_LDFLAGS  += ' -static-libgcc -static-libstdc++'

#链接参数.
#LDFLAGS('-lpthread -lrt -ldl -lldap -lcurl', GCC_LDFLAGS)
LDFLAGS('-lpthread -rdynamic -lrt -lldap -lcurl', GCC_LDFLAGS)

#依赖模块
ImportConfigsFrom('../')

#头文件路径.
INCPATHS('. ./include ./utils ./output ./output/include ./include/feature ./include/model ./include/numeric'.replace('./',RELATIVE_PATH))
#srcs=GLOB('./src/*.cpp ./src/feature/*.cpp ./src/model/*.cpp ./src/json/*.cpp'.replace('./',RELATIVE_PATH))
srcs = ''
headers=''
#使用库
LIBS('../include/tools/pinyin/libPYNotation.a ../libgezi_common.a ../libgezi_json.a ../libgezi_cppformat.a')

#可执行文件
#静态库
#StaticLibrary('gezi',Sources(srcs),HeaderFiles(headers))
#共享库
#子目录
#Directory('demo')
Application('test_lambda', Sources('test_lambda.cc'))
Application('test_bins',Sources('test_bins.cc'))
Application('test_datetime',Sources('test_datetime.cc'))
Application('test_content_filter',Sources('test_content_filter.cc'))
Application('test_regex',Sources('test_regex.cc',srcs))
Application('test_regex2',Sources('test_regex2.cc', srcs))
Application('test_encode',Sources('test_encode.cc', srcs))
Application('test_json',Sources('test_json.cc', srcs, GLOB('../src/json/*.cpp')))
Application('test_escape',Sources('test_escape.cc', srcs))
Application('test_other',Sources('test_other.cc',srcs))
Application('test_feature_selector',Sources('test_feature_selector.cc',srcs))
Application('openmp_hello',Sources('openmp/hello.cc'), OutputPath('./bin'))
Application('openmp_test',Sources('openmp/test.cc', srcs), OutputPath('./bin'))

Application('test_exception',Sources('test_exception.cc'), OutputPath('./bin'))
Application('test_map_util',Sources('test_map_util.cc'), OutputPath('./bin'))
Application('test_seg',Sources('test_seg.cc', srcs))
Application('test_identifer',Sources('test_identifer.cc', srcs))
Application('test_linear',Sources('test_linear.cc', srcs))
Application('test_pinyin',Sources('test_pinyin.cc', srcs))
Application('test_namepattern',Sources('test_namepattern.cc', srcs))
Application('test_conf',Sources('test_conf.cc', srcs))
Application('test_random',Sources('test_random.cc', srcs))
Application('test_shared_ptr',Sources('test_shared_ptr.cc', srcs))
Application('test_binfinder',Sources('test_binfinder.cc', srcs))
Application('test_seralize',Sources('test_seralize.cc', srcs))
Application('test_string',Sources('test_string.cc', srcs))
Application('test_bitop',Sources('test_bitop.cc', srcs))
Application('test_featurevector',Sources('test_featurevector.cc', srcs))
Application('test_split',Sources('test_split.cc', srcs))
Application('test_tieba_get_info',Sources('test_tieba_get_info.cc', srcs))
#Application('test_content_process',Sources('test_content_process.cc',srcs, ENV.CppFlags()+CppFlags('-O3 -DNDEBUG')))
Application('test_content_process',Sources('test_content_process.cc'))
Application('test_cached_fetcher',Sources('test_cached_fetcher.cc', srcs))
Application('test_bind',Sources('test_bind.cc', srcs))
Application('test_lrumap',Sources('test_lrumap.cc', srcs))
Application('test_seralize_xml',Sources('test_seralize_xml.cc', srcs))
Application('test_thread_local',Sources('test_thread_local.cc', srcs))
Application('test_configure',Sources('test_configure.cc', srcs))
Application('test_static',Sources('test_static.cc', srcs))
Application('test_cpplinq',Sources('test_cpplinq.cc', srcs))
Application('test_partial_sort',Sources('test_partial_sort.cc', srcs))
srcs = ''
Application('test_string_util',Sources('test_string_util.cc', srcs))
Application('test_mean_var',Sources('test_mean_var.cc', srcs))
Application('test_const',Sources('test_const.cc', srcs))
Application('test_matchdict',Sources('test_matchdict.h', srcs))
Application('test_sharedobjects',Sources('test_sharedobjects.cc', srcs))
Application('test_matchdict',Sources('test_matchdict.cc', srcs))
Application('test_erase',Sources('test_erase.cc', srcs))
Application('test_max_count_by',Sources('test_max_count_by.cc', srcs))
Application('test_informaiton',Sources('test_informaiton.cc', srcs))
Application('test_information',Sources('test_information.cc', srcs))
Application('simple',Sources('simple.cc',srcs), OutputPath('./bin'))
Application('test_cppformat',Sources('test_cppformat.cc', srcs))
Application('test_string_find',Sources('test_string_find.cc', srcs))
Application('test_static_thread_safe',Sources('test_static_thread_safe.cc', srcs))
Application('test_map_default',Sources('test_map_default.cc', srcs))
#Application('test_template_function',Sources('test_template_function.cc',srcs, ENV.CppFlags()+CppFlags('-O3 -DNDEBUG')))
Application('test_template_function',Sources('test_template_function.cc',srcs))
#Application('identifer-text2bin',Sources('identifer-text2bin.cc',srcs, ENV.CppFlags()+CppFlags('-O3 -DNDEBUG')))
Application('identifer-text2bin',Sources('identifer-text2bin.cc',srcs))
#Application('test_numeric_limit',Sources('test_numeric_limit.cc',srcs, ENV.CppFlags()+CppFlags('-O3 -DNDEBUG')))
Application('test_numeric_limit',Sources('test_numeric_limit.cc',srcs))
#Application('test_langmodel',Sources('test_langmodel.cc',srcs, ENV.CppFlags()+CppFlags('-O3 -DNDEBUG')))
CONFIGS('st/nlp/lm-score')
Application('test_langmodel',Sources('test_langmodel.cc',srcs))

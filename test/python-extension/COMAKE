#edit-mode: -*- python -*-
#coding:gbk

#工作路径. 如果高版本gcc 需要修改两个路径 设置好TOOLCHAIN_ROOT
WORKROOT('../../../../../../../')
TOOLCHAIN_ROOT='../../../../../../../ps/se/toolchain'
RELATIVE_PATH='../../'

#是否使用本地的gcc 比如本地安装了gcc 4.8.2使用本地的可以直接使用生成的bin文件 如./main
GCC_LOCAL=2
import os 
#online use GCC_LOCAL=3, but on local ubuntu use GCC_LOCAL=2
if os.path.abspath('.').startswith('/home/users'):
    GCC_LOCAL = 3

print 'GCC_LOCAL: %d'%GCC_LOCAL 
#是否使用高版本gcc 可以直接使用生成的bin文件 如./main 
GCC_HIGH=1
print 'GCC_HIGH: %d'%GCC_HIGH
#是否使用高版本动态链接库，即是否使用高版本libc 如果启用 可以使用openmp 但是需要设置LD_LIBRARY_PATH sh ./run.sh ./main
GCC_DYNAMIC=1
print 'GCC_DYNAMIC: %d'%GCC_DYNAMIC
GCC_VERSION='3.4.5'
if  GCC_HIGH == 1: 
	if GCC_DYNAMIC == 1:
		GCC_VERSION='4.8.1'
	else:
		GCC_VERSION='4.8.2'
print 'GCC_VERSION: %s'%GCC_VERSION
GLIBC_VERSION='2.9'
BINUTILS_VERSION='2.20'
KERNAL_VERSION='2.6.32'

#使用硬链接copy.
CopyUsingHardLink(True)

GCC_BIN='g++'
GCC_FLAGS = '' 
TOOLCHAIN=TOOLCHAIN_ROOT
#对于static方式 LIBS_DIR不起任何作用
LIBS_DIR=TOOLCHAIN + '/x86_64-unknown-linux-gnu/lib/'

print 'LIBS_DIR: %s'%LIBS_DIR

if GCC_LOCAL == 1:
	GCC_BIN = 'g++'
elif GCC_LOCAL == 2:
	GCC_BIN = '/opt/compiler/gcc-4.8.2/bin/g++'
elif GCC_LOCAL == 3:
	GCC_BIN = '~/.jumbo/opt/gcc48/bin/g++'

print 'GCC_BIN: %s'%GCC_BIN; os.system('%s -v'%GCC_BIN)
CC(GCC_BIN)
CXX(GCC_BIN)

#C预处理器参数.
CPPFLAGS('-D_GNU_SOURCE -D__STDC_LIMIT_MACROS -DVERSION=\\\"1.9.8.7\\\"')

#编译参数设置
COMMON_FLAGS = '-g -O0 -pipe -W -Wall -fPIC -DHAVE_NETINET_IN_H -Wno-unused-parameter'

if GCC_HIGH  == 1:
	GCC_FLAGS += '-std=c++11 -fpermissive -Wno-write-strings -Wno-literal-suffix -Wno-unused-local-typedefs'
	if GCC_DYNAMIC  == 1:
		GCC_FLAGS += ' -fopenmp'
#C编译参数.
CFLAGS(COMMON_FLAGS, GCC_FLAGS)

#C++编译参数.
CXXFLAGS(COMMON_FLAGS, GCC_FLAGS)

#IDL编译参数
IDLFLAGS('--compack')

#UBRPC编译参数
UBRPCFLAGS('--compack')

#链接参数.
GCC_LDFLAGS=''
if GCC_HIGH  == 1: 
	if GCC_DYNAMIC  == 1:
		GCC_LDFLAGS += ' -lgomp'
	else: 
		GCC_LDFLAGS  += ' -static-libgcc -static-libstdc++'

#链接参数.
#LDFLAGS('-lpthread -lrt -ldl -rdynamic', GCC_LDFLAGS)
#LDFLAGS('-lpthread -lcurl -lrt -lcrypto -lldap -lssl -ldl -rdynamic -L./ -L./lib -lpython2.7 -lboost_python -Wl,-rpath=./', GCC_LDFLAGS)
LDFLAGS('-rdynamic -L./ -L./lib -lpython2.7 -lboost_python -Wl,-rpath=./', GCC_LDFLAGS)

JUMBO_PATH='/home/users/chenghuige/.jumbo/'
INCPATHS(JUMBO_PATH + '/include/python2.7 ./')
#依赖模块
#ImportConfigsFrom('../')
#CONFIGS('third-64/gflags third-64/glog third-64/boost lib2-64/ccode lib2-64/dict lib2-64/wordseg lib2-64/postag public/comlog-plugin')
CONFIGS('third-64/boost')
#CONFIGS('app/search/sep/anti-spam/gezi')
#头文件路径.
headers=''
#使用库
LIBS('./lib/libboost_python.so ./lib/libpython2.7.so')

#可执行文件
#静态库
#StaticLibrary('gezi',Sources(srcs),HeaderFiles(headers))
#共享库
#子目录
#Directory('demo')
srcs='chg.cc'
SharedLibrary('chg',Sources('chg_py.cc',srcs, ENV.CppFlags()+CppFlags('-O3 -DPYTHON_WRAPPER -DNDEBUG -DBOOST_BIND_PLACEHOLDERS_HPP_INCLUDED')),LinkDeps(True))

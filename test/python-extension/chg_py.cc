//add this before all other incl headers in chg_py.cc 
//now ok for both gccxml or castxml for this simple example
#define BOOST_BIND_PLACEHOLDERS_HPP_INCLUDED
#include <boost/bind.hpp>
#include <boost/lambda/lambda.hpp>
using namespace boost::lambda;

// This file has been generated by Py++.

#include "boost/python.hpp"

#include "boost/python/suite/indexing/vector_indexing_suite.hpp"

#include "chg.h"

namespace bp = boost::python;

BOOST_PYTHON_MODULE(libchg){
    { //::std::vector< std::string >
        typedef bp::class_< std::vector< std::string > > __type_exposer_t;
        __type_exposer_t __type_exposer = __type_exposer_t( "__type" );
        bp::scope __type_scope( __type_exposer );
        __type_exposer.def( bp::vector_indexing_suite< ::std::vector< std::string >, true >() );
    }

    { //::std::vector< int >
        typedef bp::class_< std::vector< int > > __type_exposer_t;
        __type_exposer_t __type_exposer = __type_exposer_t( "__type" );
        bp::scope __type_scope( __type_exposer );
        __type_exposer.def( bp::vector_indexing_suite< ::std::vector< int >, true >() );
    }

    bp::class_< Chg >( "Chg", bp::init< >() )    
        .def( 
            "friendSize"
            , (int ( ::Chg::* )(  ))( &::Chg::friendSize ) )    
        .def( 
            "getAge"
            , (int ( ::Chg::* )(  ))( &::Chg::getAge ) )    
        .def( 
            "x"
            , (int (*)(  ))( &::Chg::x ) )    
        .def_readwrite( "m_age", &Chg::m_age )    
        .def_readwrite( "m_friend", &Chg::m_friend )    
        .def_readwrite( "m_nums", &Chg::m_nums )    
        .staticmethod( "x" );

    { //::haha
    
        typedef void ( *haha_function_type )(  );
        
        bp::def( 
            "haha"
            , haha_function_type( &::haha ) );
    
    }
}

# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libchg', [dirname(__file__)])
        except ImportError:
            import _libchg
            return _libchg
        if fp is not None:
            try:
                _mod = imp.load_module('_libchg', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _libchg = swig_import_helper()
    del swig_import_helper
else:
    import _libchg
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libchg.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _libchg.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _libchg.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _libchg.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _libchg.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _libchg.SwigPyIterator_equal(self, x)

    def copy(self):
        return _libchg.SwigPyIterator_copy(self)

    def next(self):
        return _libchg.SwigPyIterator_next(self)

    def __next__(self):
        return _libchg.SwigPyIterator___next__(self)

    def previous(self):
        return _libchg.SwigPyIterator_previous(self)

    def advance(self, n):
        return _libchg.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _libchg.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _libchg.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _libchg.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _libchg.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _libchg.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _libchg.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _libchg.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ivec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ivec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ivec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libchg.ivec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libchg.ivec___nonzero__(self)

    def __bool__(self):
        return _libchg.ivec___bool__(self)

    def __len__(self):
        return _libchg.ivec___len__(self)

    def __getslice__(self, i, j):
        return _libchg.ivec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libchg.ivec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libchg.ivec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libchg.ivec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libchg.ivec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libchg.ivec___setitem__(self, *args)

    def pop(self):
        return _libchg.ivec_pop(self)

    def append(self, x):
        return _libchg.ivec_append(self, x)

    def empty(self):
        return _libchg.ivec_empty(self)

    def size(self):
        return _libchg.ivec_size(self)

    def swap(self, v):
        return _libchg.ivec_swap(self, v)

    def begin(self):
        return _libchg.ivec_begin(self)

    def end(self):
        return _libchg.ivec_end(self)

    def rbegin(self):
        return _libchg.ivec_rbegin(self)

    def rend(self):
        return _libchg.ivec_rend(self)

    def clear(self):
        return _libchg.ivec_clear(self)

    def get_allocator(self):
        return _libchg.ivec_get_allocator(self)

    def pop_back(self):
        return _libchg.ivec_pop_back(self)

    def erase(self, *args):
        return _libchg.ivec_erase(self, *args)

    def __init__(self, *args):
        this = _libchg.new_ivec(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _libchg.ivec_push_back(self, x)

    def front(self):
        return _libchg.ivec_front(self)

    def back(self):
        return _libchg.ivec_back(self)

    def assign(self, n, x):
        return _libchg.ivec_assign(self, n, x)

    def resize(self, *args):
        return _libchg.ivec_resize(self, *args)

    def insert(self, *args):
        return _libchg.ivec_insert(self, *args)

    def reserve(self, n):
        return _libchg.ivec_reserve(self, n)

    def capacity(self):
        return _libchg.ivec_capacity(self)
    __swig_destroy__ = _libchg.delete_ivec
    __del__ = lambda self: None
ivec_swigregister = _libchg.ivec_swigregister
ivec_swigregister(ivec)

class dvec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dvec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dvec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libchg.dvec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libchg.dvec___nonzero__(self)

    def __bool__(self):
        return _libchg.dvec___bool__(self)

    def __len__(self):
        return _libchg.dvec___len__(self)

    def __getslice__(self, i, j):
        return _libchg.dvec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libchg.dvec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libchg.dvec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libchg.dvec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libchg.dvec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libchg.dvec___setitem__(self, *args)

    def pop(self):
        return _libchg.dvec_pop(self)

    def append(self, x):
        return _libchg.dvec_append(self, x)

    def empty(self):
        return _libchg.dvec_empty(self)

    def size(self):
        return _libchg.dvec_size(self)

    def swap(self, v):
        return _libchg.dvec_swap(self, v)

    def begin(self):
        return _libchg.dvec_begin(self)

    def end(self):
        return _libchg.dvec_end(self)

    def rbegin(self):
        return _libchg.dvec_rbegin(self)

    def rend(self):
        return _libchg.dvec_rend(self)

    def clear(self):
        return _libchg.dvec_clear(self)

    def get_allocator(self):
        return _libchg.dvec_get_allocator(self)

    def pop_back(self):
        return _libchg.dvec_pop_back(self)

    def erase(self, *args):
        return _libchg.dvec_erase(self, *args)

    def __init__(self, *args):
        this = _libchg.new_dvec(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _libchg.dvec_push_back(self, x)

    def front(self):
        return _libchg.dvec_front(self)

    def back(self):
        return _libchg.dvec_back(self)

    def assign(self, n, x):
        return _libchg.dvec_assign(self, n, x)

    def resize(self, *args):
        return _libchg.dvec_resize(self, *args)

    def insert(self, *args):
        return _libchg.dvec_insert(self, *args)

    def reserve(self, n):
        return _libchg.dvec_reserve(self, n)

    def capacity(self):
        return _libchg.dvec_capacity(self)
    __swig_destroy__ = _libchg.delete_dvec
    __del__ = lambda self: None
dvec_swigregister = _libchg.dvec_swigregister
dvec_swigregister(dvec)

class svec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, svec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, svec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libchg.svec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libchg.svec___nonzero__(self)

    def __bool__(self):
        return _libchg.svec___bool__(self)

    def __len__(self):
        return _libchg.svec___len__(self)

    def __getslice__(self, i, j):
        return _libchg.svec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libchg.svec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libchg.svec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libchg.svec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libchg.svec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libchg.svec___setitem__(self, *args)

    def pop(self):
        return _libchg.svec_pop(self)

    def append(self, x):
        return _libchg.svec_append(self, x)

    def empty(self):
        return _libchg.svec_empty(self)

    def size(self):
        return _libchg.svec_size(self)

    def swap(self, v):
        return _libchg.svec_swap(self, v)

    def begin(self):
        return _libchg.svec_begin(self)

    def end(self):
        return _libchg.svec_end(self)

    def rbegin(self):
        return _libchg.svec_rbegin(self)

    def rend(self):
        return _libchg.svec_rend(self)

    def clear(self):
        return _libchg.svec_clear(self)

    def get_allocator(self):
        return _libchg.svec_get_allocator(self)

    def pop_back(self):
        return _libchg.svec_pop_back(self)

    def erase(self, *args):
        return _libchg.svec_erase(self, *args)

    def __init__(self, *args):
        this = _libchg.new_svec(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _libchg.svec_push_back(self, x)

    def front(self):
        return _libchg.svec_front(self)

    def back(self):
        return _libchg.svec_back(self)

    def assign(self, n, x):
        return _libchg.svec_assign(self, n, x)

    def resize(self, *args):
        return _libchg.svec_resize(self, *args)

    def insert(self, *args):
        return _libchg.svec_insert(self, *args)

    def reserve(self, n):
        return _libchg.svec_reserve(self, n)

    def capacity(self):
        return _libchg.svec_capacity(self)
    __swig_destroy__ = _libchg.delete_svec
    __del__ = lambda self: None
svec_swigregister = _libchg.svec_swigregister
svec_swigregister(svec)

class Chg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Chg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Chg, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _libchg.new_Chg()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def getAge(self):
        return _libchg.Chg_getAge(self)

    def friendSize(self):
        return _libchg.Chg_friendSize(self)
    __swig_getmethods__["x"] = lambda x: _libchg.Chg_x
    if _newclass:
        x = staticmethod(_libchg.Chg_x)
    __swig_setmethods__["m_age"] = _libchg.Chg_m_age_set
    __swig_getmethods__["m_age"] = _libchg.Chg_m_age_get
    if _newclass:
        m_age = _swig_property(_libchg.Chg_m_age_get, _libchg.Chg_m_age_set)
    __swig_setmethods__["m_friend"] = _libchg.Chg_m_friend_set
    __swig_getmethods__["m_friend"] = _libchg.Chg_m_friend_get
    if _newclass:
        m_friend = _swig_property(_libchg.Chg_m_friend_get, _libchg.Chg_m_friend_set)
    __swig_setmethods__["m_nums"] = _libchg.Chg_m_nums_set
    __swig_getmethods__["m_nums"] = _libchg.Chg_m_nums_get
    if _newclass:
        m_nums = _swig_property(_libchg.Chg_m_nums_get, _libchg.Chg_m_nums_set)
    __swig_setmethods__["vec"] = _libchg.Chg_vec_set
    __swig_getmethods__["vec"] = _libchg.Chg_vec_get
    if _newclass:
        vec = _swig_property(_libchg.Chg_vec_get, _libchg.Chg_vec_set)
    __swig_destroy__ = _libchg.delete_Chg
    __del__ = lambda self: None
Chg_swigregister = _libchg.Chg_swigregister
Chg_swigregister(Chg)

def Chg_x():
    return _libchg.Chg_x()
Chg_x = _libchg.Chg_x


def haha():
    return _libchg.haha()
haha = _libchg.haha

def _print(s):
    return _libchg._print(s)
_print = _libchg._print

def add(*args):
    return _libchg.add(*args)
add = _libchg.add
# This file is compatible with both classic and new-style classes.



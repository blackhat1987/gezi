#edit-mode: -*- python -*-
#coding:gbk

#工作路径. 如果高版本gcc 需要修改两个路径 设置好TOOLCHAIN_ROOT
WORKROOT('../../../../../../../../')
TOOLCHAIN_ROOT='../../../../../../../../ps/se/toolchain'
RELATIVE_PATH='../../../'

USE_GPROF=0 #是否增加-pg选项 gprof使用 
print 'USE_GPROF: %d'%USE_GPROF
LEVEL=3
print 'LEVEL: {}'.format(LEVEL)
#是否使用本地的gcc 比如本地安装了gcc 4.8.2使用本地的可以直接使用生成的bin文件 如./main
GCC_LOCAL=2
print 'GCC_LOCAL: %d'%GCC_LOCAL 
#是否使用高版本gcc 可以直接使用生成的bin文件 如./main 
GCC_HIGH=1
print 'GCC_HIGH: %d'%GCC_HIGH
#是否使用高版本动态链接库，即是否使用高版本libc 如果启用 可以使用openmp 但是需要设置LD_LIBRARY_PATH sh ./run.sh ./main
GCC_DYNAMIC=1
print 'GCC_DYNAMIC: %d'%GCC_DYNAMIC
GCC_VERSION='3.4.5'
if  GCC_HIGH == 1: 
	if GCC_DYNAMIC == 1:
		GCC_VERSION='4.8.1'
	else:
		GCC_VERSION='4.8.2'
print 'GCC_VERSION: %s'%GCC_VERSION
GLIBC_VERSION='2.9'
BINUTILS_VERSION='2.20'
KERNAL_VERSION='2.6.32'

#使用硬链接copy.
CopyUsingHardLink(True)

GCC_BIN='g++'
GCC_FLAGS = '' 
TOOLCHAIN=TOOLCHAIN_ROOT
if GCC_HIGH  == 1:
	if GCC_DYNAMIC == 1:	
		TOOLCHAIN += '/x86_64-unknown-linux-gnu-%s-%s-%s-%s'%(GCC_VERSION,GLIBC_VERSION,BINUTILS_VERSION,KERNAL_VERSION)
		GCC_BIN=TOOLCHAIN + '/bin/x86_64-unknown-linux-gnu-g++'
	else:
		TOOLCHAIN += '/gcc_only_%s'%(GCC_VERSION)
		GCC_BIN=TOOLCHAIN + '/bin/g++'

if GCC_LOCAL == 1:
	GCC_BIN = 'g++'
elif GCC_LOCAL == 2:
	GCC_BIN = '/opt/compiler/gcc-4.8.2/bin/g++'

print 'GCC_BIN: %s'%GCC_BIN; os.system('%s -v'%GCC_BIN)
CC(GCC_BIN)
CXX(GCC_BIN)

#C预处理器参数.
CPPFLAGS('-D_GNU_SOURCE -D__STDC_LIMIT_MACROS -DVERSION=\\\"1.9.8.7\\\"')

#编译参数设置
COMMON_FLAGS = ' -g3 -O{} -pipe -W -Wall -fPIC -DHAVE_NETINET_IN_H -Wno-unused-parameter'.format(LEVEL)
if USE_GPROF:
	COMMON_FLAGS += ' -pg'

if GCC_HIGH  == 1:
	GCC_FLAGS += '-std=c++0x -fpermissive -Wno-write-strings -Wno-literal-suffix -Wno-unused-local-typedefs'
	if GCC_DYNAMIC  == 1:
		GCC_FLAGS += ' -fopenmp'
		
#C编译参数.
CFLAGS(COMMON_FLAGS, GCC_FLAGS)

#C++编译参数.
CXXFLAGS(COMMON_FLAGS, GCC_FLAGS)

#IDL编译参数
IDLFLAGS('--compack')

#UBRPC编译参数
UBRPCFLAGS('--compack')

#链接参数.
GCC_LDFLAGS='-g'
if USE_GPROF:
	GCC_LDFLAGS += ' -pg'
	
if GCC_HIGH  == 1: 
	if GCC_DYNAMIC  == 1:
		GCC_LDFLAGS += ' -lgomp'
	else: 
		GCC_LDFLAGS  += ' -static-libgcc -static-libstdc++'

#链接参数.
LDFLAGS('-lpthread -lrt -ldl -lldap -lcurl -rdynamic -lssl -lcrypto', GCC_LDFLAGS)

#依赖模块
ImportConfigsFrom('../../../')
CONFIGS('app/search/sep/anti-spam/melt@trunk')
#CONFIGS('st/nlp/lm-score@lm-score_1-0-3-1_PD_BL')
CONFIGS('st/nlp/lm-score')

CONFIGS('public/ub@1.2.49.0')
CONFIGS('app/search/ksarch/store/proxy-lib/redis@base')

#头文件路径.
INCPATHS('. ./include ./utils ./output ./output/include ./include/feature ./include/model ./include/numeric'.replace('./',RELATIVE_PATH))
#srcs=GLOB('./src/*.cpp ./src/feature/*.cpp ./src/model/*.cpp ./src/json/*.cpp'.replace('./',RELATIVE_PATH))
headers=''
#使用库
LIBS('../../../libgezi_common.a')
LIBS('../../../libgezi_json.a')
LIBS('../../../libgezi_cppformat.a')

#可执行文件
#静态库
#StaticLibrary('gezi',Sources(srcs),HeaderFiles(headers))
#共享库
#子目录
#Directory('demo')
srcs = ''
Application('fullposts_train',Sources('fullposts_train.cc', srcs))
Application('get_fullposts',Sources('get_fullposts.cc', srcs))
#Application('fullposts',Sources('fullposts.cc',srcs, ENV.CppFlags()+CppFlags('-O3 -DNDEBUG -DNO_CEREAL')))
Application('fullposts',Sources('fullposts.cc',srcs))
Application('test_cached_fetcher',Sources('test_cached_fetcher.cc', srcs))
#Application('get_full_posts_info',Sources('get_full_posts_info.cc',srcs, ENV.CppFlags()+CppFlags('-O3 -DNDEBUG')))
Application('get_full_posts_info',Sources('get_full_posts_info.cc',srcs))

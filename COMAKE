#edit-mode: -*- python -*-
#coding:gbk

#工作路径. 如果高版本gcc 需要修改两个路径 设置好TOOLCHAIN_ROOT
WORKROOT('../../../../../')
TOOLCHAIN_ROOT='../../../../../ps/se/toolchain'
RELATIVE_PATH='./'

GCC_LEVEL=3
GCC_LOCAL=2 #<1 use g++ <2 use /opt/compiler/gcc-4.8.2/bin/g++  <0 will use toolchain
print 'GCC_LOCAL: %d'%GCC_LOCAL 
GCC_DYNAMIC=1
print 'GCC_DYNAMIC: %d'%GCC_DYNAMIC

GCC_HIGH=1
print 'GCC_HIGH: %d'%GCC_HIGH
#使用硬链接copy.
#CopyUsingHardLink(True)

GCC_BIN='g++'
GCC_FLAGS = '' 

if GCC_LOCAL == 1:
	GCC_BIN = 'g++'
elif GCC_LOCAL == 2:
	GCC_BIN = '/opt/compiler/gcc-4.8.2/bin/g++'

print 'GCC_BIN: %s'%GCC_BIN
CC(GCC_BIN)
CXX(GCC_BIN)

#C预处理器参数.
CPPFLAGS('-D_GNU_SOURCE -D__STDC_LIMIT_MACROS -DVERSION=\\\"1.9.8.7\\\"')

#编译参数设置
COMMON_FLAGS = '-g -O%d -pipe -W -Wall -fPIC -DHAVE_NETINET_IN_H -Wno-unused-parameter -Wno-deprecated'%GCC_LEVEL  

if GCC_HIGH  == 1:
	GCC_FLAGS += '-std=c++11 -fpermissive -Wno-write-strings -Wno-literal-suffix -Wno-unused-local-typedefs'
	if GCC_DYNAMIC  == 1:
		GCC_FLAGS += ' -fopenmp'
		
#C编译参数.
CFLAGS(COMMON_FLAGS, GCC_FLAGS)

#C++编译参数.
CXXFLAGS(COMMON_FLAGS, GCC_FLAGS)

#IDL编译参数
IDLFLAGS('--compack')

#UBRPC编译参数
UBRPCFLAGS('--compack')

#链接参数.
GCC_LDFLAGS=''
if GCC_HIGH  == 1: 
	if GCC_DYNAMIC  == 1:
		GCC_LDFLAGS += ' -lgomp'
	else: 
		GCC_LDFLAGS  += ' -static-libgcc -static-libstdc++'

#链接参数.
#LDFLAGS('-ldl -lpthread -lrt -rdynamic', GCC_LDFLAGS)
LDFLAGS('-lpthread -lcrypto -lrt -lssl -lldap -lcurl -ldl -rdynamic', GCC_LDFLAGS)

#依赖模块
#CONFIGS('ps/se/toolchain@base')
#CONFIGS('third-64/openssl@base')
#CONFIGS('third-64/zlib@base')
CONFIGS('third-64/boost@base')
#CONFIGS('third-gcc4/boost/@base')
CONFIGS('third-64/gflags@base')
CONFIGS('third-64/glog@base')
#CONFIGS('third-64/libcurl@base')
CONFIGS('third-64/tcmalloc@base')
CONFIGS('com/btest/gtest@base')
CONFIGS('public/comlog-plugin@base')
CONFIGS('public/configure@base')

#CONFIGS('lib2-64/wordseg@3.0.12.2')
CONFIGS('lib2-64/wordseg@3.2.1.1')
CONFIGS('lib2-64/postag@2.0.2.0')

CONFIGS('lib2-64/ullib@3.1.40.0')
CONFIGS('lib2-64/ccode@3.2.3.2')

CONFIGS('lib2-64/dict@3.1.12.0')
CONFIGS('lib2-64/others-ex@3.1.14.2')
CONFIGS('lib2-64/libcrf@2.1.3.0')
CONFIGS('public/odict@1.1.2.1')
CONFIGS('public/uconv@1.1.3.0')
#CONFIGS('other/rabit@base')
#CONFIGS('public/myclient@1.0.8.0')
#CONFIGS('third-64/mysql@5.0.51.2')
CONFIGS('app/search/sep/anti-spam/gezi/third')

#必须放在前面 不然会受到gezi下面的include影响 目前主要是convert_type中使用UINT等define的影响 后续考虑将应用代码统一改为TO_UINT等
headers=''
INCPATHS('./include/cppformat/'.replace('./',RELATIVE_PATH))
srcs = GLOB('./third/cppformat/*.cc'.replace('./', RELATIVE_PATH))
StaticLibrary('gezi_cppformat',Sources(srcs, ENV.CppFlags()+CppFlags('-O3 -DNDEBUG')),HeaderFiles(headers))

#头文件路径.
INCPATHS('. ./include ./third/folly ./third/double-conversion/ ./utils ./output ./output/include ./include/feature ./include/numeric ./melt/include/ ./include/serialization/'.replace('./',RELATIVE_PATH))
#srcs=GLOB('./src/*.cpp ./src/feature/*.cpp ./src/model/*.cpp ./src/seralization/shared_ptr_helper.cpp'.replace('./',RELATIVE_PATH))
#srcs=GLOB('./src/*.cpp ./src/feature/*.cpp ./src/model/*.cpp'.replace('./',RELATIVE_PATH))
srcs=GLOB('./src/*.cpp'.replace('./',RELATIVE_PATH))
#使用库
LIBS('./include/tools/pinyin/libPYNotation.a')

TARGET('copy-pinyin-lib', ShellCommands('mkdir -p output/lib','cp ./include/tools/pinyin/libPYNotation.a ./output/lib/'), CleanCommands('rm -rf ./output/lib/libPYNotation.a')) 


srcs = GLOB('./src/*.cpp'.replace('./',RELATIVE_PATH))
CPP_FLAGS = ENV.CppFlags()+CppFlags('-DNDEBUG')
StaticLibrary('gezi_common',Sources(srcs, CPP_FLAGS),HeaderFiles(headers))

#可执行文件
#静态库
#StaticLibrary('gezi_common',Sources(srcs, CPP_FLAGS),HeaderFiles(headers))
srcs = GLOB('./src/json/*.cpp'.replace('./',RELATIVE_PATH))
StaticLibrary('gezi_json',Sources(srcs, CPP_FLAGS),HeaderFiles(headers))

#共享库
#子目录
#Directory('demo')

TARGET('copy-cppformat', ShellCommands('mkdir -p output/cppformat', 'cp -rf third/cppformat/*.h output/cppformat'), CleanCommands('rm -rf output/cppformat')) 
TARGET('copy-eigen', ShellCommands('mkdir -p output/Eigen', 'cp -rf third/Eigen/* output/Eigen'), CleanCommands('rm -rf output/Eigen')) 
TARGET('copy-folly', ShellCommands('mkdir -p output/folly', 'cp -rf third/folly/folly/* output/folly'), CleanCommands('rm -rf output/folly')) 
TARGET('copy-double-conversion', ShellCommands('mkdir -p output/double-conversion', 'cp -rf third/double-conversion/double-conversion/* output/double-conversion'), CleanCommands('rm -rf output/double-conversion/')) 

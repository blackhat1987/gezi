#edit-mode: -*- python -*-
#coding:gbk

#工作路径. 如果高版本gcc 需要修改两个路径 设置好TOOLCHAIN_ROOT
WORKROOT('../../../../../')
TOOLCHAIN_ROOT='../../../../../ps/se/toolchain'
RELATIVE_PATH='./'

GCC_LEVEL=3
#是否使用本地的gcc 比如本地安装了gcc 4.8.2使用本地的可以直接使用生成的bin文件 如./main
GCC_LOCAL=0
print 'GCC_LOCAL: %d'%GCC_LOCAL 
#是否使用高版本gcc 可以直接使用生成的bin文件 如./main 
GCC_HIGH=1
print 'GCC_HIGH: %d'%GCC_HIGH
#是否使用高版本动态链接库，即是否使用高版本libc 如果启用 可以使用openmp 但是需要make .copy-so 将ld-linux...so库拷贝或者链接到当前路径
GCC_DYNAMIC=0
print 'GCC_DYNAMIC: %d'%GCC_DYNAMIC
GCC_VERSION='3.4.5'
if  GCC_HIGH == 1: 
	if GCC_DYNAMIC == 1:
		GCC_VERSION='4.8.1'
	else:
		GCC_VERSION='4.8.2'
GLIBC_VERSION='2.9'
BINUTILS_VERSION='2.20'
KERNAL_VERSION='2.6.32'

#使用硬链接copy.
CopyUsingHardLink(True)

GCC_BIN='g++'
GCC_FLAGS = '' 
TOOLCHAIN=TOOLCHAIN_ROOT
if GCC_HIGH  == 1:
	if GCC_DYNAMIC == 1:	
		TOOLCHAIN += '/x86_64-unknown-linux-gnu-%s-%s-%s-%s'%(GCC_VERSION,GLIBC_VERSION,BINUTILS_VERSION,KERNAL_VERSION)
		GCC_BIN=TOOLCHAIN + '/bin/x86_64-unknown-linux-gnu-g++'
	else:
		TOOLCHAIN += '/gcc_only_%s'%(GCC_VERSION)
		GCC_BIN=TOOLCHAIN + '/bin/g++'
#对于static方式 LIBS_DIR不起任何作用
LIBS_DIR=TOOLCHAIN + '/x86_64-unknown-linux-gnu/lib/'

print 'LIBS_DIR: %s'%LIBS_DIR

if GCC_LOCAL == 1:
	GCC_BIN = 'g++'
print 'GCC_BIN: %s'%GCC_BIN
CC(GCC_BIN)
CXX(GCC_BIN)

#C预处理器参数.
CPPFLAGS('-D_GNU_SOURCE -D__STDC_LIMIT_MACROS -DVERSION=\\\"1.9.8.7\\\"')

#编译参数设置
COMMON_FLAGS = '-g -O%d -pipe -W -Wall -fPIC -DHAVE_NETINET_IN_H -Wno-unused-parameter -Wno-deprecated'%GCC_LEVEL  

if GCC_HIGH  == 1:
	GCC_FLAGS += '-std=c++11 -fpermissive -Wno-write-strings -Wno-literal-suffix -Wno-unused-local-typedefs'
	if GCC_DYNAMIC  == 1:
		GCC_FLAGS += ' -fopenmp'
		
#C编译参数.
CFLAGS(COMMON_FLAGS, GCC_FLAGS)

#C++编译参数.
CXXFLAGS(COMMON_FLAGS, GCC_FLAGS)

#IDL编译参数
IDLFLAGS('--compack')

#UBRPC编译参数
UBRPCFLAGS('--compack')

#链接参数.
GCC_LDFLAGS=''
if GCC_HIGH  == 1: 
	if GCC_DYNAMIC  == 1:
		GCC_LDFLAGS += ' -lgomp -rdynamic -Wl,-rpath=../../../../../../ps/se/toolchain/x86_64-unknown-linux-gnu-4.8.1-2.9-2.20-2.6.32/x86_64-unknown-linux-gnu/lib/'
		if GCC_LOCAL != 1:
			GCC_LDFLAGS += ' -Wl,--dynamic-linker=./ld-linux-x86-64.so.2 -L%s'%(LIBS_DIR)
		TARGET('.copy-so', ShellCommands('ln -s %s/ld-linux-x86-64.so.2 ld-linux-x86-64.so.2'%(LIBS_DIR)), 
          CleanCommands('rm -rf ld-linux-x86-64.so.2')) 
	else: 
		GCC_LDFLAGS  += ' -static-libgcc -static-libstdc++'

#链接参数.
#LDFLAGS('-ldl -lpthread -lrt -rdynamic', GCC_LDFLAGS)
LDFLAGS('-lpthread -lcrypto -lrt -lssl -lldap -lcurl -ldl -rdynamic', GCC_LDFLAGS)

#依赖模块
CONFIGS('ps/se/toolchain@base')
CONFIGS('third-64/openssl@base')
CONFIGS('third-64/zlib@base')
CONFIGS('third-64/boost@base')
#CONFIGS('third-gcc4/boost/@base')
CONFIGS('third-64/gflags@base')
CONFIGS('third-64/glog@base')
CONFIGS('third-64/libcurl@base')
CONFIGS('third-64/tcmalloc@base')
CONFIGS('com/btest/gtest@base')
CONFIGS('public/comlog-plugin@base')
CONFIGS('public/configure@base')
CONFIGS('lib2-64/wordseg@3.0.12.2')
CONFIGS('lib2-64/ullib@3.1.40.0')
CONFIGS('lib2-64/ccode@3.2.3.2')
CONFIGS('lib2-64/dict@3.1.12.0')
CONFIGS('lib2-64/others-ex@3.1.14.2')
CONFIGS('lib2-64/libcrf@2.1.3.0')
CONFIGS('public/odict@1.1.2.1')
CONFIGS('lib2-64/postag@2.0.2.0')
CONFIGS('public/uconv@1.1.3.0')
#CONFIGS('public/myclient@1.0.8.0')
#CONFIGS('third-64/mysql@5.0.51.2')

#头文件路径.
INCPATHS('. ./include ./utils ./output ./output/include ./include/feature ./include/numeric ./melt/include/ ./include/serialization/'.replace('./',RELATIVE_PATH))
#srcs=GLOB('./src/*.cpp ./src/feature/*.cpp ./src/model/*.cpp ./src/seralization/shared_ptr_helper.cpp'.replace('./',RELATIVE_PATH))
#srcs=GLOB('./src/*.cpp ./src/feature/*.cpp ./src/model/*.cpp'.replace('./',RELATIVE_PATH))
srcs=GLOB('./src/*.cpp'.replace('./',RELATIVE_PATH))
headers=''
#使用库
LIBS('./include/tools/pinyin/libPYNotation.a')

TARGET('copy-pinyin-lib', ShellCommands('mkdir -p output/lib','cp ./include/tools/pinyin/libPYNotation.a ./output/lib/'), CleanCommands('rm -rf ./output/lib/libPYNotation.a')) 

#可执行文件
#静态库
StaticLibrary('gezi_common',Sources(srcs, ENV.CppFlags()+CppFlags('-O3 -DNDEBUG')),HeaderFiles(headers))

srcs = GLOB('./src/json/*.cpp'.replace('./',RELATIVE_PATH))
StaticLibrary('gezi_json',Sources(srcs, ENV.CppFlags()+CppFlags('-O3 -DNDEBUG')),HeaderFiles(headers))
 
#共享库
#子目录
#Directory('demo')


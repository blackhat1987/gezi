#define private public
#define protected public
#include "python_util.h"
// This file has been generated by Py++.

#include "boost/python.hpp"

#include "boost/python/suite/indexing/vector_indexing_suite.hpp"

#include "common_util.h"

#include "Idf.h"

namespace bp = boost::python;

BOOST_PYTHON_MODULE(libidf){
DEF_VEC(ivec);
DEF_VEC(dvec);
DEF_VEC(uvec);
DEF_VEC(svec);
DEF_VEC(ulvec);
DEF_MAP(id_map);
DEF_MAP(sd_map);
DEF_MAP(si_map);

{ //::std::vector< std::string >
typedef bp::class_< std::vector< std::string > > vector_less__std_scope_string__greater__exposer_t;
vector_less__std_scope_string__greater__exposer_t vector_less__std_scope_string__greater__exposer = vector_less__std_scope_string__greater__exposer_t( "vector_less__std_scope_string__greater_" );
bp::scope vector_less__std_scope_string__greater__scope( vector_less__std_scope_string__greater__exposer );
vector_less__std_scope_string__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< std::string >, true >() )
VEC_METHOD(::std::vector< std::string >);
}

bp::class_< gezi::Idf >( "Idf", bp::init< >() )
.def(
"add"
, (void ( ::gezi::Idf::* )( ::std::string,::std::string ) )( &::gezi::Idf::add )
, ( bp::arg("doc"), bp::arg("sep")="\011" ) )
.def(
"add"
, (void ( ::gezi::Idf::* )( ::std::vector< std::string > const & ) )( &::gezi::Idf::add )
, ( bp::arg("words") ) )
.def(
"save"
, (void ( ::gezi::Idf::* )( ::std::string ) )( &::gezi::Idf::save )
, ( bp::arg("file") ) )
.def(
"save"
, (void ( ::gezi::Idf::* )( ::std::string,int,int ) )( &::gezi::Idf::save )
, ( bp::arg("file"), bp::arg("minCount"), bp::arg("minIdf") ) )
.def(
"show"
, (void ( ::gezi::Idf::* )( int ) )( &::gezi::Idf::show )
, ( bp::arg("maxNum")=(int)(1024) ) );
}

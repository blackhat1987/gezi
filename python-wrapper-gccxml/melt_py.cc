// This file has been generated by Py++.

#include "boost/python.hpp"

#include "boost/python/suite/indexing/vector_indexing_suite.hpp"

#include "boost/python/suite/indexing/map_indexing_suite.hpp"

#include "gezi.include.python/common_util.h"

#include "gezi.include.python/Numeric/Vector/Vector.h"

#include "gezi.include.python/Numeric/Vector/WeightVector.h"

#include "gezi.include.python/Numeric/Vector/vector_util.h"

#include "gezi.include.python/feature/FeatureVector.h"

#include "gezi.include.python/feature/features_util.h"

#include "gezi.include.python/feature/FeatureExtractor.h"

#include "gezi.include.python/feature/FeaturesExtractorMgr.h"

#include "gezi.include.python/Identifer.h"

#include "gezi.include.python/Numeric/Vector/Vector.h"

#include "gezi.include.python/Numeric/Vector/vector_util.h"

#include "gezi.include.python/Numeric/Vector/TVector.h"

#include "gezi.include.python/Numeric/Vector/WeightVector.h"

#include "include.python/MLCore/PredictorFactory.h"

#include "include.python/MLCore/TrainerFactory.h"

#include "include.python/MLCore/Trainer.h"

#include "include.python/MLCore/IterativeTrainer.h"

#include "include.python/MLCore/Predictor.h"

#include "include.python/MLCore/TextPredictor.h"

#include "include.python/MLCore/PredictionKind.h"

#include "include.python/MLCore/LossKind.h"

#include "include.python/Prediction/Instances/Instance.h"

#include "include.python/Prediction/Instances/HeaderSchema.h"

#include "include.python/Prediction/Instances/Instances.h"

#include "include.python/Prediction/Instances/FeatureNamesVector.h"

#include "include.python/Prediction/Instances/InstanceParser.h"

#include "include.python/Prediction/Instances/instances_util.h"

namespace bp = boost::python;

struct FeatureExtractor_wrapper : gezi::FeatureExtractor, bp::wrapper< gezi::FeatureExtractor > {

    FeatureExtractor_wrapper(gezi::FeatureExtractor const & arg )
    : gezi::FeatureExtractor( arg )
      , bp::wrapper< gezi::FeatureExtractor >(){
        // copy constructor
        
    }

    FeatureExtractor_wrapper(::std::string name="" )
    : gezi::FeatureExtractor( name )
      , bp::wrapper< gezi::FeatureExtractor >(){
        // constructor
    
    }

    virtual void extract(  ) {
        if( bp::override func_extract = this->get_override( "extract" ) )
            func_extract(  );
        else
            this->gezi::FeatureExtractor::extract(  );
    }
    
    
    void default_extract(  ) {
        gezi::FeatureExtractor::extract( );
    }

    virtual void init(  ) {
        if( bp::override func_init = this->get_override( "init" ) )
            func_init(  );
        else
            this->gezi::FeatureExtractor::init(  );
    }
    
    
    void default_init(  ) {
        gezi::FeatureExtractor::init( );
    }

    virtual void process( ::gezi::Feature * feature ) {
        if( bp::override func_process = this->get_override( "process" ) )
            func_process( boost::python::ptr(feature) );
        else
            this->gezi::FeatureExtractor::process( boost::python::ptr(feature) );
    }
    
    
    void default_process( ::gezi::Feature * feature ) {
        gezi::FeatureExtractor::process( boost::python::ptr(feature) );
    }

};

struct InstanceParser_wrapper : gezi::InstanceParser, bp::wrapper< gezi::InstanceParser > {

    InstanceParser_wrapper(gezi::InstanceParser const & arg )
    : gezi::InstanceParser( arg )
      , bp::wrapper< gezi::InstanceParser >(){
        // copy constructor
        
    }

    InstanceParser_wrapper( )
    : gezi::InstanceParser( )
      , bp::wrapper< gezi::InstanceParser >(){
        // null constructor
    
    }

    void Finallize(  ){
        gezi::InstanceParser::Finallize(  );
    }

};

struct Trainer_wrapper : gezi::Trainer, bp::wrapper< gezi::Trainer > {

    Trainer_wrapper(gezi::Trainer const & arg )
    : gezi::Trainer( arg )
      , bp::wrapper< gezi::Trainer >(){
        // copy constructor
        
    }

    Trainer_wrapper()
    : gezi::Trainer()
      , bp::wrapper< gezi::Trainer >(){
        // null constructor
        
    }

    virtual void Finalize( ::gezi::Instances & instances ){
        if( bp::override func_Finalize = this->get_override( "Finalize" ) )
            func_Finalize( boost::ref(instances) );
        else
            this->gezi::Trainer::Finalize( boost::ref(instances) );
    }

    virtual ::gezi::LossKind GetLossKind(  ) {
        if( bp::override func_GetLossKind = this->get_override( "GetLossKind" ) )
            return func_GetLossKind(  );
        else
            return this->gezi::Trainer::GetLossKind(  );
    }
    
    
    ::gezi::LossKind default_GetLossKind(  ) {
        return gezi::Trainer::GetLossKind( );
    }

    virtual ::std::string GetParam(  ) {
        if( bp::override func_GetParam = this->get_override( "GetParam" ) )
            return func_GetParam(  );
        else
            return this->gezi::Trainer::GetParam(  );
    }
    
    
    ::std::string default_GetParam(  ) {
        return gezi::Trainer::GetParam( );
    }

    virtual ::gezi::PredictionKind GetPredictionKind(  ) {
        if( bp::override func_GetPredictionKind = this->get_override( "GetPredictionKind" ) )
            return func_GetPredictionKind(  );
        else
            return this->gezi::Trainer::GetPredictionKind(  );
    }
    
    
    ::gezi::PredictionKind default_GetPredictionKind(  ) {
        return gezi::Trainer::GetPredictionKind( );
    }

    virtual unsigned int GetRandSeed(  ) const  {
        if( bp::override func_GetRandSeed = this->get_override( "GetRandSeed" ) )
            return func_GetRandSeed(  );
        else
            return this->gezi::Trainer::GetRandSeed(  );
    }
    
    
    unsigned int default_GetRandSeed(  ) const  {
        return gezi::Trainer::GetRandSeed( );
    }

    virtual void Init(  ){
        if( bp::override func_Init = this->get_override( "Init" ) )
            func_Init(  );
        else
            this->gezi::Trainer::Init(  );
    }

    virtual void Initialize( ::gezi::Instances & instances ){
        if( bp::override func_Initialize = this->get_override( "Initialize" ) )
            func_Initialize( boost::ref(instances) );
        else
            this->gezi::Trainer::Initialize( boost::ref(instances) );
    }

    virtual void InnerTrain( ::gezi::Instances & instances ){
        if( bp::override func_InnerTrain = this->get_override( "InnerTrain" ) )
            func_InnerTrain( boost::ref(instances) );
        else
            this->gezi::Trainer::InnerTrain( boost::ref(instances) );
    }

    virtual void Train( ::gezi::Instances & instances ) {
        if( bp::override func_Train = this->get_override( "Train" ) )
            func_Train( boost::ref(instances) );
        else
            this->gezi::Trainer::Train( boost::ref(instances) );
    }
    
    
    void default_Train( ::gezi::Instances & instances ) {
        gezi::Trainer::Train( boost::ref(instances) );
    }

    virtual void TryInitializeNormalizer( ::gezi::Instances & instances, bool isStreaming ) {
        if( bp::override func_TryInitializeNormalizer = this->get_override( "TryInitializeNormalizer" ) )
            func_TryInitializeNormalizer( boost::ref(instances), isStreaming );
        else
            this->gezi::Trainer::TryInitializeNormalizer( boost::ref(instances), isStreaming );
    }
    
    
    void default_TryInitializeNormalizer( ::gezi::Instances & instances, bool isStreaming ) {
        gezi::Trainer::TryInitializeNormalizer( boost::ref(instances), isStreaming );
    }

};

struct ValidatingTrainer_wrapper : gezi::ValidatingTrainer, bp::wrapper< gezi::ValidatingTrainer > {

    ValidatingTrainer_wrapper(gezi::ValidatingTrainer const & arg )
    : gezi::ValidatingTrainer( arg )
      , bp::wrapper< gezi::ValidatingTrainer >(){
        // copy constructor
        
    }

    ValidatingTrainer_wrapper( )
    : gezi::ValidatingTrainer( )
      , bp::wrapper< gezi::ValidatingTrainer >(){
        // null constructor
    
    }

    bool Evaluate( int round, bool forceEvaluate=false ){
        return gezi::ValidatingTrainer::Evaluate( round, forceEvaluate );
    }

    void EvaluateOnce(  ){
        gezi::ValidatingTrainer::EvaluateOnce(  );
    }

    virtual void EvaluatePredicts(  ){
        if( bp::override func_EvaluatePredicts = this->get_override( "EvaluatePredicts" ) )
            func_EvaluatePredicts(  );
        else
            this->gezi::ValidatingTrainer::EvaluatePredicts(  );
    }

    virtual void GenPredicts(  ){
        if( bp::override func_GenPredicts = this->get_override( "GenPredicts" ) )
            func_GenPredicts(  );
        else
            this->gezi::ValidatingTrainer::GenPredicts(  );
    }

    virtual void GenProabilites(  ){
        if( bp::override func_GenProabilites = this->get_override( "GenProabilites" ) )
            func_GenProabilites(  );
        else
            this->gezi::ValidatingTrainer::GenProabilites(  );
    }

    virtual void RestoreBestStage(  ){
        if( bp::override func_RestoreBestStage = this->get_override( "RestoreBestStage" ) )
            func_RestoreBestStage(  );
        else
            this->gezi::ValidatingTrainer::RestoreBestStage(  );
    }

    virtual void StoreBestStage(  ){
        if( bp::override func_StoreBestStage = this->get_override( "StoreBestStage" ) )
            func_StoreBestStage(  );
        else
            this->gezi::ValidatingTrainer::StoreBestStage(  );
    }

    virtual void Train( ::gezi::Instances & instances, ::std::vector< gezi::Instances > & validationInstances, ::std::vector< boost::shared_ptr<gezi::Evaluator> > & evaluators ) {
        if( bp::override func_Train = this->get_override( "Train" ) )
            func_Train( boost::ref(instances), boost::ref(validationInstances), boost::ref(evaluators) );
        else
            this->gezi::ValidatingTrainer::Train( boost::ref(instances), boost::ref(validationInstances), boost::ref(evaluators) );
    }
    
    
    void default_Train( ::gezi::Instances & instances, ::std::vector< gezi::Instances > & validationInstances, ::std::vector< boost::shared_ptr<gezi::Evaluator> > & evaluators ) {
        gezi::ValidatingTrainer::Train( boost::ref(instances), boost::ref(validationInstances), boost::ref(evaluators) );
    }

    virtual void Finalize( ::gezi::Instances & instances ){
        if( bp::override func_Finalize = this->get_override( "Finalize" ) )
            func_Finalize( boost::ref(instances) );
        else
            this->gezi::Trainer::Finalize( boost::ref(instances) );
    }

    virtual ::gezi::LossKind GetLossKind(  ) {
        if( bp::override func_GetLossKind = this->get_override( "GetLossKind" ) )
            return func_GetLossKind(  );
        else
            return this->gezi::Trainer::GetLossKind(  );
    }
    
    
    ::gezi::LossKind default_GetLossKind(  ) {
        return gezi::Trainer::GetLossKind( );
    }

    virtual ::std::string GetParam(  ) {
        if( bp::override func_GetParam = this->get_override( "GetParam" ) )
            return func_GetParam(  );
        else
            return this->gezi::Trainer::GetParam(  );
    }
    
    
    ::std::string default_GetParam(  ) {
        return gezi::Trainer::GetParam( );
    }

    virtual ::gezi::PredictionKind GetPredictionKind(  ) {
        if( bp::override func_GetPredictionKind = this->get_override( "GetPredictionKind" ) )
            return func_GetPredictionKind(  );
        else
            return this->gezi::Trainer::GetPredictionKind(  );
    }
    
    
    ::gezi::PredictionKind default_GetPredictionKind(  ) {
        return gezi::Trainer::GetPredictionKind( );
    }

    virtual unsigned int GetRandSeed(  ) const  {
        if( bp::override func_GetRandSeed = this->get_override( "GetRandSeed" ) )
            return func_GetRandSeed(  );
        else
            return this->gezi::Trainer::GetRandSeed(  );
    }
    
    
    unsigned int default_GetRandSeed(  ) const  {
        return gezi::Trainer::GetRandSeed( );
    }

    virtual void Init(  ){
        if( bp::override func_Init = this->get_override( "Init" ) )
            func_Init(  );
        else
            this->gezi::Trainer::Init(  );
    }

    virtual void Initialize( ::gezi::Instances & instances ){
        if( bp::override func_Initialize = this->get_override( "Initialize" ) )
            func_Initialize( boost::ref(instances) );
        else
            this->gezi::Trainer::Initialize( boost::ref(instances) );
    }

    virtual void InnerTrain( ::gezi::Instances & instances ){
        if( bp::override func_InnerTrain = this->get_override( "InnerTrain" ) )
            func_InnerTrain( boost::ref(instances) );
        else
            this->gezi::Trainer::InnerTrain( boost::ref(instances) );
    }

    virtual void Train( ::gezi::Instances & instances ) {
        if( bp::override func_Train = this->get_override( "Train" ) )
            func_Train( boost::ref(instances) );
        else
            this->gezi::Trainer::Train( boost::ref(instances) );
    }
    
    
    void default_Train( ::gezi::Instances & instances ) {
        gezi::Trainer::Train( boost::ref(instances) );
    }

    virtual void TryInitializeNormalizer( ::gezi::Instances & instances, bool isStreaming ) {
        if( bp::override func_TryInitializeNormalizer = this->get_override( "TryInitializeNormalizer" ) )
            func_TryInitializeNormalizer( boost::ref(instances), isStreaming );
        else
            this->gezi::Trainer::TryInitializeNormalizer( boost::ref(instances), isStreaming );
    }
    
    
    void default_TryInitializeNormalizer( ::gezi::Instances & instances, bool isStreaming ) {
        gezi::Trainer::TryInitializeNormalizer( boost::ref(instances), isStreaming );
    }

};

struct IterativeTrainer_wrapper : gezi::IterativeTrainer, bp::wrapper< gezi::IterativeTrainer > {

    IterativeTrainer_wrapper(gezi::IterativeTrainer const & arg )
    : gezi::IterativeTrainer( arg )
      , bp::wrapper< gezi::IterativeTrainer >(){
        // copy constructor
        
    }

    IterativeTrainer_wrapper()
    : gezi::IterativeTrainer()
      , bp::wrapper< gezi::IterativeTrainer >(){
        // null constructor
        
    }

    virtual void BeginTrainingIteration(  ) {
        if( bp::override func_BeginTrainingIteration = this->get_override( "BeginTrainingIteration" ) )
            func_BeginTrainingIteration(  );
        else
            this->gezi::IterativeTrainer::BeginTrainingIteration(  );
    }
    
    
    void default_BeginTrainingIteration(  ) {
        gezi::IterativeTrainer::BeginTrainingIteration( );
    }

    virtual void FinishTrainingIteration( bool & bMoreIterations ) {
        if( bp::override func_FinishTrainingIteration = this->get_override( "FinishTrainingIteration" ) )
            func_FinishTrainingIteration( bMoreIterations );
        else
            this->gezi::IterativeTrainer::FinishTrainingIteration( bMoreIterations );
    }
    
    
    void default_FinishTrainingIteration( bool & bMoreIterations ) {
        gezi::IterativeTrainer::FinishTrainingIteration( bMoreIterations );
    }

    virtual void InnerTrain( ::gezi::Instances & instances ) {
        if( bp::override func_InnerTrain = this->get_override( "InnerTrain" ) )
            func_InnerTrain( boost::ref(instances) );
        else
            this->gezi::IterativeTrainer::InnerTrain( boost::ref(instances) );
    }
    
    
    void default_InnerTrain( ::gezi::Instances & instances ) {
        gezi::IterativeTrainer::InnerTrain( boost::ref(instances) );
    }

    virtual bool ProcessTrainingInstance( ::gezi::InstancePtr instance ) {
        if( bp::override func_ProcessTrainingInstance = this->get_override( "ProcessTrainingInstance" ) )
            return func_ProcessTrainingInstance( instance );
        else
            return this->gezi::IterativeTrainer::ProcessTrainingInstance( instance );
    }
    
    
    bool default_ProcessTrainingInstance( ::gezi::InstancePtr instance ) {
        return gezi::IterativeTrainer::ProcessTrainingInstance( instance );
    }

    virtual void TrainingComplete(  ) {
        if( bp::override func_TrainingComplete = this->get_override( "TrainingComplete" ) )
            func_TrainingComplete(  );
        else
            this->gezi::IterativeTrainer::TrainingComplete(  );
    }
    
    
    void default_TrainingComplete(  ) {
        gezi::IterativeTrainer::TrainingComplete( );
    }

    bool Evaluate( int round, bool forceEvaluate=false ){
        return gezi::ValidatingTrainer::Evaluate( round, forceEvaluate );
    }

    void EvaluateOnce(  ){
        gezi::ValidatingTrainer::EvaluateOnce(  );
    }

    virtual void EvaluatePredicts(  ){
        if( bp::override func_EvaluatePredicts = this->get_override( "EvaluatePredicts" ) )
            func_EvaluatePredicts(  );
        else
            this->gezi::ValidatingTrainer::EvaluatePredicts(  );
    }

    virtual void Finalize( ::gezi::Instances & instances ){
        if( bp::override func_Finalize = this->get_override( "Finalize" ) )
            func_Finalize( boost::ref(instances) );
        else
            this->gezi::Trainer::Finalize( boost::ref(instances) );
    }

    virtual void GenPredicts(  ){
        if( bp::override func_GenPredicts = this->get_override( "GenPredicts" ) )
            func_GenPredicts(  );
        else
            this->gezi::ValidatingTrainer::GenPredicts(  );
    }

    virtual void GenProabilites(  ){
        if( bp::override func_GenProabilites = this->get_override( "GenProabilites" ) )
            func_GenProabilites(  );
        else
            this->gezi::ValidatingTrainer::GenProabilites(  );
    }

    virtual ::gezi::LossKind GetLossKind(  ) {
        if( bp::override func_GetLossKind = this->get_override( "GetLossKind" ) )
            return func_GetLossKind(  );
        else
            return this->gezi::Trainer::GetLossKind(  );
    }
    
    
    ::gezi::LossKind default_GetLossKind(  ) {
        return gezi::Trainer::GetLossKind( );
    }

    virtual ::std::string GetParam(  ) {
        if( bp::override func_GetParam = this->get_override( "GetParam" ) )
            return func_GetParam(  );
        else
            return this->gezi::Trainer::GetParam(  );
    }
    
    
    ::std::string default_GetParam(  ) {
        return gezi::Trainer::GetParam( );
    }

    virtual ::gezi::PredictionKind GetPredictionKind(  ) {
        if( bp::override func_GetPredictionKind = this->get_override( "GetPredictionKind" ) )
            return func_GetPredictionKind(  );
        else
            return this->gezi::Trainer::GetPredictionKind(  );
    }
    
    
    ::gezi::PredictionKind default_GetPredictionKind(  ) {
        return gezi::Trainer::GetPredictionKind( );
    }

    virtual unsigned int GetRandSeed(  ) const  {
        if( bp::override func_GetRandSeed = this->get_override( "GetRandSeed" ) )
            return func_GetRandSeed(  );
        else
            return this->gezi::Trainer::GetRandSeed(  );
    }
    
    
    unsigned int default_GetRandSeed(  ) const  {
        return gezi::Trainer::GetRandSeed( );
    }

    virtual void Init(  ){
        if( bp::override func_Init = this->get_override( "Init" ) )
            func_Init(  );
        else
            this->gezi::Trainer::Init(  );
    }

    virtual void Initialize( ::gezi::Instances & instances ){
        if( bp::override func_Initialize = this->get_override( "Initialize" ) )
            func_Initialize( boost::ref(instances) );
        else
            this->gezi::Trainer::Initialize( boost::ref(instances) );
    }

    virtual void RestoreBestStage(  ){
        if( bp::override func_RestoreBestStage = this->get_override( "RestoreBestStage" ) )
            func_RestoreBestStage(  );
        else
            this->gezi::ValidatingTrainer::RestoreBestStage(  );
    }

    virtual void StoreBestStage(  ){
        if( bp::override func_StoreBestStage = this->get_override( "StoreBestStage" ) )
            func_StoreBestStage(  );
        else
            this->gezi::ValidatingTrainer::StoreBestStage(  );
    }

    virtual void Train( ::gezi::Instances & instances ) {
        if( bp::override func_Train = this->get_override( "Train" ) )
            func_Train( boost::ref(instances) );
        else
            this->gezi::Trainer::Train( boost::ref(instances) );
    }
    
    
    void default_Train( ::gezi::Instances & instances ) {
        gezi::Trainer::Train( boost::ref(instances) );
    }

    virtual void Train( ::gezi::Instances & instances, ::std::vector< gezi::Instances > & validationInstances, ::std::vector< boost::shared_ptr<gezi::Evaluator> > & evaluators ) {
        if( bp::override func_Train = this->get_override( "Train" ) )
            func_Train( boost::ref(instances), boost::ref(validationInstances), boost::ref(evaluators) );
        else
            this->gezi::ValidatingTrainer::Train( boost::ref(instances), boost::ref(validationInstances), boost::ref(evaluators) );
    }
    
    
    void default_Train( ::gezi::Instances & instances, ::std::vector< gezi::Instances > & validationInstances, ::std::vector< boost::shared_ptr<gezi::Evaluator> > & evaluators ) {
        gezi::ValidatingTrainer::Train( boost::ref(instances), boost::ref(validationInstances), boost::ref(evaluators) );
    }

    virtual void TryInitializeNormalizer( ::gezi::Instances & instances, bool isStreaming ) {
        if( bp::override func_TryInitializeNormalizer = this->get_override( "TryInitializeNormalizer" ) )
            func_TryInitializeNormalizer( boost::ref(instances), isStreaming );
        else
            this->gezi::Trainer::TryInitializeNormalizer( boost::ref(instances), isStreaming );
    }
    
    
    void default_TryInitializeNormalizer( ::gezi::Instances & instances, bool isStreaming ) {
        gezi::Trainer::TryInitializeNormalizer( boost::ref(instances), isStreaming );
    }

};

struct Predictor_wrapper : gezi::Predictor, bp::wrapper< gezi::Predictor > {

    Predictor_wrapper(gezi::Predictor const & arg )
    : gezi::Predictor( arg )
      , bp::wrapper< gezi::Predictor >(){
        // copy constructor
        
    }

    Predictor_wrapper( )
    : gezi::Predictor( )
      , bp::wrapper< gezi::Predictor >(){
        // null constructor
    
    }

    Predictor_wrapper(::gezi::NormalizerPtr normalizer, ::gezi::CalibratorPtr calibrator, ::gezi::FeatureNamesVector const & featureNames )
    : gezi::Predictor( normalizer, calibrator, boost::ref(featureNames) )
      , bp::wrapper< gezi::Predictor >(){
        // constructor
    
    }

    Predictor_wrapper(::gezi::CalibratorPtr calibrator, ::gezi::FeatureNamesVector const & featureNames )
    : gezi::Predictor( calibrator, boost::ref(featureNames) )
      , bp::wrapper< gezi::Predictor >(){
        // constructor
    
    }

    Predictor_wrapper(::gezi::FeatureNamesVector const & featureNames )
    : gezi::Predictor( boost::ref(featureNames) )
      , bp::wrapper< gezi::Predictor >(){
        // constructor
    
    }

    virtual ::gezi::PredictionKind GetPredictionKind(  ) {
        if( bp::override func_GetPredictionKind = this->get_override( "GetPredictionKind" ) )
            return func_GetPredictionKind(  );
        else
            return this->gezi::Predictor::GetPredictionKind(  );
    }
    
    
    ::gezi::PredictionKind default_GetPredictionKind(  ) {
        return gezi::Predictor::GetPredictionKind( );
    }

    virtual void Load( ::std::string path ) {
        if( bp::override func_Load = this->get_override( "Load" ) )
            func_Load( path );
        else
            this->gezi::Predictor::Load( path );
    }
    
    
    void default_Load( ::std::string path ) {
        gezi::Predictor::Load( path );
    }

    virtual void LoadBin( ::std::string path ) {
        if( bp::override func_LoadBin = this->get_override( "LoadBin" ) )
            func_LoadBin( path );
        else
            this->gezi::Predictor::LoadBin( path );
    }
    
    
    void default_LoadBin( ::std::string path ) {
        gezi::Predictor::LoadBin( path );
    }

    virtual void LoadText( ::std::string path ) {
        if( bp::override func_LoadText = this->get_override( "LoadText" ) )
            func_LoadText( path );
        else
            this->gezi::Predictor::LoadText( path );
    }
    
    
    void default_LoadText( ::std::string path ) {
        gezi::Predictor::LoadText( path );
    }

    virtual void LoadText_( ::std::string file ) {
        if( bp::override func_LoadText_ = this->get_override( "LoadText_" ) )
            func_LoadText_( file );
        else
            this->gezi::Predictor::LoadText_( file );
    }
    
    
    void default_LoadText_( ::std::string file ) {
        gezi::Predictor::LoadText_( file );
    }

    virtual void Load_( ::std::string file ) {
        if( bp::override func_Load_ = this->get_override( "Load_" ) )
            func_Load_( file );
        else
            this->gezi::Predictor::Load_( file );
    }
    
    
    void default_Load_( ::std::string file ) {
        gezi::Predictor::Load_( file );
    }

    virtual ::Float Margin( ::gezi::Vector & features ){
        if( bp::override func_Margin = this->get_override( "Margin" ) )
            return func_Margin( boost::ref(features) );
        else
            return this->gezi::Predictor::Margin( boost::ref(features) );
    }

    virtual ::std::string Name(  ) {
        if( bp::override func_Name = this->get_override( "Name" ) )
            return func_Name(  );
        else
            return this->gezi::Predictor::Name(  );
    }
    
    
    ::std::string default_Name(  ) {
        return gezi::Predictor::Name( );
    }

    virtual ::Float Output( ::gezi::InstancePtr instance ) {
        if( bp::override func_Output = this->get_override( "Output" ) )
            return func_Output( instance );
        else
            return this->gezi::Predictor::Output( instance );
    }
    
    
    ::Float default_Output( ::gezi::InstancePtr instance ) {
        return gezi::Predictor::Output( instance );
    }

    virtual ::Float Output( ::std::string line ) {
        if( bp::override func_Output = this->get_override( "Output" ) )
            return func_Output( line );
        else
            return this->gezi::Predictor::Output( line );
    }
    
    
    ::Float default_Output( ::std::string line ) {
        return gezi::Predictor::Output( line );
    }

    virtual ::Float Predict( ::std::string line, ::Float & output ) {
        if( bp::override func_Predict = this->get_override( "Predict" ) )
            return func_Predict( line, output );
        else
            return this->gezi::Predictor::Predict( line, output );
    }
    
    
    ::Float default_Predict( ::std::string line, ::Float & output ) {
        return gezi::Predictor::Predict( line, output );
    }

    virtual ::Float Predict( ::gezi::InstancePtr instance ) {
        if( bp::override func_Predict = this->get_override( "Predict" ) )
            return func_Predict( instance );
        else
            return this->gezi::Predictor::Predict( instance );
    }
    
    
    ::Float default_Predict( ::gezi::InstancePtr instance ) {
        return gezi::Predictor::Predict( instance );
    }

    virtual ::Float Predict( ::gezi::Vector & features ) {
        if( bp::override func_Predict = this->get_override( "Predict" ) )
            return func_Predict( boost::ref(features) );
        else
            return this->gezi::Predictor::Predict( boost::ref(features) );
    }
    
    
    ::Float default_Predict( ::gezi::Vector & features ) {
        return gezi::Predictor::Predict( boost::ref(features) );
    }

    virtual ::Float Predict( ::gezi::InstancePtr instance, ::Float & output ) {
        if( bp::override func_Predict = this->get_override( "Predict" ) )
            return func_Predict( instance, output );
        else
            return this->gezi::Predictor::Predict( instance, output );
    }
    
    
    ::Float default_Predict( ::gezi::InstancePtr instance, ::Float & output ) {
        return gezi::Predictor::Predict( instance, output );
    }

    virtual void Save(  ) {
        if( bp::override func_Save = this->get_override( "Save" ) )
            func_Save(  );
        else
            this->gezi::Predictor::Save(  );
    }
    
    
    void default_Save(  ) {
        gezi::Predictor::Save( );
    }

    virtual void Save( ::std::string path ) {
        if( bp::override func_Save = this->get_override( "Save" ) )
            func_Save( path );
        else
            this->gezi::Predictor::Save( path );
    }
    
    
    void default_Save( ::std::string path ) {
        gezi::Predictor::Save( path );
    }

    virtual void SaveBin( ::std::string path ) {
        if( bp::override func_SaveBin = this->get_override( "SaveBin" ) )
            func_SaveBin( path );
        else
            this->gezi::Predictor::SaveBin( path );
    }
    
    
    void default_SaveBin( ::std::string path ) {
        gezi::Predictor::SaveBin( path );
    }

    virtual void SaveCode( ::std::string codeTypeStr="cpp" ) {
        if( bp::override func_SaveCode = this->get_override( "SaveCode" ) )
            func_SaveCode( codeTypeStr );
        else
            this->gezi::Predictor::SaveCode( codeTypeStr );
    }
    
    
    void default_SaveCode( ::std::string codeTypeStr="cpp" ) {
        gezi::Predictor::SaveCode( codeTypeStr );
    }

    virtual void SaveCode_( ::std::string file, ::gezi::CodeType codeType ) {
        if( bp::override func_SaveCode_ = this->get_override( "SaveCode_" ) )
            func_SaveCode_( file, codeType );
        else
            this->gezi::Predictor::SaveCode_( file, codeType );
    }
    
    
    void default_SaveCode_( ::std::string file, ::gezi::CodeType codeType ) {
        gezi::Predictor::SaveCode_( file, codeType );
    }

    virtual void SaveJson( ::std::string file ) {
        if( bp::override func_SaveJson = this->get_override( "SaveJson" ) )
            func_SaveJson( file );
        else
            this->gezi::Predictor::SaveJson( file );
    }
    
    
    void default_SaveJson( ::std::string file ) {
        gezi::Predictor::SaveJson( file );
    }

    virtual void SaveJson_( ::std::string file ) {
        if( bp::override func_SaveJson_ = this->get_override( "SaveJson_" ) )
            func_SaveJson_( file );
        else
            this->gezi::Predictor::SaveJson_( file );
    }
    
    
    void default_SaveJson_( ::std::string file ) {
        gezi::Predictor::SaveJson_( file );
    }

    virtual void SaveText( ::std::string file ) {
        if( bp::override func_SaveText = this->get_override( "SaveText" ) )
            func_SaveText( file );
        else
            this->gezi::Predictor::SaveText( file );
    }
    
    
    void default_SaveText( ::std::string file ) {
        gezi::Predictor::SaveText( file );
    }

    virtual void SaveText_( ::std::string file ) {
        if( bp::override func_SaveText_ = this->get_override( "SaveText_" ) )
            func_SaveText_( file );
        else
            this->gezi::Predictor::SaveText_( file );
    }
    
    
    void default_SaveText_( ::std::string file ) {
        gezi::Predictor::SaveText_( file );
    }

    virtual void SaveXml( ::std::string file ) {
        if( bp::override func_SaveXml = this->get_override( "SaveXml" ) )
            func_SaveXml( file );
        else
            this->gezi::Predictor::SaveXml( file );
    }
    
    
    void default_SaveXml( ::std::string file ) {
        gezi::Predictor::SaveXml( file );
    }

    virtual void SaveXml_( ::std::string file ) {
        if( bp::override func_SaveXml_ = this->get_override( "SaveXml_" ) )
            func_SaveXml_( file );
        else
            this->gezi::Predictor::SaveXml_( file );
    }
    
    
    void default_SaveXml_( ::std::string file ) {
        gezi::Predictor::SaveXml_( file );
    }

    virtual void Save_( ::std::string file ) {
        if( bp::override func_Save_ = this->get_override( "Save_" ) )
            func_Save_( file );
        else
            this->gezi::Predictor::Save_( file );
    }
    
    
    void default_Save_( ::std::string file ) {
        gezi::Predictor::Save_( file );
    }

    virtual ::std::string ToFeaturesGainSummary( int topNum=0 ) {
        if( bp::override func_ToFeaturesGainSummary = this->get_override( "ToFeaturesGainSummary" ) )
            return func_ToFeaturesGainSummary( topNum );
        else
            return this->gezi::Predictor::ToFeaturesGainSummary( topNum );
    }
    
    
    ::std::string default_ToFeaturesGainSummary( int topNum=0 ) {
        return gezi::Predictor::ToFeaturesGainSummary( topNum );
    }

    virtual ::std::string ToGainSummary( ::gezi::Vector & features ) {
        if( bp::override func_ToGainSummary = this->get_override( "ToGainSummary" ) )
            return func_ToGainSummary( boost::ref(features) );
        else
            return this->gezi::Predictor::ToGainSummary( boost::ref(features) );
    }
    
    
    ::std::string default_ToGainSummary( ::gezi::Vector & features ) {
        return gezi::Predictor::ToGainSummary( boost::ref(features) );
    }

};

BOOST_PYTHON_MODULE(libmelt){
    { //::std::vector< std::vector< double > >
        typedef bp::class_< std::vector< std::vector< double > > > vector_less__std_scope_vector_less__double__greater___greater__exposer_t;
        vector_less__std_scope_vector_less__double__greater___greater__exposer_t vector_less__std_scope_vector_less__double__greater___greater__exposer = vector_less__std_scope_vector_less__double__greater___greater__exposer_t( "vector_less__std_scope_vector_less__double__greater___greater_" );
        bp::scope vector_less__std_scope_vector_less__double__greater___greater__scope( vector_less__std_scope_vector_less__double__greater___greater__exposer );
        //WARNING: the next line of code will not compile, because "::std::vector<double, std::allocator<double> >" does not have operator== !
        vector_less__std_scope_vector_less__double__greater___greater__exposer.def( bp::vector_indexing_suite< ::std::vector< std::vector< double > > >() );
    }

    { //::std::vector< std::string >
        typedef bp::class_< std::vector< std::string > > vector_less__std_scope_string__greater__exposer_t;
        vector_less__std_scope_string__greater__exposer_t vector_less__std_scope_string__greater__exposer = vector_less__std_scope_string__greater__exposer_t( "vector_less__std_scope_string__greater_" );
        bp::scope vector_less__std_scope_string__greater__scope( vector_less__std_scope_string__greater__exposer );
        vector_less__std_scope_string__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< std::string >, true >() );
    }

    { //::std::vector< std::string >
        typedef bp::class_< std::vector< std::string > > vector_less__std_scope_string__greater__exposer_t;
        vector_less__std_scope_string__greater__exposer_t vector_less__std_scope_string__greater__exposer = vector_less__std_scope_string__greater__exposer_t( "vector_less__std_scope_string__greater_" );
        bp::scope vector_less__std_scope_string__greater__scope( vector_less__std_scope_string__greater__exposer );
        vector_less__std_scope_string__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< std::string >, true >() );
    }

    { //::std::vector< int >
        typedef bp::class_< std::vector< int > > vector_less__int__greater__exposer_t;
        vector_less__int__greater__exposer_t vector_less__int__greater__exposer = vector_less__int__greater__exposer_t( "vector_less__int__greater_" );
        bp::scope vector_less__int__greater__scope( vector_less__int__greater__exposer );
        vector_less__int__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< int >, true >() );
    }

    { //::std::vector< int >
        typedef bp::class_< std::vector< int > > ivec_exposer_t;
        ivec_exposer_t ivec_exposer = ivec_exposer_t( "ivec" );
        bp::scope ivec_scope( ivec_exposer );
        ivec_exposer.def( bp::vector_indexing_suite< ::std::vector< int >, true >() );
    }

    { //::std::vector< int >
        typedef bp::class_< std::vector< int > > ivec_exposer_t;
        ivec_exposer_t ivec_exposer = ivec_exposer_t( "ivec" );
        bp::scope ivec_scope( ivec_exposer );
        ivec_exposer.def( bp::vector_indexing_suite< ::std::vector< int >, true >() );
    }

    { //scope begin
        typedef bp::class_< std::vector< gezi::Instances > > vector_less__gezi_scope_Instances__greater__exposer_t;
        vector_less__gezi_scope_Instances__greater__exposer_t vector_less__gezi_scope_Instances__greater__exposer = vector_less__gezi_scope_Instances__greater__exposer_t("vector_less__gezi_scope_Instances__greater_");
        bp::scope vector_less__gezi_scope_Instances__greater__scope( vector_less__gezi_scope_Instances__greater__exposer );
        //WARNING: the next line of code will not compile, because "::gezi::Instances" does not have operator== !
        vector_less__gezi_scope_Instances__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< gezi::Instances > >() );
    } //scope end

    { //::std::vector< gezi::Instances >
        typedef bp::class_< std::vector< gezi::Instances > > vector_less__gezi_scope_Instances__greater__exposer_t;
        vector_less__gezi_scope_Instances__greater__exposer_t vector_less__gezi_scope_Instances__greater__exposer = vector_less__gezi_scope_Instances__greater__exposer_t( "vector_less__gezi_scope_Instances__greater_" );
        bp::scope vector_less__gezi_scope_Instances__greater__scope( vector_less__gezi_scope_Instances__greater__exposer );
        //WARNING: the next line of code will not compile, because "::gezi::Instances" does not have operator== !
        vector_less__gezi_scope_Instances__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< gezi::Instances > >() );
    }

    { //::std::vector< gezi::FeaturesExtractor* >
        typedef bp::class_< std::vector< gezi::FeaturesExtractor* > > vector_less__gezi_scope_FeaturesExtractor_ptr___greater__exposer_t;
        vector_less__gezi_scope_FeaturesExtractor_ptr___greater__exposer_t vector_less__gezi_scope_FeaturesExtractor_ptr___greater__exposer = vector_less__gezi_scope_FeaturesExtractor_ptr___greater__exposer_t( "vector_less__gezi_scope_FeaturesExtractor_ptr___greater_" );
        bp::scope vector_less__gezi_scope_FeaturesExtractor_ptr___greater__scope( vector_less__gezi_scope_FeaturesExtractor_ptr___greater__exposer );
        vector_less__gezi_scope_FeaturesExtractor_ptr___greater__exposer.def( bp::vector_indexing_suite< ::std::vector< gezi::FeaturesExtractor* > >() );
    }

    { //::std::vector< gezi::FeatureVector::Feature >
        typedef bp::class_< std::vector< gezi::FeatureVector::Feature > > vector_less__gezi_scope_FeatureVector_scope_Feature__greater__exposer_t;
        vector_less__gezi_scope_FeatureVector_scope_Feature__greater__exposer_t vector_less__gezi_scope_FeatureVector_scope_Feature__greater__exposer = vector_less__gezi_scope_FeatureVector_scope_Feature__greater__exposer_t( "vector_less__gezi_scope_FeatureVector_scope_Feature__greater_" );
        bp::scope vector_less__gezi_scope_FeatureVector_scope_Feature__greater__scope( vector_less__gezi_scope_FeatureVector_scope_Feature__greater__exposer );
        vector_less__gezi_scope_FeatureVector_scope_Feature__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< gezi::FeatureVector::Feature > >() );
    }

    { //::std::vector< gezi::ColumnType >
        typedef bp::class_< std::vector< gezi::ColumnType > > vector_less__gezi_scope_ColumnType__greater__exposer_t;
        vector_less__gezi_scope_ColumnType__greater__exposer_t vector_less__gezi_scope_ColumnType__greater__exposer = vector_less__gezi_scope_ColumnType__greater__exposer_t( "vector_less__gezi_scope_ColumnType__greater_" );
        bp::scope vector_less__gezi_scope_ColumnType__greater__scope( vector_less__gezi_scope_ColumnType__greater__exposer );
        vector_less__gezi_scope_ColumnType__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< gezi::ColumnType >, true >() );
    }

    { //::std::vector< double >
        typedef bp::class_< std::vector< double > > vector_less__double__greater__exposer_t;
        vector_less__double__greater__exposer_t vector_less__double__greater__exposer = vector_less__double__greater__exposer_t( "vector_less__double__greater_" );
        bp::scope vector_less__double__greater__scope( vector_less__double__greater__exposer );
        vector_less__double__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< double >, true >() );
    }

    { //::std::vector< double >
        typedef bp::class_< std::vector< double >, boost::noncopyable > vector_less__double__greater__exposer_t;
        vector_less__double__greater__exposer_t vector_less__double__greater__exposer = vector_less__double__greater__exposer_t( "vector_less__double__greater_" );
        bp::scope vector_less__double__greater__scope( vector_less__double__greater__exposer );
        vector_less__double__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< double >, true >() );
    }

    bp::class_< std::vector< boost::shared_ptr<gezi::Predictor> > >("vector_less__boost_scope_shared_ptr_less_gezi_scope_Predictor_greater___greater_")    
        .def( bp::vector_indexing_suite< ::std::vector< boost::shared_ptr<gezi::Predictor> >, true >() );

    { //::std::vector< boost::shared_ptr<gezi::Evaluator> >
        typedef bp::class_< std::vector< boost::shared_ptr<gezi::Evaluator> > > vector_less__boost_scope_shared_ptr_less_gezi_scope_Evaluator_greater___greater__exposer_t;
        vector_less__boost_scope_shared_ptr_less_gezi_scope_Evaluator_greater___greater__exposer_t vector_less__boost_scope_shared_ptr_less_gezi_scope_Evaluator_greater___greater__exposer = vector_less__boost_scope_shared_ptr_less_gezi_scope_Evaluator_greater___greater__exposer_t( "vector_less__boost_scope_shared_ptr_less_gezi_scope_Evaluator_greater___greater_" );
        bp::scope vector_less__boost_scope_shared_ptr_less_gezi_scope_Evaluator_greater___greater__scope( vector_less__boost_scope_shared_ptr_less_gezi_scope_Evaluator_greater___greater__exposer );
        vector_less__boost_scope_shared_ptr_less_gezi_scope_Evaluator_greater___greater__exposer.def( bp::vector_indexing_suite< ::std::vector< boost::shared_ptr<gezi::Evaluator> >, true >() );
    }

    { //::std::vector< bool >
        typedef bp::class_< std::vector< bool > > BitArray_exposer_t;
        BitArray_exposer_t BitArray_exposer = BitArray_exposer_t( "BitArray" );
        bp::scope BitArray_scope( BitArray_exposer );
        BitArray_exposer.def( bp::vector_indexing_suite< ::std::vector< bool >, true >() );
    }

    { //::std::map< std::string, gezi::FileFormat >
        typedef bp::class_< std::map< std::string, gezi::FileFormat > > map_less__std_scope_string_comma__gezi_scope_FileFormat__greater__exposer_t;
        map_less__std_scope_string_comma__gezi_scope_FileFormat__greater__exposer_t map_less__std_scope_string_comma__gezi_scope_FileFormat__greater__exposer = map_less__std_scope_string_comma__gezi_scope_FileFormat__greater__exposer_t( "map_less__std_scope_string_comma__gezi_scope_FileFormat__greater_" );
        bp::scope map_less__std_scope_string_comma__gezi_scope_FileFormat__greater__scope( map_less__std_scope_string_comma__gezi_scope_FileFormat__greater__exposer );
        map_less__std_scope_string_comma__gezi_scope_FileFormat__greater__exposer.def( bp::map_indexing_suite< ::std::map< std::string, gezi::FileFormat >, true >() );
    }

    bp::class_< std::map< std::string, double > >("map_less__std_scope_string_comma__double__greater_")    
        .def( bp::map_indexing_suite< ::std::map< std::string, double >, true >() );

    bp::class_< std::map< int, double > >("map_less__int_comma__double__greater_")    
        .def( bp::map_indexing_suite< ::std::map< int, double >, true >() );

    bp::class_< std::map< int, double > >("map_less__int_comma__double__greater_")    
        .def( bp::map_indexing_suite< ::std::map< int, double >, true >() );

    bp::class_< std::map< int, double > >("map_less__int_comma__double__greater_")    
        .def( bp::map_indexing_suite< ::std::map< int, double >, true >() );

    { //::std::map< gezi::FileFormat, std::string >
        typedef bp::class_< std::map< gezi::FileFormat, std::string > > map_less__gezi_scope_FileFormat_comma__std_scope_string__greater__exposer_t;
        map_less__gezi_scope_FileFormat_comma__std_scope_string__greater__exposer_t map_less__gezi_scope_FileFormat_comma__std_scope_string__greater__exposer = map_less__gezi_scope_FileFormat_comma__std_scope_string__greater__exposer_t( "map_less__gezi_scope_FileFormat_comma__std_scope_string__greater_" );
        bp::scope map_less__gezi_scope_FileFormat_comma__std_scope_string__greater__scope( map_less__gezi_scope_FileFormat_comma__std_scope_string__greater__exposer );
        map_less__gezi_scope_FileFormat_comma__std_scope_string__greater__exposer.def( bp::map_indexing_suite< ::std::map< gezi::FileFormat, std::string >, true >() );
    }

    bp::enum_< gezi::CodeType>("CodeType")
        .value("CodeType__enum__C", gezi::CodeType__enum__C)
        .value("CodeType__enum__Python", gezi::CodeType__enum__Python)
        .value("CodeType__enum__Php", gezi::CodeType__enum__Php)
        .export_values()
        ;

    bp::enum_< gezi::ColumnType>("ColumnType")
        .value("ColumnType__enum__Unknown", gezi::ColumnType__enum__Unknown)
        .value("ColumnType__enum__Feature", gezi::ColumnType__enum__Feature)
        .value("ColumnType__enum__Name", gezi::ColumnType__enum__Name)
        .value("ColumnType__enum__Label", gezi::ColumnType__enum__Label)
        .value("ColumnType__enum__Weight", gezi::ColumnType__enum__Weight)
        .value("ColumnType__enum__Attribute", gezi::ColumnType__enum__Attribute)
        .value("ColumnType__enum__Category", gezi::ColumnType__enum__Category)
        .value("ColumnType__enum__Text", gezi::ColumnType__enum__Text)
        .export_values()
        ;

    bp::enum_< gezi::FileFormat>("FileFormat")
        .value("FileFormat__enum__Unknown", gezi::FileFormat__enum__Unknown)
        .value("FileFormat__enum__Dense", gezi::FileFormat__enum__Dense)
        .value("FileFormat__enum__Sparse", gezi::FileFormat__enum__Sparse)
        .value("FileFormat__enum__SparseNoLength", gezi::FileFormat__enum__SparseNoLength)
        .value("FileFormat__enum__Text", gezi::FileFormat__enum__Text)
        .value("FileFormat__enum__LibSVM", gezi::FileFormat__enum__LibSVM)
        .value("FileFormat__enum__LibSVM2", gezi::FileFormat__enum__LibSVM2)
        .value("FileFormat__enum__Arff", gezi::FileFormat__enum__Arff)
        .value("FileFormat__enum__VW", gezi::FileFormat__enum__VW)
        .export_values()
        ;

    bp::enum_< gezi::LossKind>("LossKind")
        .value("LossKind__enum__Unknown", gezi::LossKind__enum__Unknown)
        .value("LossKind__enum__GoldStandard", gezi::LossKind__enum__GoldStandard)
        .value("LossKind__enum__Squared", gezi::LossKind__enum__Squared)
        .value("LossKind__enum__Logistic", gezi::LossKind__enum__Logistic)
        .value("LossKind__enum__Hinge", gezi::LossKind__enum__Hinge)
        .value("LossKind__enum__Exponential", gezi::LossKind__enum__Exponential)
        .export_values()
        ;

    bp::enum_< gezi::PredictionKind>("PredictionKind")
        .value("PredictionKind__enum__Unknown", gezi::PredictionKind__enum__Unknown)
        .value("PredictionKind__enum__Custom", gezi::PredictionKind__enum__Custom)
        .value("PredictionKind__enum__BinaryClassification", gezi::PredictionKind__enum__BinaryClassification)
        .value("PredictionKind__enum__MultiClassClassification", gezi::PredictionKind__enum__MultiClassClassification)
        .value("PredictionKind__enum__Regression", gezi::PredictionKind__enum__Regression)
        .value("PredictionKind__enum__MultiOutputRegression", gezi::PredictionKind__enum__MultiOutputRegression)
        .value("PredictionKind__enum__Ranking", gezi::PredictionKind__enum__Ranking)
        .value("PredictionKind__enum__Recommendation", gezi::PredictionKind__enum__Recommendation)
        .export_values()
        ;

    { //::gezi::FeatureExtractor
        typedef bp::class_< FeatureExtractor_wrapper > FeatureExtractor_exposer_t;
        FeatureExtractor_exposer_t FeatureExtractor_exposer = FeatureExtractor_exposer_t( "FeatureExtractor", bp::init< bp::optional< std::string > >(( bp::arg("name")="" )) );
        bp::scope FeatureExtractor_scope( FeatureExtractor_exposer );
        bp::implicitly_convertible< std::string, gezi::FeatureExtractor >();
        { //::gezi::FeatureExtractor::add
        
            typedef void ( ::gezi::FeatureExtractor::*add_function_type )( double,::std::string ) ;
            
            FeatureExtractor_exposer.def( 
                "add"
                , add_function_type( &::gezi::FeatureExtractor::add )
                , ( bp::arg("value"), bp::arg("name")="" ) );
        
        }
        { //::gezi::FeatureExtractor::add
        
            typedef void ( ::gezi::FeatureExtractor::*add_function_type )( double *,int,::std::string ) ;
            
            FeatureExtractor_exposer.def( 
                "add"
                , add_function_type( &::gezi::FeatureExtractor::add )
                , ( bp::arg("values"), bp::arg("n"), bp::arg("name")="" ) );
        
        }
        { //::gezi::FeatureExtractor::bind
        
            typedef void ( ::gezi::FeatureExtractor::*bind_function_type )( ::gezi::Feature * ) ;
            
            FeatureExtractor_exposer.def( 
                "bind"
                , bind_function_type( &::gezi::FeatureExtractor::bind )
                , ( bp::arg("feature") ) );
        
        }
        { //::gezi::FeatureExtractor::extract
        
            typedef void ( ::gezi::FeatureExtractor::*extract_function_type )(  ) ;
            typedef void ( FeatureExtractor_wrapper::*default_extract_function_type )(  ) ;
            
            FeatureExtractor_exposer.def( 
                "extract"
                , extract_function_type(&::gezi::FeatureExtractor::extract)
                , default_extract_function_type(&FeatureExtractor_wrapper::default_extract) );
        
        }
        { //::gezi::FeatureExtractor::feature
        
            typedef ::gezi::Feature * ( ::gezi::FeatureExtractor::*feature_function_type )(  ) ;
            
            FeatureExtractor_exposer.def( 
                "feature"
                , feature_function_type( &::gezi::FeatureExtractor::feature )
                    /* undefined call policies */ );
        
        }
        { //::gezi::FeatureExtractor::init
        
            typedef void ( ::gezi::FeatureExtractor::*init_function_type )(  ) ;
            typedef void ( FeatureExtractor_wrapper::*default_init_function_type )(  ) ;
            
            FeatureExtractor_exposer.def( 
                "init"
                , init_function_type(&::gezi::FeatureExtractor::init)
                , default_init_function_type(&FeatureExtractor_wrapper::default_init) );
        
        }
        { //::gezi::FeatureExtractor::name
        
            typedef ::std::string ( ::gezi::FeatureExtractor::*name_function_type )(  ) ;
            
            FeatureExtractor_exposer.def( 
                "name"
                , name_function_type( &::gezi::FeatureExtractor::name ) );
        
        }
        { //::gezi::FeatureExtractor::process
        
            typedef void ( ::gezi::FeatureExtractor::*process_function_type )( ::gezi::Feature * ) ;
            typedef void ( FeatureExtractor_wrapper::*default_process_function_type )( ::gezi::Feature * ) ;
            
            FeatureExtractor_exposer.def( 
                "process"
                , process_function_type(&::gezi::FeatureExtractor::process)
                , default_process_function_type(&FeatureExtractor_wrapper::default_process)
                , ( bp::arg("feature") ) );
        
        }
    }

    { //::gezi::FeatureNamesVector
        typedef bp::class_< gezi::FeatureNamesVector > FeatureNamesVector_exposer_t;
        FeatureNamesVector_exposer_t FeatureNamesVector_exposer = FeatureNamesVector_exposer_t( "FeatureNamesVector", bp::init< >() );
        bp::scope FeatureNamesVector_scope( FeatureNamesVector_exposer );
        FeatureNamesVector_exposer.def( bp::init< int >(( bp::arg("numFeatures") )) );
        bp::implicitly_convertible< int, gezi::FeatureNamesVector >();
        FeatureNamesVector_exposer.def( bp::init< svec const & >(( bp::arg("featureNames") )) );
        bp::implicitly_convertible< svec const &, gezi::FeatureNamesVector >();
        { //::gezi::FeatureNamesVector::SetNumFeatures
        
            typedef void ( ::gezi::FeatureNamesVector::*SetNumFeatures_function_type )( int ) ;
            
            FeatureNamesVector_exposer.def( 
                "SetNumFeatures"
                , SetNumFeatures_function_type( &::gezi::FeatureNamesVector::SetNumFeatures )
                , ( bp::arg("numFeatures") ) );
        
        }
        { //::gezi::FeatureNamesVector::empty
        
            typedef bool ( ::gezi::FeatureNamesVector::*empty_function_type )(  ) ;
            
            FeatureNamesVector_exposer.def( 
                "empty"
                , empty_function_type( &::gezi::FeatureNamesVector::empty ) );
        
        }
        FeatureNamesVector_exposer.def( bp::self == bp::self );
        { //::gezi::FeatureNamesVector::operator[]
        
            typedef ::std::string ( ::gezi::FeatureNamesVector::*__getitem___function_type )( int ) const;
            
            FeatureNamesVector_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::gezi::FeatureNamesVector::operator[] )
                , ( bp::arg("index") ) );
        
        }
        { //::gezi::FeatureNamesVector::push_back
        
            typedef void ( ::gezi::FeatureNamesVector::*push_back_function_type )( ::std::string ) ;
            
            FeatureNamesVector_exposer.def( 
                "push_back"
                , push_back_function_type( &::gezi::FeatureNamesVector::push_back )
                , ( bp::arg("name") ) );
        
        }
        { //::gezi::FeatureNamesVector::size
        
            typedef ::size_t ( ::gezi::FeatureNamesVector::*size_function_type )(  ) const;
            
            FeatureNamesVector_exposer.def( 
                "size"
                , size_function_type( &::gezi::FeatureNamesVector::size ) );
        
        }
    }

    { //::gezi::Vector
        typedef bp::class_< gezi::Vector > Vector_exposer_t;
        Vector_exposer_t Vector_exposer = Vector_exposer_t( "Vector", bp::init< >() );
        bp::scope Vector_scope( Vector_exposer );
        Vector_exposer.def( bp::init< gezi::Vector const & >(( bp::arg("arg0") )) );
        Vector_exposer.def( bp::init< int >(( bp::arg("length_") )) );
        bp::implicitly_convertible< int, gezi::Vector >();
        Vector_exposer.def( bp::init< Float, int >(( bp::arg("value_"), bp::arg("length_") )) );
        Vector_exposer.def( bp::init< int, Float >(( bp::arg("length_"), bp::arg("value_") )) );
        Vector_exposer.def( bp::init< std::map< int, double > const & >(( bp::arg("m") )) );
        bp::implicitly_convertible< std::map< int, double > const &, gezi::Vector >();
        Vector_exposer.def( bp::init< int, ivec &, std::vector< double > & >(( bp::arg("length_"), bp::arg("indices_"), bp::arg("values_") )) );
        Vector_exposer.def( bp::init< ivec &, std::vector< double > &, bp::optional< int > >(( bp::arg("indices_"), bp::arg("values_"), bp::arg("length_")=(int)(1024000) )) );
        Vector_exposer.def( bp::init< std::vector< double > & >(( bp::arg("values_") )) );
        bp::implicitly_convertible< std::vector< double > &, gezi::Vector >();
        Vector_exposer.def( bp::init< std::string, bp::optional< int, int, std::string > >(( bp::arg("input"), bp::arg("startIndex")=(int)(0), bp::arg("length_")=(int)(1024000), bp::arg("sep")=",\011 " )) );
        Vector_exposer.def( bp::init< __gnu_cxx::__normal_iterator< double*, std::vector< double > >, __gnu_cxx::__normal_iterator< double*, std::vector< double > > >(( bp::arg("first"), bp::arg("end") )) );
        { //::gezi::Vector::Add
        
            typedef void ( ::gezi::Vector::*Add_function_type )( ::Float ) ;
            
            Vector_exposer.def( 
                "Add"
                , Add_function_type( &::gezi::Vector::Add )
                , ( bp::arg("value") ) );
        
        }
        { //::gezi::Vector::Add
        
            typedef void ( ::gezi::Vector::*Add_function_type )( int,::Float ) ;
            
            Vector_exposer.def( 
                "Add"
                , Add_function_type( &::gezi::Vector::Add )
                , ( bp::arg("index"), bp::arg("value") ) );
        
        }
        { //::gezi::Vector::Add
        
            typedef void ( ::gezi::Vector::*Add_function_type )( ::gezi::Vector const & ) ;
            
            Vector_exposer.def( 
                "Add"
                , Add_function_type( &::gezi::Vector::Add )
                , ( bp::arg("other") ) );
        
        }
        { //::gezi::Vector::AddMap
        
            typedef void ( ::gezi::Vector::*AddMap_function_type )( ::std::map< int, double > const & ) ;
            
            Vector_exposer.def( 
                "AddMap"
                , AddMap_function_type( &::gezi::Vector::AddMap )
                , ( bp::arg("m") ) );
        
        }
        { //::gezi::Vector::AllStr
        
            typedef ::std::string ( ::gezi::Vector::*AllStr_function_type )( ::std::string ) const;
            
            Vector_exposer.def( 
                "AllStr"
                , AllStr_function_type( &::gezi::Vector::AllStr )
                , ( bp::arg("sep")="," ) );
        
        }
        { //::gezi::Vector::CheckInvariants
        
            typedef void ( ::gezi::Vector::*CheckInvariants_function_type )(  ) ;
            
            Vector_exposer.def( 
                "CheckInvariants"
                , CheckInvariants_function_type( &::gezi::Vector::CheckInvariants ) );
        
        }
        { //::gezi::Vector::Clear
        
            typedef void ( ::gezi::Vector::*Clear_function_type )(  ) ;
            
            Vector_exposer.def( 
                "Clear"
                , Clear_function_type( &::gezi::Vector::Clear ) );
        
        }
        { //::gezi::Vector::Count
        
            typedef int ( ::gezi::Vector::*Count_function_type )(  ) const;
            
            Vector_exposer.def( 
                "Count"
                , Count_function_type( &::gezi::Vector::Count ) );
        
        }
        { //::gezi::Vector::DenseStr
        
            typedef ::std::string ( ::gezi::Vector::*DenseStr_function_type )( ::std::string ) const;
            
            Vector_exposer.def( 
                "DenseStr"
                , DenseStr_function_type( &::gezi::Vector::DenseStr )
                , ( bp::arg("sep")="," ) );
        
        }
        { //::gezi::Vector::Densify
        
            typedef void ( ::gezi::Vector::*Densify_function_type )( ::Float ) ;
            
            Vector_exposer.def( 
                "Densify"
                , Densify_function_type( &::gezi::Vector::Densify )
                , ( bp::arg("maxSparsity") ) );
        
        }
        { //::gezi::Vector::Densify
        
            typedef void ( ::gezi::Vector::*Densify_function_type )(  ) ;
            
            Vector_exposer.def( 
                "Densify"
                , Densify_function_type( &::gezi::Vector::Densify ) );
        
        }
        { //::gezi::Vector::Empty
        
            typedef bool ( ::gezi::Vector::*Empty_function_type )(  ) const;
            
            Vector_exposer.def( 
                "Empty"
                , Empty_function_type( &::gezi::Vector::Empty ) );
        
        }
        { //::gezi::Vector::ForceDense
        
            typedef void ( ::gezi::Vector::*ForceDense_function_type )(  ) ;
            
            Vector_exposer.def( 
                "ForceDense"
                , ForceDense_function_type( &::gezi::Vector::ForceDense ) );
        
        }
        { //::gezi::Vector::ForceSparse
        
            typedef void ( ::gezi::Vector::*ForceSparse_function_type )(  ) ;
            
            Vector_exposer.def( 
                "ForceSparse"
                , ForceSparse_function_type( &::gezi::Vector::ForceSparse ) );
        
        }
        { //::gezi::Vector::Index
        
            typedef int ( ::gezi::Vector::*Index_function_type )( int ) const;
            
            Vector_exposer.def( 
                "Index"
                , Index_function_type( &::gezi::Vector::Index )
                , ( bp::arg("index") ) );
        
        }
        { //::gezi::Vector::Indices
        
            typedef ::ivec const & ( ::gezi::Vector::*Indices_function_type )(  ) const;
            
            Vector_exposer.def( 
                "Indices"
                , Indices_function_type( &::gezi::Vector::Indices )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::gezi::Vector::Indices
        
            typedef ::ivec & ( ::gezi::Vector::*Indices_function_type )(  ) ;
            
            Vector_exposer.def( 
                "Indices"
                , Indices_function_type( &::gezi::Vector::Indices )
                    /* undefined call policies */ );
        
        }
        { //::gezi::Vector::Init
        
            typedef void ( ::gezi::Vector::*Init_function_type )( ::std::string,int,int,::std::string ) ;
            
            Vector_exposer.def( 
                "Init"
                , Init_function_type( &::gezi::Vector::Init )
                , ( bp::arg("input"), bp::arg("startIndex")=(int)(0), bp::arg("length_")=(int)(0), bp::arg("sep")=",\011 " ) );
        
        }
        { //::gezi::Vector::Init
        
            typedef void ( ::gezi::Vector::*Init_function_type )( int,::ivec &,::std::vector< double > & ) ;
            
            Vector_exposer.def( 
                "Init"
                , Init_function_type( &::gezi::Vector::Init )
                , ( bp::arg("length_"), bp::arg("indices_"), bp::arg("values_") ) );
        
        }
        { //::gezi::Vector::Init
        
            typedef void ( ::gezi::Vector::*Init_function_type )( ::std::vector< double > & ) ;
            
            Vector_exposer.def( 
                "Init"
                , Init_function_type( &::gezi::Vector::Init )
                , ( bp::arg("values_") ) );
        
        }
        { //::gezi::Vector::IsDense
        
            typedef bool ( ::gezi::Vector::*IsDense_function_type )(  ) const;
            
            Vector_exposer.def( 
                "IsDense"
                , IsDense_function_type( &::gezi::Vector::IsDense ) );
        
        }
        { //::gezi::Vector::IsSparse
        
            typedef bool ( ::gezi::Vector::*IsSparse_function_type )(  ) const;
            
            Vector_exposer.def( 
                "IsSparse"
                , IsSparse_function_type( &::gezi::Vector::IsSparse ) );
        
        }
        { //::gezi::Vector::Length
        
            typedef int ( ::gezi::Vector::*Length_function_type )(  ) const;
            
            Vector_exposer.def( 
                "Length"
                , Length_function_type( &::gezi::Vector::Length ) );
        
        }
        { //::gezi::Vector::MakeDense
        
            typedef void ( ::gezi::Vector::*MakeDense_function_type )(  ) ;
            
            Vector_exposer.def( 
                "MakeDense"
                , MakeDense_function_type( &::gezi::Vector::MakeDense ) );
        
        }
        { //::gezi::Vector::MakeSparse
        
            typedef void ( ::gezi::Vector::*MakeSparse_function_type )(  ) ;
            
            Vector_exposer.def( 
                "MakeSparse"
                , MakeSparse_function_type( &::gezi::Vector::MakeSparse ) );
        
        }
        { //::gezi::Vector::Norm
        
            typedef ::Float ( ::gezi::Vector::*Norm_function_type )(  ) const;
            
            Vector_exposer.def( 
                "Norm"
                , Norm_function_type( &::gezi::Vector::Norm ) );
        
        }
        { //::gezi::Vector::NumNonZeros
        
            typedef int ( ::gezi::Vector::*NumNonZeros_function_type )(  ) ;
            
            Vector_exposer.def( 
                "NumNonZeros"
                , NumNonZeros_function_type( &::gezi::Vector::NumNonZeros ) );
        
        }
        { //::gezi::Vector::PrepareDense
        
            typedef void ( ::gezi::Vector::*PrepareDense_function_type )(  ) ;
            
            Vector_exposer.def( 
                "PrepareDense"
                , PrepareDense_function_type( &::gezi::Vector::PrepareDense ) );
        
        }
        { //::gezi::Vector::Resize
        
            typedef void ( ::gezi::Vector::*Resize_function_type )( int,::Float ) ;
            
            Vector_exposer.def( 
                "Resize"
                , Resize_function_type( &::gezi::Vector::Resize )
                , ( bp::arg("length_"), bp::arg("value_")=0 ) );
        
        }
        { //::gezi::Vector::ScaleBy
        
            typedef void ( ::gezi::Vector::*ScaleBy_function_type )( ::Float ) ;
            
            Vector_exposer.def( 
                "ScaleBy"
                , ScaleBy_function_type( &::gezi::Vector::ScaleBy )
                , ( bp::arg("d") ) );
        
        }
        { //::gezi::Vector::SetIndex
        
            typedef void ( ::gezi::Vector::*SetIndex_function_type )( int,int ) ;
            
            Vector_exposer.def( 
                "SetIndex"
                , SetIndex_function_type( &::gezi::Vector::SetIndex )
                , ( bp::arg("index"), bp::arg("indexValue") ) );
        
        }
        { //::gezi::Vector::SetLength
        
            typedef void ( ::gezi::Vector::*SetLength_function_type )( int ) ;
            
            Vector_exposer.def( 
                "SetLength"
                , SetLength_function_type( &::gezi::Vector::SetLength )
                , ( bp::arg("length_") ) );
        
        }
        { //::gezi::Vector::SetValue
        
            typedef void ( ::gezi::Vector::*SetValue_function_type )( int,::Float ) ;
            
            Vector_exposer.def( 
                "SetValue"
                , SetValue_function_type( &::gezi::Vector::SetValue )
                , ( bp::arg("index"), bp::arg("value") ) );
        
        }
        { //::gezi::Vector::Sparsify
        
            typedef void ( ::gezi::Vector::*Sparsify_function_type )( ::Float ) ;
            
            Vector_exposer.def( 
                "Sparsify"
                , Sparsify_function_type( &::gezi::Vector::Sparsify )
                , ( bp::arg("maxSparsity") ) );
        
        }
        { //::gezi::Vector::Sparsify
        
            typedef void ( ::gezi::Vector::*Sparsify_function_type )(  ) ;
            
            Vector_exposer.def( 
                "Sparsify"
                , Sparsify_function_type( &::gezi::Vector::Sparsify ) );
        
        }
        { //::gezi::Vector::SquaredNorm
        
            typedef ::Float ( ::gezi::Vector::*SquaredNorm_function_type )(  ) const;
            
            Vector_exposer.def( 
                "SquaredNorm"
                , SquaredNorm_function_type( &::gezi::Vector::SquaredNorm ) );
        
        }
        { //::gezi::Vector::Str
        
            typedef ::std::string ( ::gezi::Vector::*Str_function_type )( ::std::string ) const;
            
            Vector_exposer.def( 
                "Str"
                , Str_function_type( &::gezi::Vector::Str )
                , ( bp::arg("sep")="," ) );
        
        }
        { //::gezi::Vector::Subtract
        
            typedef void ( ::gezi::Vector::*Subtract_function_type )( ::gezi::Vector const & ) ;
            
            Vector_exposer.def( 
                "Subtract"
                , Subtract_function_type( &::gezi::Vector::Subtract )
                , ( bp::arg("other") ) );
        
        }
        { //::gezi::Vector::Swap
        
            typedef void ( ::gezi::Vector::*Swap_function_type )( ::gezi::Vector & ) ;
            
            Vector_exposer.def( 
                "Swap"
                , Swap_function_type( &::gezi::Vector::Swap )
                , ( bp::arg("other") ) );
        
        }
        { //::gezi::Vector::ToDense
        
            typedef void ( ::gezi::Vector::*ToDense_function_type )( ::std::vector< double > & ) ;
            
            Vector_exposer.def( 
                "ToDense"
                , ToDense_function_type( &::gezi::Vector::ToDense )
                , ( bp::arg("values_") ) );
        
        }
        { //::gezi::Vector::ToDense
        
            typedef void ( ::gezi::Vector::*ToDense_function_type )(  ) ;
            
            Vector_exposer.def( 
                "ToDense"
                , ToDense_function_type( &::gezi::Vector::ToDense ) );
        
        }
        { //::gezi::Vector::ToSparse
        
            typedef void ( ::gezi::Vector::*ToSparse_function_type )(  ) ;
            
            Vector_exposer.def( 
                "ToSparse"
                , ToSparse_function_type( &::gezi::Vector::ToSparse ) );
        
        }
        { //::gezi::Vector::Value
        
            typedef ::Float ( ::gezi::Vector::*Value_function_type )( int ) const;
            
            Vector_exposer.def( 
                "Value"
                , Value_function_type( &::gezi::Vector::Value )
                , ( bp::arg("index") ) );
        
        }
        { //::gezi::Vector::Values
        
            typedef ::std::vector< double > const & ( ::gezi::Vector::*Values_function_type )(  ) const;
            
            Vector_exposer.def( 
                "Values"
                , Values_function_type( &::gezi::Vector::Values )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::gezi::Vector::Values
        
            typedef ::std::vector< double > & ( ::gezi::Vector::*Values_function_type )(  ) ;
            
            Vector_exposer.def( 
                "Values"
                , Values_function_type( &::gezi::Vector::Values )
                    /* undefined call policies */ );
        
        }
        { //::gezi::Vector::back
        
            typedef ::Float ( ::gezi::Vector::*back_function_type )(  ) ;
            
            Vector_exposer.def( 
                "back"
                , back_function_type( &::gezi::Vector::back ) );
        
        }
        { //::gezi::Vector::clear
        
            typedef void ( ::gezi::Vector::*clear_function_type )(  ) ;
            
            Vector_exposer.def( 
                "clear"
                , clear_function_type( &::gezi::Vector::clear ) );
        
        }
        { //::gezi::Vector::dot
        
            typedef ::Float ( ::gezi::Vector::*dot_function_type )( ::gezi::Vector const & ) const;
            
            Vector_exposer.def( 
                "dot"
                , dot_function_type( &::gezi::Vector::dot )
                , ( bp::arg("other") ) );
        
        }
        { //::gezi::Vector::empty
        
            typedef bool ( ::gezi::Vector::*empty_function_type )(  ) const;
            
            Vector_exposer.def( 
                "empty"
                , empty_function_type( &::gezi::Vector::empty ) );
        
        }
        { //::gezi::Vector::erase
        
            typedef void ( ::gezi::Vector::*erase_function_type )( ::__gnu_cxx::__normal_iterator< double*, std::vector< double > > ) ;
            
            Vector_exposer.def( 
                "erase"
                , erase_function_type( &::gezi::Vector::erase )
                , ( bp::arg("pos") ) );
        
        }
        { //::gezi::Vector::erase
        
            typedef void ( ::gezi::Vector::*erase_function_type )( ::__gnu_cxx::__normal_iterator< double*, std::vector< double > >,::__gnu_cxx::__normal_iterator< double*, std::vector< double > > ) ;
            
            Vector_exposer.def( 
                "erase"
                , erase_function_type( &::gezi::Vector::erase )
                , ( bp::arg("first"), bp::arg("last") ) );
        
        }
        { //::gezi::Vector::front
        
            typedef ::Float ( ::gezi::Vector::*front_function_type )(  ) ;
            
            Vector_exposer.def( 
                "front"
                , front_function_type( &::gezi::Vector::front ) );
        
        }
        { //::gezi::Vector::insert
        
            typedef ::__gnu_cxx::__normal_iterator< double*, std::vector< double > > ( ::gezi::Vector::*insert_function_type )( ::__gnu_cxx::__normal_iterator< double*, std::vector< double > >,::Float const & ) ;
            
            Vector_exposer.def( 
                "insert"
                , insert_function_type( &::gezi::Vector::insert )
                , ( bp::arg("position"), bp::arg("val") ) );
        
        }
        { //::gezi::Vector::operator()
        
            typedef ::gezi::Vector & ( ::gezi::Vector::*__call___function_type )( int,::Float ) ;
            
            Vector_exposer.def( 
                "__call__"
                , __call___function_type( &::gezi::Vector::operator() )
                , ( bp::arg("index"), bp::arg("value") )
                    /* undefined call policies */ );
        
        }
        Vector_exposer.def( bp::self *= bp::other< Float >() );
        Vector_exposer.def( bp::self += bp::self );
        Vector_exposer.def( bp::self -= bp::self );
        Vector_exposer.def( bp::self /= bp::other< Float >() );
        { //::gezi::Vector::operator=
        
            typedef ::gezi::Vector & ( ::gezi::Vector::*assign_function_type )( ::gezi::Vector const & ) ;
            
            Vector_exposer.def( 
                "assign"
                , assign_function_type( &::gezi::Vector::operator= )
                , ( bp::arg("arg0") )
                , bp::return_self< >() );
        
        }
        { //::gezi::Vector::operator[]
        
            typedef ::Float ( ::gezi::Vector::*__getitem___function_type )( int ) const;
            
            Vector_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::gezi::Vector::operator[] )
                , ( bp::arg("index") ) );
        
        }
        { //::gezi::Vector::push_back
        
            typedef void ( ::gezi::Vector::*push_back_function_type )( ::Float ) ;
            
            Vector_exposer.def( 
                "push_back"
                , push_back_function_type( &::gezi::Vector::push_back )
                , ( bp::arg("item") ) );
        
        }
        { //::gezi::Vector::resize
        
            typedef void ( ::gezi::Vector::*resize_function_type )( int,::Float ) ;
            
            Vector_exposer.def( 
                "resize"
                , resize_function_type( &::gezi::Vector::resize )
                , ( bp::arg("length_"), bp::arg("value_")=0 ) );
        
        }
        { //::gezi::Vector::size
        
            typedef ::size_t ( ::gezi::Vector::*size_function_type )(  ) const;
            
            Vector_exposer.def( 
                "size"
                , size_function_type( &::gezi::Vector::size ) );
        
        }
        { //::gezi::Vector::str
        
            typedef ::std::string ( ::gezi::Vector::*str_function_type )( ::std::string ) const;
            
            Vector_exposer.def( 
                "str"
                , str_function_type( &::gezi::Vector::str )
                , ( bp::arg("sep")="," ) );
        
        }
        Vector_exposer.def_readwrite( "indices", &gezi::Vector::indices );
        Vector_exposer.def_readwrite( "keepDense", &gezi::Vector::keepDense );
        Vector_exposer.def_readwrite( "keepSparse", &gezi::Vector::keepSparse );
        Vector_exposer.def_readwrite( "normalized", &gezi::Vector::normalized );
        Vector_exposer.def_readwrite( "numNonZeros", &gezi::Vector::numNonZeros );
        Vector_exposer.def_readwrite( "sparsityRatio", &gezi::Vector::sparsityRatio );
        Vector_exposer.def_readwrite( "values", &gezi::Vector::values );
    }

    { //::gezi::FeatureVector
        typedef bp::class_< gezi::FeatureVector, bp::bases< gezi::Vector > > FeatureVector_exposer_t;
        FeatureVector_exposer_t FeatureVector_exposer = FeatureVector_exposer_t( "FeatureVector", bp::init< gezi::FeatureVector const & >(( bp::arg("arg0") )) );
        bp::scope FeatureVector_scope( FeatureVector_exposer );
        { //::gezi::FeatureVector::Feature
            typedef bp::class_< gezi::FeatureVector::Feature > Feature_exposer_t;
            Feature_exposer_t Feature_exposer = Feature_exposer_t( "Feature", bp::init< >() );
            bp::scope Feature_scope( Feature_exposer );
            Feature_exposer.def( bp::init< int, Float >(( bp::arg("index_"), bp::arg("value_") )) );
            Feature_exposer.def( bp::init< int >(( bp::arg("index_") )) );
            bp::implicitly_convertible< int, gezi::FeatureVector::Feature >();
            Feature_exposer.def( bp::self == bp::self );
            Feature_exposer.def_readwrite( "index", &gezi::FeatureVector::Feature::index );
            Feature_exposer.def_readwrite( "value", &gezi::FeatureVector::Feature::value );
        }
        FeatureVector_exposer.def( bp::init< bp::optional< bool > >(( bp::arg("useSparse")=(bool)(true) )) );
        bp::implicitly_convertible< bool, gezi::FeatureVector >();
        FeatureVector_exposer.def( bp::init< int >(( bp::arg("length_") )) );
        bp::implicitly_convertible< int, gezi::FeatureVector >();
        { //::gezi::FeatureVector::Str
        
            typedef ::std::string ( ::gezi::FeatureVector::*Str_function_type )( ::std::string ) ;
            
            FeatureVector_exposer.def( 
                "Str"
                , Str_function_type( &::gezi::FeatureVector::Str )
                , ( bp::arg("sep")="," ) );
        
        }
        { //::gezi::FeatureVector::add
        
            typedef void ( ::gezi::FeatureVector::*add_function_type )( ::Float,::std::string ) ;
            
            FeatureVector_exposer.def( 
                "add"
                , add_function_type( &::gezi::FeatureVector::add )
                , ( bp::arg("value"), bp::arg("name")="" ) );
        
        }
        { //::gezi::FeatureVector::add
        
            typedef void ( ::gezi::FeatureVector::*add_function_type )( ::Float *,int,::std::string ) ;
            
            FeatureVector_exposer.def( 
                "add"
                , add_function_type( &::gezi::FeatureVector::add )
                , ( bp::arg("values_"), bp::arg("len"), bp::arg("name")="" ) );
        
        }
        { //::gezi::FeatureVector::add
        
            typedef void ( ::gezi::FeatureVector::*add_function_type )( int,::Float ) ;
            
            FeatureVector_exposer.def( 
                "add"
                , add_function_type( &::gezi::FeatureVector::add )
                , ( bp::arg("index"), bp::arg("value") ) );
        
        }
        { //::gezi::FeatureVector::add_section
        
            typedef void ( ::gezi::FeatureVector::*add_section_function_type )( ::std::string ) ;
            
            FeatureVector_exposer.def( 
                "add_section"
                , add_section_function_type( &::gezi::FeatureVector::add_section )
                , ( bp::arg("name") ) );
        
        }
        { //::gezi::FeatureVector::at
        
            typedef ::Float ( ::gezi::FeatureVector::*at_function_type )( int ) const;
            
            FeatureVector_exposer.def( 
                "at"
                , at_function_type( &::gezi::FeatureVector::at )
                , ( bp::arg("index") ) );
        
        }
        { //::gezi::FeatureVector::clear
        
            typedef void ( ::gezi::FeatureVector::*clear_function_type )(  ) ;
            
            FeatureVector_exposer.def( 
                "clear"
                , clear_function_type( &::gezi::FeatureVector::clear ) );
        
        }
        { //::gezi::FeatureVector::count
        
            typedef int ( ::gezi::FeatureVector::*count_function_type )(  ) const;
            
            FeatureVector_exposer.def( 
                "count"
                , count_function_type( &::gezi::FeatureVector::count ) );
        
        }
        { //::gezi::FeatureVector::dimension
        
            typedef int ( ::gezi::FeatureVector::*dimension_function_type )(  ) const;
            
            FeatureVector_exposer.def( 
                "dimension"
                , dimension_function_type( &::gezi::FeatureVector::dimension ) );
        
        }
        { //::gezi::FeatureVector::empty
        
            typedef bool ( ::gezi::FeatureVector::*empty_function_type )(  ) const;
            
            FeatureVector_exposer.def( 
                "empty"
                , empty_function_type( &::gezi::FeatureVector::empty ) );
        
        }
        { //::gezi::FeatureVector::features
        
            typedef ::std::vector< gezi::FeatureVector::Feature > & ( ::gezi::FeatureVector::*features_function_type )(  ) ;
            
            FeatureVector_exposer.def( 
                "features"
                , features_function_type( &::gezi::FeatureVector::features )
                    /* undefined call policies */ );
        
        }
        { //::gezi::FeatureVector::features
        
            typedef ::std::vector< gezi::FeatureVector::Feature > const & ( ::gezi::FeatureVector::*features_function_type )(  ) const;
            
            FeatureVector_exposer.def( 
                "features"
                , features_function_type( &::gezi::FeatureVector::features )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::gezi::FeatureVector::finalize
        
            typedef void ( ::gezi::FeatureVector::*finalize_function_type )(  ) ;
            
            FeatureVector_exposer.def( 
                "finalize"
                , finalize_function_type( &::gezi::FeatureVector::finalize ) );
        
        }
        { //::gezi::FeatureVector::name_counts
        
            typedef ::std::vector< int > & ( ::gezi::FeatureVector::*name_counts_function_type )(  ) ;
            
            FeatureVector_exposer.def( 
                "name_counts"
                , name_counts_function_type( &::gezi::FeatureVector::name_counts )
                    /* undefined call policies */ );
        
        }
        { //::gezi::FeatureVector::name_counts
        
            typedef ::std::vector< int > const & ( ::gezi::FeatureVector::*name_counts_function_type )(  ) const;
            
            FeatureVector_exposer.def( 
                "name_counts"
                , name_counts_function_type( &::gezi::FeatureVector::name_counts )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::gezi::FeatureVector::names
        
            typedef ::std::vector< std::string > & ( ::gezi::FeatureVector::*names_function_type )(  ) ;
            
            FeatureVector_exposer.def( 
                "names"
                , names_function_type( &::gezi::FeatureVector::names )
                    /* undefined call policies */ );
        
        }
        { //::gezi::FeatureVector::names
        
            typedef ::std::vector< std::string > const & ( ::gezi::FeatureVector::*names_function_type )(  ) const;
            
            FeatureVector_exposer.def( 
                "names"
                , names_function_type( &::gezi::FeatureVector::names )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::gezi::FeatureVector::operator=
        
            typedef ::gezi::FeatureVector & ( ::gezi::FeatureVector::*assign_function_type )( ::gezi::FeatureVector const & ) ;
            
            FeatureVector_exposer.def( 
                "assign"
                , assign_function_type( &::gezi::FeatureVector::operator= )
                , ( bp::arg("arg0") )
                , bp::return_self< >() );
        
        }
        { //::gezi::FeatureVector::operator[]
        
            typedef ::Float ( ::gezi::FeatureVector::*__getitem___function_type )( int ) const;
            
            FeatureVector_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::gezi::FeatureVector::operator[] )
                , ( bp::arg("i") ) );
        
        }
        { //::gezi::FeatureVector::section_names
        
            typedef ::std::vector< std::string > & ( ::gezi::FeatureVector::*section_names_function_type )(  ) ;
            
            FeatureVector_exposer.def( 
                "section_names"
                , section_names_function_type( &::gezi::FeatureVector::section_names )
                    /* undefined call policies */ );
        
        }
        { //::gezi::FeatureVector::section_names
        
            typedef ::std::vector< std::string > const & ( ::gezi::FeatureVector::*section_names_function_type )(  ) const;
            
            FeatureVector_exposer.def( 
                "section_names"
                , section_names_function_type( &::gezi::FeatureVector::section_names )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::gezi::FeatureVector::str
        
            typedef ::std::string ( ::gezi::FeatureVector::*str_function_type )( ::std::string ) ;
            
            FeatureVector_exposer.def( 
                "str"
                , str_function_type( &::gezi::FeatureVector::str )
                , ( bp::arg("sep")="," ) );
        
        }
        { //::gezi::FeatureVector::value_at
        
            typedef ::Float ( ::gezi::FeatureVector::*value_at_function_type )( int ) const;
            
            FeatureVector_exposer.def( 
                "value_at"
                , value_at_function_type( &::gezi::FeatureVector::value_at )
                , ( bp::arg("index") ) );
        
        }
    }

    bp::class_< gezi::FeaturesExtractorMgr >( "FeaturesExtractorMgr" )    
        .def( 
            "add"
            , (void ( ::gezi::FeaturesExtractorMgr::* )( ::gezi::FeaturesExtractor * ) )( &::gezi::FeaturesExtractorMgr::add )
            , ( bp::arg("extractor") ) )    
        .def( 
            "extract"
            , (void ( ::gezi::FeaturesExtractorMgr::* )( ::gezi::Features & ) )( &::gezi::FeaturesExtractorMgr::extract )
            , ( bp::arg("features") ) )    
        .def( 
            "extract"
            , (void ( ::gezi::FeaturesExtractorMgr::* )( ::gezi::Features * ) )( &::gezi::FeaturesExtractorMgr::extract )
            , ( bp::arg("features") ) )    
        .def( 
            "extractor"
            , (::gezi::FeaturesExtractor * ( ::gezi::FeaturesExtractorMgr::* )(  ) )( &::gezi::FeaturesExtractorMgr::extractor )
                /* undefined call policies */ )    
        .def( 
            "extractors"
            , (::std::vector< gezi::FeaturesExtractor* > & ( ::gezi::FeaturesExtractorMgr::* )(  ) )( &::gezi::FeaturesExtractorMgr::extractors )
                /* undefined call policies */ )    
        .def( 
            "extractors"
            , (::std::vector< gezi::FeaturesExtractor* > const & ( ::gezi::FeaturesExtractorMgr::* )(  ) const)( &::gezi::FeaturesExtractorMgr::extractors )
            , bp::return_value_policy< bp::copy_const_reference >() );

    { //::gezi::HeaderSchema
        typedef bp::class_< gezi::HeaderSchema > HeaderSchema_exposer_t;
        HeaderSchema_exposer_t HeaderSchema_exposer = HeaderSchema_exposer_t( "HeaderSchema", bp::init< >() );
        bp::scope HeaderSchema_scope( HeaderSchema_exposer );
        HeaderSchema_exposer.def( bp::init< gezi::HeaderSchema const & >(( bp::arg("arg0") )) );
        { //::gezi::HeaderSchema::FeatureNum
        
            typedef int ( ::gezi::HeaderSchema::*FeatureNum_function_type )(  ) const;
            
            HeaderSchema_exposer.def( 
                "FeatureNum"
                , FeatureNum_function_type( &::gezi::HeaderSchema::FeatureNum ) );
        
        }
        { //::gezi::HeaderSchema::GetFileFormat
        
            typedef ::gezi::FileFormat ( ::gezi::HeaderSchema::*GetFileFormat_function_type )(  ) const;
            
            HeaderSchema_exposer.def( 
                "GetFileFormat"
                , GetFileFormat_function_type( &::gezi::HeaderSchema::GetFileFormat ) );
        
        }
        { //::gezi::HeaderSchema::HasHeader
        
            typedef bool ( ::gezi::HeaderSchema::*HasHeader_function_type )(  ) const;
            
            HeaderSchema_exposer.def( 
                "HasHeader"
                , HasHeader_function_type( &::gezi::HeaderSchema::HasHeader ) );
        
        }
        { //::gezi::HeaderSchema::HeaderStr
        
            typedef ::std::string ( ::gezi::HeaderSchema::*HeaderStr_function_type )(  ) const;
            
            HeaderSchema_exposer.def( 
                "HeaderStr"
                , HeaderStr_function_type( &::gezi::HeaderSchema::HeaderStr ) );
        
        }
        { //::gezi::HeaderSchema::NumFeatures
        
            typedef int ( ::gezi::HeaderSchema::*NumFeatures_function_type )(  ) const;
            
            HeaderSchema_exposer.def( 
                "NumFeatures"
                , NumFeatures_function_type( &::gezi::HeaderSchema::NumFeatures ) );
        
        }
        { //::gezi::HeaderSchema::SetHeader
        
            typedef void ( ::gezi::HeaderSchema::*SetHeader_function_type )( ::std::string,bool ) ;
            
            HeaderSchema_exposer.def( 
                "SetHeader"
                , SetHeader_function_type( &::gezi::HeaderSchema::SetHeader )
                , ( bp::arg("header_"), bp::arg("hasHeader_") ) );
        
        }
        { //::gezi::HeaderSchema::operator=
        
            typedef ::gezi::HeaderSchema & ( ::gezi::HeaderSchema::*assign_function_type )( ::gezi::HeaderSchema const & ) ;
            
            HeaderSchema_exposer.def( 
                "assign"
                , assign_function_type( &::gezi::HeaderSchema::operator= )
                , ( bp::arg("arg0") )
                , bp::return_self< >() );
        
        }
        HeaderSchema_exposer.def( bp::self == bp::self );
        HeaderSchema_exposer.def_readwrite( "attributeNames", &gezi::HeaderSchema::attributeNames );
        HeaderSchema_exposer.def_readwrite( "cloumnTypes", &gezi::HeaderSchema::cloumnTypes );
        HeaderSchema_exposer.def_readwrite( "featureNames", &gezi::HeaderSchema::featureNames );
        HeaderSchema_exposer.def_readwrite( "fileFormat", &gezi::HeaderSchema::fileFormat );
        HeaderSchema_exposer.def_readwrite( "groupKeys", &gezi::HeaderSchema::groupKeys );
        HeaderSchema_exposer.def_readwrite( "hasHeader", &gezi::HeaderSchema::hasHeader );
        HeaderSchema_exposer.def_readwrite( "hasWeights", &gezi::HeaderSchema::hasWeights );
        HeaderSchema_exposer.def_readwrite( "headerStr", &gezi::HeaderSchema::headerStr );
        HeaderSchema_exposer.def_readwrite( "instanceNameHeaderString", &gezi::HeaderSchema::instanceNameHeaderString );
        HeaderSchema_exposer.def_readwrite( "normalized", &gezi::HeaderSchema::normalized );
        HeaderSchema_exposer.def_readwrite( "numClasses", &gezi::HeaderSchema::numClasses );
        HeaderSchema_exposer.def_readwrite( "tagNames", &gezi::HeaderSchema::tagNames );
    }

    bp::class_< gezi::Identifer >( "Identifer" )    
        .def( 
            "Load"
            , (void ( ::gezi::Identifer::* )( ::std::string ) )( &::gezi::Identifer::Load )
            , ( bp::arg("path") ) )    
        .def( 
            "Save"
            , (void ( ::gezi::Identifer::* )( ::std::string ) )( &::gezi::Identifer::Save )
            , ( bp::arg("path") ) )    
        .def( 
            "add"
            , (int ( ::gezi::Identifer::* )( ::std::string ) )( &::gezi::Identifer::add )
            , ( bp::arg("f") ) )    
        .def( 
            "add"
            , (int ( ::gezi::Identifer::* )( ::std::string,bool & ) )( &::gezi::Identifer::add )
            , ( bp::arg("f"), bp::arg("isnew") ) )    
        .def( 
            "add_unique"
            , (int ( ::gezi::Identifer::* )( ::std::string ) )( &::gezi::Identifer::add_unique )
            , ( bp::arg("f") ) )    
        .def( 
            "clear"
            , (void ( ::gezi::Identifer::* )(  ) )( &::gezi::Identifer::clear ) )    
        .def( 
            "empty"
            , (bool ( ::gezi::Identifer::* )(  ) const)( &::gezi::Identifer::empty ) )    
        .def( 
            "has"
            , (bool ( ::gezi::Identifer::* )( ::std::string ) const)( &::gezi::Identifer::has )
            , ( bp::arg("f") ) )    
        .def( 
            "id"
            , (int ( ::gezi::Identifer::* )( ::std::string ) const)( &::gezi::Identifer::id )
            , ( bp::arg("f") ) )    
        .def( 
            "key"
            , (::std::string ( ::gezi::Identifer::* )( int ) const)( &::gezi::Identifer::key )
            , ( bp::arg("id") ) )    
        .def( 
            "keys"
            , (::std::vector< std::string > & ( ::gezi::Identifer::* )(  ) )( &::gezi::Identifer::keys )
                /* undefined call policies */ )    
        .def( 
            "last"
            , (::std::string ( ::gezi::Identifer::* )(  ) )( &::gezi::Identifer::last ) )    
        .def( 
            "load"
            , (bool ( ::gezi::Identifer::* )( ::std::string,::std::string ) )( &::gezi::Identifer::load )
            , ( bp::arg("file"), bp::arg("sep")="\011" ) )    
        .def( 
            "null_id"
            , (int const (*)(  ))( &::gezi::Identifer::null_id ) )    
        .def( 
            "__call__"
            , (int const ( ::gezi::Identifer::* )( ::std::string ) const)( &::gezi::Identifer::operator() )
            , ( bp::arg("key") ) )    
        .def( 
            "__getitem__"
            , (::std::string ( ::gezi::Identifer::* )( int ) const)( &::gezi::Identifer::operator[] )
            , ( bp::arg("id") ) )    
        .def( 
            "save"
            , (void ( ::gezi::Identifer::* )( ::std::string ) )( &::gezi::Identifer::save )
            , ( bp::arg("file") ) )    
        .def( 
            "size"
            , (::size_t ( ::gezi::Identifer::* )(  ) const)( &::gezi::Identifer::size ) )    
        .def( 
            "words"
            , (::std::vector< std::string > & ( ::gezi::Identifer::* )(  ) )( &::gezi::Identifer::words )
                /* undefined call policies */ )    
        .def_readonly( "NullId", gezi::Identifer::NullId )    
        .staticmethod( "null_id" );

    { //::gezi::Instance
        typedef bp::class_< gezi::Instance > Instance_exposer_t;
        Instance_exposer_t Instance_exposer = Instance_exposer_t( "Instance", bp::init< >() );
        bp::scope Instance_scope( Instance_exposer );
        Instance_exposer.def( bp::init< gezi::Instance const & >(( bp::arg("arg0") )) );
        Instance_exposer.def( bp::init< int >(( bp::arg("length") )) );
        bp::implicitly_convertible< int, gezi::Instance >();
        { //::gezi::Instance::FeatureNum
        
            typedef int ( ::gezi::Instance::*FeatureNum_function_type )(  ) const;
            
            Instance_exposer.def( 
                "FeatureNum"
                , FeatureNum_function_type( &::gezi::Instance::FeatureNum ) );
        
        }
        { //::gezi::Instance::Features
        
            typedef ::gezi::Vector & ( ::gezi::Instance::*Features_function_type )(  ) ;
            
            Instance_exposer.def( 
                "Features"
                , Features_function_type( &::gezi::Instance::Features )
                    /* undefined call policies */ );
        
        }
        { //::gezi::Instance::HasMissingFeatures
        
            typedef bool ( ::gezi::Instance::*HasMissingFeatures_function_type )(  ) ;
            
            Instance_exposer.def( 
                "HasMissingFeatures"
                , HasMissingFeatures_function_type( &::gezi::Instance::HasMissingFeatures ) );
        
        }
        { //::gezi::Instance::IsDense
        
            typedef bool ( ::gezi::Instance::*IsDense_function_type )(  ) const;
            
            Instance_exposer.def( 
                "IsDense"
                , IsDense_function_type( &::gezi::Instance::IsDense ) );
        
        }
        { //::gezi::Instance::IsNegative
        
            typedef bool ( ::gezi::Instance::*IsNegative_function_type )(  ) ;
            
            Instance_exposer.def( 
                "IsNegative"
                , IsNegative_function_type( &::gezi::Instance::IsNegative ) );
        
        }
        { //::gezi::Instance::IsPositive
        
            typedef bool ( ::gezi::Instance::*IsPositive_function_type )(  ) ;
            
            Instance_exposer.def( 
                "IsPositive"
                , IsPositive_function_type( &::gezi::Instance::IsPositive ) );
        
        }
        { //::gezi::Instance::IsSparse
        
            typedef bool ( ::gezi::Instance::*IsSparse_function_type )(  ) const;
            
            Instance_exposer.def( 
                "IsSparse"
                , IsSparse_function_type( &::gezi::Instance::IsSparse ) );
        
        }
        { //::gezi::Instance::IsUnknown
        
            typedef bool ( ::gezi::Instance::*IsUnknown_function_type )(  ) ;
            
            Instance_exposer.def( 
                "IsUnknown"
                , IsUnknown_function_type( &::gezi::Instance::IsUnknown ) );
        
        }
        { //::gezi::Instance::NumFeatures
        
            typedef int ( ::gezi::Instance::*NumFeatures_function_type )(  ) const;
            
            Instance_exposer.def( 
                "NumFeatures"
                , NumFeatures_function_type( &::gezi::Instance::NumFeatures ) );
        
        }
        { //::gezi::Instance::SelectFeatures
        
            typedef void ( ::gezi::Instance::*SelectFeatures_function_type )( ::BitArray const & ) ;
            
            Instance_exposer.def( 
                "SelectFeatures"
                , SelectFeatures_function_type( &::gezi::Instance::SelectFeatures )
                , ( bp::arg("includedFeatures") ) );
        
        }
        { //::gezi::Instance::SelectFeaturesAndCompact
        
            typedef void ( ::gezi::Instance::*SelectFeaturesAndCompact_function_type )( ::ivec & ) ;
            
            Instance_exposer.def( 
                "SelectFeaturesAndCompact"
                , SelectFeaturesAndCompact_function_type( &::gezi::Instance::SelectFeaturesAndCompact )
                , ( bp::arg("featuresToKeep") ) );
        
        }
        { //::gezi::Instance::operator=
        
            typedef ::gezi::Instance & ( ::gezi::Instance::*assign_function_type )( ::gezi::Instance const & ) ;
            
            Instance_exposer.def( 
                "assign"
                , assign_function_type( &::gezi::Instance::operator= )
                , ( bp::arg("arg0") )
                , bp::return_self< >() );
        
        }
        { //::gezi::Instance::operator[]
        
            typedef ::Float ( ::gezi::Instance::*__getitem___function_type )( int ) const;
            
            Instance_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::gezi::Instance::operator[] )
                , ( bp::arg("index") ) );
        
        }
        { //::gezi::Instance::size
        
            typedef ::size_t ( ::gezi::Instance::*size_function_type )(  ) const;
            
            Instance_exposer.def( 
                "size"
                , size_function_type( &::gezi::Instance::size ) );
        
        }
        Instance_exposer.def_readwrite( "attributes", &gezi::Instance::attributes );
        Instance_exposer.def_readwrite( "features", &gezi::Instance::features );
        Instance_exposer.def_readwrite( "groupKey", &gezi::Instance::groupKey );
        Instance_exposer.def_readwrite( "hasMissingFeatures", &gezi::Instance::hasMissingFeatures );
        Instance_exposer.def_readwrite( "label", &gezi::Instance::label );
        Instance_exposer.def_readwrite( "line", &gezi::Instance::line );
        Instance_exposer.def_readwrite( "metaData", &gezi::Instance::metaData );
        Instance_exposer.def_readwrite( "name", &gezi::Instance::name );
        Instance_exposer.def_readwrite( "names", &gezi::Instance::names );
        Instance_exposer.def_readwrite( "normalized", &gezi::Instance::normalized );
        Instance_exposer.def_readwrite( "sparse", &gezi::Instance::sparse );
        Instance_exposer.def_readwrite( "weight", &gezi::Instance::weight );
        bp::register_ptr_to_python< boost::shared_ptr< gezi::Instance > >();
    }

    { //::gezi::InstanceParser
        typedef bp::class_< InstanceParser_wrapper > InstanceParser_exposer_t;
        InstanceParser_exposer_t InstanceParser_exposer = InstanceParser_exposer_t( "InstanceParser", bp::init< >() );
        bp::scope InstanceParser_scope( InstanceParser_exposer );
        bp::class_< gezi::InstanceParser::Arguments >( "Arguments" )    
            .def_readwrite( "attrsIdx", &gezi::InstanceParser::Arguments::attrsIdx )    
            .def_readwrite( "excl", &gezi::InstanceParser::Arguments::excl )    
            .def_readwrite( "groupsIdx", &gezi::InstanceParser::Arguments::groupsIdx )    
            .def_readwrite( "hasHeader", &gezi::InstanceParser::Arguments::hasHeader )    
            .def_readwrite( "incl", &gezi::InstanceParser::Arguments::incl )    
            .def_readwrite( "inputFormat", &gezi::InstanceParser::Arguments::inputFormat )    
            .def_readwrite( "keepDense", &gezi::InstanceParser::Arguments::keepDense )    
            .def_readwrite( "keepSparse", &gezi::InstanceParser::Arguments::keepSparse )    
            .def_readwrite( "labelIdx", &gezi::InstanceParser::Arguments::labelIdx )    
            .def_readwrite( "libsvmStartIndex", &gezi::InstanceParser::Arguments::libsvmStartIndex )    
            .def_readwrite( "namesIdx", &gezi::InstanceParser::Arguments::namesIdx )    
            .def_readwrite( "ncsep", &gezi::InstanceParser::Arguments::ncsep )    
            .def_readwrite( "resultDir", &gezi::InstanceParser::Arguments::resultDir )    
            .def_readwrite( "sep", &gezi::InstanceParser::Arguments::sep )    
            .def_readwrite( "sparsifyThre", &gezi::InstanceParser::Arguments::sparsifyThre )    
            .def_readwrite( "weightIdx", &gezi::InstanceParser::Arguments::weightIdx );
        { //::gezi::InstanceParser::Args
        
            typedef ::gezi::InstanceParser::Arguments & ( ::gezi::InstanceParser::*Args_function_type )(  ) ;
            
            InstanceParser_exposer.def( 
                "Args"
                , Args_function_type( &::gezi::InstanceParser::Args )
                    /* undefined call policies */ );
        
        }
        { //::gezi::InstanceParser::Clear
        
            typedef void ( ::gezi::InstanceParser::*Clear_function_type )(  ) ;
            
            InstanceParser_exposer.def( 
                "Clear"
                , Clear_function_type( &::gezi::InstanceParser::Clear ) );
        
        }
        { //::gezi::InstanceParser::CreateInstancesFromDenseFormat
        
            typedef void ( ::gezi::InstanceParser::*CreateInstancesFromDenseFormat_function_type )( ::svec &,::uint64 ) ;
            
            InstanceParser_exposer.def( 
                "CreateInstancesFromDenseFormat"
                , CreateInstancesFromDenseFormat_function_type( &::gezi::InstanceParser::CreateInstancesFromDenseFormat )
                , ( bp::arg("lines"), bp::arg("start") ) );
        
        }
        { //::gezi::InstanceParser::CreateInstancesFromLibSVMFormat
        
            typedef void ( ::gezi::InstanceParser::*CreateInstancesFromLibSVMFormat_function_type )( ::svec &,::uint64 ) ;
            
            InstanceParser_exposer.def( 
                "CreateInstancesFromLibSVMFormat"
                , CreateInstancesFromLibSVMFormat_function_type( &::gezi::InstanceParser::CreateInstancesFromLibSVMFormat )
                , ( bp::arg("lines"), bp::arg("start") ) );
        
        }
        { //::gezi::InstanceParser::CreateInstancesFromSparseFormat
        
            typedef void ( ::gezi::InstanceParser::*CreateInstancesFromSparseFormat_function_type )( ::svec &,::uint64 ) ;
            
            InstanceParser_exposer.def( 
                "CreateInstancesFromSparseFormat"
                , CreateInstancesFromSparseFormat_function_type( &::gezi::InstanceParser::CreateInstancesFromSparseFormat )
                , ( bp::arg("lines"), bp::arg("start") ) );
        
        }
        { //::gezi::InstanceParser::CreateInstancesFromSparseNoLengthFormat
        
            typedef void ( ::gezi::InstanceParser::*CreateInstancesFromSparseNoLengthFormat_function_type )( ::svec &,::uint64 ) ;
            
            InstanceParser_exposer.def( 
                "CreateInstancesFromSparseNoLengthFormat"
                , CreateInstancesFromSparseNoLengthFormat_function_type( &::gezi::InstanceParser::CreateInstancesFromSparseNoLengthFormat )
                , ( bp::arg("lines"), bp::arg("start") ) );
        
        }
        { //::gezi::InstanceParser::CreateInstancesFromTextFormat
        
            typedef void ( ::gezi::InstanceParser::*CreateInstancesFromTextFormat_function_type )( ::svec &,::uint64 ) ;
            
            InstanceParser_exposer.def( 
                "CreateInstancesFromTextFormat"
                , CreateInstancesFromTextFormat_function_type( &::gezi::InstanceParser::CreateInstancesFromTextFormat )
                , ( bp::arg("lines"), bp::arg("start") ) );
        
        }
        { //::gezi::InstanceParser::CreateInstancesFromVWFormat
        
            typedef void ( ::gezi::InstanceParser::*CreateInstancesFromVWFormat_function_type )( ::svec &,::uint64 ) ;
            
            InstanceParser_exposer.def( 
                "CreateInstancesFromVWFormat"
                , CreateInstancesFromVWFormat_function_type( &::gezi::InstanceParser::CreateInstancesFromVWFormat )
                , ( bp::arg("lines"), bp::arg("start") ) );
        
        }
        { //::gezi::InstanceParser::Finallize
        
            typedef void ( InstanceParser_wrapper::*Finallize_function_type )(  ) ;
            
            InstanceParser_exposer.def( 
                "Finallize"
                , Finallize_function_type( &InstanceParser_wrapper::Finallize ) );
        
        }
        { //::gezi::InstanceParser::GetFileFormat
        
            typedef ::gezi::FileFormat ( ::gezi::InstanceParser::*GetFileFormat_function_type )( ::std::string ) ;
            
            InstanceParser_exposer.def( 
                "GetFileFormat"
                , GetFileFormat_function_type( &::gezi::InstanceParser::GetFileFormat )
                , ( bp::arg("line") ) );
        
        }
        { //::gezi::InstanceParser::GetIndexesFromInput
        
            typedef ::ivec ( ::gezi::InstanceParser::*GetIndexesFromInput_function_type )( ::std::string ) ;
            
            InstanceParser_exposer.def( 
                "GetIndexesFromInput"
                , GetIndexesFromInput_function_type( &::gezi::InstanceParser::GetIndexesFromInput )
                , ( bp::arg("input") ) );
        
        }
        { //::gezi::InstanceParser::GetSelectedArray
        
            typedef ::BitArray ( ::gezi::InstanceParser::*GetSelectedArray_function_type )(  ) ;
            
            InstanceParser_exposer.def( 
                "GetSelectedArray"
                , GetSelectedArray_function_type( &::gezi::InstanceParser::GetSelectedArray ) );
        
        }
        { //::gezi::InstanceParser::GetSelectedFeatures
        
            typedef ::ivec ( ::gezi::InstanceParser::*GetSelectedFeatures_function_type )( ::std::string ) ;
            
            InstanceParser_exposer.def( 
                "GetSelectedFeatures"
                , GetSelectedFeatures_function_type( &::gezi::InstanceParser::GetSelectedFeatures )
                , ( bp::arg("input") ) );
        
        }
        { //::gezi::InstanceParser::GuessSeparator
        
            typedef char ( ::gezi::InstanceParser::*GuessSeparator_function_type )( ::std::string,::std::string ) ;
            
            InstanceParser_exposer.def( 
                "GuessSeparator"
                , GuessSeparator_function_type( &::gezi::InstanceParser::GuessSeparator )
                , ( bp::arg("line"), bp::arg("seps") ) );
        
        }
        { //::gezi::InstanceParser::InitColumnTypes
        
            typedef void ( ::gezi::InstanceParser::*InitColumnTypes_function_type )( ::svec & ) ;
            
            InstanceParser_exposer.def( 
                "InitColumnTypes"
                , InitColumnTypes_function_type( &::gezi::InstanceParser::InitColumnTypes )
                , ( bp::arg("lines") ) );
        
        }
        { //::gezi::InstanceParser::InitNames
        
            typedef void ( ::gezi::InstanceParser::*InitNames_function_type )(  ) ;
            
            InstanceParser_exposer.def( 
                "InitNames"
                , InitNames_function_type( &::gezi::InstanceParser::InitNames ) );
        
        }
        { //::gezi::InstanceParser::InitParam
        
            typedef void ( ::gezi::InstanceParser::*InitParam_function_type )(  ) ;
            
            InstanceParser_exposer.def( 
                "InitParam"
                , InitParam_function_type( &::gezi::InstanceParser::InitParam ) );
        
        }
        { //::gezi::InstanceParser::IsDense
        
            typedef bool ( ::gezi::InstanceParser::*IsDense_function_type )(  ) ;
            
            InstanceParser_exposer.def( 
                "IsDense"
                , IsDense_function_type( &::gezi::InstanceParser::IsDense ) );
        
        }
        { //::gezi::InstanceParser::IsSparse
        
            typedef bool ( ::gezi::InstanceParser::*IsSparse_function_type )(  ) ;
            
            InstanceParser_exposer.def( 
                "IsSparse"
                , IsSparse_function_type( &::gezi::InstanceParser::IsSparse ) );
        
        }
        { //::gezi::InstanceParser::ParseArguments
        
            typedef void ( ::gezi::InstanceParser::*ParseArguments_function_type )(  ) ;
            
            InstanceParser_exposer.def( 
                "ParseArguments"
                , ParseArguments_function_type( &::gezi::InstanceParser::ParseArguments ) );
        
        }
        { //::gezi::InstanceParser::ParseFirstLine
        
            typedef void ( ::gezi::InstanceParser::*ParseFirstLine_function_type )( ::svec ) ;
            
            InstanceParser_exposer.def( 
                "ParseFirstLine"
                , ParseFirstLine_function_type( &::gezi::InstanceParser::ParseFirstLine )
                , ( bp::arg("lines") ) );
        
        }
        { //::gezi::InstanceParser::ParseSparseAttributes
        
            typedef void ( ::gezi::InstanceParser::*ParseSparseAttributes_function_type )( ::gezi::Instance &,int,::std::string,::svec & ) ;
            
            InstanceParser_exposer.def( 
                "ParseSparseAttributes"
                , ParseSparseAttributes_function_type( &::gezi::InstanceParser::ParseSparseAttributes )
                , ( bp::arg("instance"), bp::arg("index"), bp::arg("item"), bp::arg("groupKeys") ) );
        
        }
        { //::gezi::InstanceParser::ParseSparseAttributes
        
            typedef void ( ::gezi::InstanceParser::*ParseSparseAttributes_function_type )( ::gezi::Instance &,int,::std::string ) ;
            
            InstanceParser_exposer.def( 
                "ParseSparseAttributes"
                , ParseSparseAttributes_function_type( &::gezi::InstanceParser::ParseSparseAttributes )
                , ( bp::arg("instance"), bp::arg("index"), bp::arg("item") ) );
        
        }
        { //::gezi::InstanceParser::ParseTextForTest
        
            typedef void ( ::gezi::InstanceParser::*ParseTextForTest_function_type )( ::svec &,::uint64 ) ;
            
            InstanceParser_exposer.def( 
                "ParseTextForTest"
                , ParseTextForTest_function_type( &::gezi::InstanceParser::ParseTextForTest )
                , ( bp::arg("lines"), bp::arg("start") ) );
        
        }
        { //::gezi::InstanceParser::ParseTextForTrain
        
            typedef void ( ::gezi::InstanceParser::*ParseTextForTrain_function_type )( ::svec &,::uint64 ) ;
            
            InstanceParser_exposer.def( 
                "ParseTextForTrain"
                , ParseTextForTrain_function_type( &::gezi::InstanceParser::ParseTextForTrain )
                , ( bp::arg("lines"), bp::arg("start") ) );
        
        }
        { //::gezi::InstanceParser::PrintInfo
        
            typedef void ( ::gezi::InstanceParser::*PrintInfo_function_type )(  ) ;
            
            InstanceParser_exposer.def( 
                "PrintInfo"
                , PrintInfo_function_type( &::gezi::InstanceParser::PrintInfo ) );
        
        }
        { //::gezi::InstanceParser::SetHeaderSchema
        
            typedef void ( ::gezi::InstanceParser::*SetHeaderSchema_function_type )( ::std::string ) ;
            
            InstanceParser_exposer.def( 
                "SetHeaderSchema"
                , SetHeaderSchema_function_type( &::gezi::InstanceParser::SetHeaderSchema )
                , ( bp::arg("line") ) );
        
        }
        { //::gezi::InstanceParser::SetTextFeatureNames
        
            typedef void ( ::gezi::InstanceParser::*SetTextFeatureNames_function_type )(  ) ;
            
            InstanceParser_exposer.def( 
                "SetTextFeatureNames"
                , SetTextFeatureNames_function_type( &::gezi::InstanceParser::SetTextFeatureNames ) );
        
        }
        { //::gezi::InstanceParser::TextFormatParsedTime
        
            typedef int ( *TextFormatParsedTime_function_type )(  );
            
            InstanceParser_exposer.def( 
                "TextFormatParsedTime"
                , TextFormatParsedTime_function_type( &::gezi::InstanceParser::TextFormatParsedTime ) );
        
        }
        InstanceParser_exposer.staticmethod( "TextFormatParsedTime" );
    }

    { //::gezi::Instances
        typedef bp::class_< gezi::Instances > Instances_exposer_t;
        Instances_exposer_t Instances_exposer = Instances_exposer_t( "Instances", bp::init< >() );
        bp::scope Instances_scope( Instances_exposer );
        Instances_exposer.def( bp::init< gezi::Instances const & >(( bp::arg("arg0") )) );
        Instances_exposer.def( bp::init< gezi::HeaderSchema const & >(( bp::arg("schema_") )) );
        bp::implicitly_convertible< gezi::HeaderSchema const &, gezi::Instances >();
        { //::gezi::Instances::Add
        
            typedef void ( ::gezi::Instances::*Add_function_type )( ::gezi::InstancePtr const & ) ;
            
            Instances_exposer.def( 
                "Add"
                , Add_function_type( &::gezi::Instances::Add )
                , ( bp::arg("instancePtr") ) );
        
        }
        { //::gezi::Instances::CopySchema
        
            typedef void ( ::gezi::Instances::*CopySchema_function_type )( ::gezi::HeaderSchema const & ) ;
            
            Instances_exposer.def( 
                "CopySchema"
                , CopySchema_function_type( &::gezi::Instances::CopySchema )
                , ( bp::arg("schema_") ) );
        
        }
        { //::gezi::Instances::Count
        
            typedef ::size_t ( ::gezi::Instances::*Count_function_type )(  ) const;
            
            Instances_exposer.def( 
                "Count"
                , Count_function_type( &::gezi::Instances::Count ) );
        
        }
        { //::gezi::Instances::DenseCount
        
            typedef ::uint64 ( ::gezi::Instances::*DenseCount_function_type )(  ) ;
            
            Instances_exposer.def( 
                "DenseCount"
                , DenseCount_function_type( &::gezi::Instances::DenseCount ) );
        
        }
        { //::gezi::Instances::FeatureNames
        
            typedef ::gezi::FeatureNamesVector const & ( ::gezi::Instances::*FeatureNames_function_type )(  ) const;
            
            Instances_exposer.def( 
                "FeatureNames"
                , FeatureNames_function_type( &::gezi::Instances::FeatureNames )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::gezi::Instances::FeatureNames
        
            typedef ::gezi::FeatureNamesVector & ( ::gezi::Instances::*FeatureNames_function_type )(  ) ;
            
            Instances_exposer.def( 
                "FeatureNames"
                , FeatureNames_function_type( &::gezi::Instances::FeatureNames )
                    /* undefined call policies */ );
        
        }
        { //::gezi::Instances::FeatureNum
        
            typedef int ( ::gezi::Instances::*FeatureNum_function_type )(  ) const;
            
            Instances_exposer.def( 
                "FeatureNum"
                , FeatureNum_function_type( &::gezi::Instances::FeatureNum ) );
        
        }
        { //::gezi::Instances::HasHeader
        
            typedef bool ( ::gezi::Instances::*HasHeader_function_type )(  ) const;
            
            Instances_exposer.def( 
                "HasHeader"
                , HasHeader_function_type( &::gezi::Instances::HasHeader ) );
        
        }
        { //::gezi::Instances::HeaderStr
        
            typedef ::std::string ( ::gezi::Instances::*HeaderStr_function_type )(  ) const;
            
            Instances_exposer.def( 
                "HeaderStr"
                , HeaderStr_function_type( &::gezi::Instances::HeaderStr ) );
        
        }
        { //::gezi::Instances::InstanceNum
        
            typedef ::size_t ( ::gezi::Instances::*InstanceNum_function_type )(  ) const;
            
            Instances_exposer.def( 
                "InstanceNum"
                , InstanceNum_function_type( &::gezi::Instances::InstanceNum ) );
        
        }
        { //::gezi::Instances::IsNormalized
        
            typedef bool ( ::gezi::Instances::*IsNormalized_function_type )(  ) ;
            
            Instances_exposer.def( 
                "IsNormalized"
                , IsNormalized_function_type( &::gezi::Instances::IsNormalized ) );
        
        }
        { //::gezi::Instances::NegativeCount
        
            typedef ::uint64 ( ::gezi::Instances::*NegativeCount_function_type )(  ) ;
            
            Instances_exposer.def( 
                "NegativeCount"
                , NegativeCount_function_type( &::gezi::Instances::NegativeCount ) );
        
        }
        { //::gezi::Instances::NumFeatures
        
            typedef int ( ::gezi::Instances::*NumFeatures_function_type )(  ) const;
            
            Instances_exposer.def( 
                "NumFeatures"
                , NumFeatures_function_type( &::gezi::Instances::NumFeatures ) );
        
        }
        { //::gezi::Instances::PositiveCount
        
            typedef ::uint64 ( ::gezi::Instances::*PositiveCount_function_type )(  ) ;
            
            Instances_exposer.def( 
                "PositiveCount"
                , PositiveCount_function_type( &::gezi::Instances::PositiveCount ) );
        
        }
        { //::gezi::Instances::PrintSummary
        
            typedef void ( ::gezi::Instances::*PrintSummary_function_type )( int ) ;
            
            Instances_exposer.def( 
                "PrintSummary"
                , PrintSummary_function_type( &::gezi::Instances::PrintSummary )
                , ( bp::arg("level")=(int)(0) ) );
        
        }
        { //::gezi::Instances::Randomize
        
            typedef void ( ::gezi::Instances::*Randomize_function_type )( ::gezi::RandomEngine const & ) ;
            
            Instances_exposer.def( 
                "Randomize"
                , Randomize_function_type( &::gezi::Instances::Randomize )
                , ( bp::arg("rng") ) );
        
        }
        { //::gezi::Instances::SetHeader
        
            typedef void ( ::gezi::Instances::*SetHeader_function_type )( ::std::string,bool ) ;
            
            Instances_exposer.def( 
                "SetHeader"
                , SetHeader_function_type( &::gezi::Instances::SetHeader )
                , ( bp::arg("header_"), bp::arg("hasHeader_") ) );
        
        }
        { //::gezi::Instances::SetNormalized
        
            typedef void ( ::gezi::Instances::*SetNormalized_function_type )( bool ) ;
            
            Instances_exposer.def( 
                "SetNormalized"
                , SetNormalized_function_type( &::gezi::Instances::SetNormalized )
                , ( bp::arg("norm")=(bool)(true) ) );
        
        }
        { //::gezi::Instances::ShrinkData
        
            typedef void ( ::gezi::Instances::*ShrinkData_function_type )( double,::gezi::RandomEngine const & ) ;
            
            Instances_exposer.def( 
                "ShrinkData"
                , ShrinkData_function_type( &::gezi::Instances::ShrinkData )
                , ( bp::arg("trainProportion"), bp::arg("rng") ) );
        
        }
        { //::gezi::Instances::Size
        
            typedef ::size_t ( ::gezi::Instances::*Size_function_type )(  ) const;
            
            Instances_exposer.def( 
                "Size"
                , Size_function_type( &::gezi::Instances::Size ) );
        
        }
        { //::gezi::Instances::SparseCount
        
            typedef ::uint64 ( ::gezi::Instances::*SparseCount_function_type )(  ) ;
            
            Instances_exposer.def( 
                "SparseCount"
                , SparseCount_function_type( &::gezi::Instances::SparseCount ) );
        
        }
        { //::gezi::Instances::operator()
        
            typedef ::Float const ( ::gezi::Instances::*__call___function_type )( ::size_t,::size_t ) const;
            
            Instances_exposer.def( 
                "__call__"
                , __call___function_type( &::gezi::Instances::operator() )
                , ( bp::arg("row"), bp::arg("col") ) );
        
        }
        { //::gezi::Instances::operator=
        
            typedef ::gezi::Instances & ( ::gezi::Instances::*assign_function_type )( ::gezi::Instances const & ) ;
            
            Instances_exposer.def( 
                "assign"
                , assign_function_type( &::gezi::Instances::operator= )
                , ( bp::arg("arg0") )
                , bp::return_self< >() );
        
        }
        Instances_exposer.def_readwrite( "name", &gezi::Instances::name );
        Instances_exposer.def_readwrite( "schema", &gezi::Instances::schema );
    }

    bp::class_< gezi::InstancesUtil >( "InstancesUtil" )    
        .def( 
            "GenBootstrapInstances"
            , (::gezi::Instances (*)( ::gezi::Instances const &,::gezi::Random const &,double ))( &::gezi::InstancesUtil::GenBootstrapInstances )
            , ( bp::arg("instances"), bp::arg("rand"), bp::arg("fraction") ) )    
        .def( 
            "GenPartionInstances"
            , (::gezi::Instances (*)( ::gezi::Instances const &,::gezi::Random const &,double ))( &::gezi::InstancesUtil::GenPartionInstances )
            , ( bp::arg("instances"), bp::arg("rand"), bp::arg("fraction") ) )    
        .def( 
            "RandomSplit"
            , (::std::vector< gezi::Instances > (*)( ::gezi::Instances const &,double,unsigned int ))( &::gezi::InstancesUtil::RandomSplit )
            , ( bp::arg("instances"), bp::arg("ratio"), bp::arg("randSeed")=(unsigned int)(0) ) )    
        .def( 
            "SampleOneInstance"
            , (::gezi::InstancePtr (*)( ::gezi::Instances const &,::gezi::Random const & ))( &::gezi::InstancesUtil::SampleOneInstance )
            , ( bp::arg("instances"), bp::arg("rand") ) )    
        .def( 
            "SplitInstancesByLabel"
            , (void (*)( ::gezi::Instances const &,::gezi::Instances &,::gezi::Instances & ))( &::gezi::InstancesUtil::SplitInstancesByLabel )
            , ( bp::arg("instances"), bp::arg("posInstances"), bp::arg("negInstances") ) )    
        .staticmethod( "GenBootstrapInstances" )    
        .staticmethod( "GenPartionInstances" )    
        .staticmethod( "RandomSplit" )    
        .staticmethod( "SampleOneInstance" )    
        .staticmethod( "SplitInstancesByLabel" );

    { //::gezi::Trainer
        typedef bp::class_< Trainer_wrapper > Trainer_exposer_t;
        Trainer_exposer_t Trainer_exposer = Trainer_exposer_t( "Trainer" );
        bp::scope Trainer_scope( Trainer_exposer );
        { //::gezi::Trainer::Finalize
        
            typedef void ( Trainer_wrapper::*Finalize_function_type )( ::gezi::Instances & ) ;
            
            Trainer_exposer.def( 
                "Finalize"
                , Finalize_function_type( &Trainer_wrapper::Finalize )
                , ( bp::arg("instances") ) );
        
        }
        { //::gezi::Trainer::GetCalibrator
        
            typedef ::gezi::CalibratorPtr ( ::gezi::Trainer::*GetCalibrator_function_type )(  ) ;
            
            Trainer_exposer.def( 
                "GetCalibrator"
                , GetCalibrator_function_type( &::gezi::Trainer::GetCalibrator ) );
        
        }
        { //::gezi::Trainer::GetLossKind
        
            typedef ::gezi::LossKind ( ::gezi::Trainer::*GetLossKind_function_type )(  ) ;
            typedef ::gezi::LossKind ( Trainer_wrapper::*default_GetLossKind_function_type )(  ) ;
            
            Trainer_exposer.def( 
                "GetLossKind"
                , GetLossKind_function_type(&::gezi::Trainer::GetLossKind)
                , default_GetLossKind_function_type(&Trainer_wrapper::default_GetLossKind) );
        
        }
        { //::gezi::Trainer::GetNormalizer
        
            typedef ::gezi::NormalizerPtr ( ::gezi::Trainer::*GetNormalizer_function_type )(  ) ;
            
            Trainer_exposer.def( 
                "GetNormalizer"
                , GetNormalizer_function_type( &::gezi::Trainer::GetNormalizer ) );
        
        }
        { //::gezi::Trainer::GetParam
        
            typedef ::std::string ( ::gezi::Trainer::*GetParam_function_type )(  ) ;
            typedef ::std::string ( Trainer_wrapper::*default_GetParam_function_type )(  ) ;
            
            Trainer_exposer.def( 
                "GetParam"
                , GetParam_function_type(&::gezi::Trainer::GetParam)
                , default_GetParam_function_type(&Trainer_wrapper::default_GetParam) );
        
        }
        { //::gezi::Trainer::GetPredictionKind
        
            typedef ::gezi::PredictionKind ( ::gezi::Trainer::*GetPredictionKind_function_type )(  ) ;
            typedef ::gezi::PredictionKind ( Trainer_wrapper::*default_GetPredictionKind_function_type )(  ) ;
            
            Trainer_exposer.def( 
                "GetPredictionKind"
                , GetPredictionKind_function_type(&::gezi::Trainer::GetPredictionKind)
                , default_GetPredictionKind_function_type(&Trainer_wrapper::default_GetPredictionKind) );
        
        }
        { //::gezi::Trainer::GetRandSeed
        
            typedef unsigned int ( ::gezi::Trainer::*GetRandSeed_function_type )(  ) const;
            typedef unsigned int ( Trainer_wrapper::*default_GetRandSeed_function_type )(  ) const;
            
            Trainer_exposer.def( 
                "GetRandSeed"
                , GetRandSeed_function_type(&::gezi::Trainer::GetRandSeed)
                , default_GetRandSeed_function_type(&Trainer_wrapper::default_GetRandSeed) );
        
        }
        { //::gezi::Trainer::GetRandom
        
            typedef ::gezi::RandomPtr ( ::gezi::Trainer::*GetRandom_function_type )(  ) ;
            
            Trainer_exposer.def( 
                "GetRandom"
                , GetRandom_function_type( &::gezi::Trainer::GetRandom ) );
        
        }
        { //::gezi::Trainer::Init
        
            typedef void ( Trainer_wrapper::*Init_function_type )(  ) ;
            
            Trainer_exposer.def( 
                "Init"
                , Init_function_type( &Trainer_wrapper::Init ) );
        
        }
        { //::gezi::Trainer::Initialize
        
            typedef void ( Trainer_wrapper::*Initialize_function_type )( ::gezi::Instances & ) ;
            
            Trainer_exposer.def( 
                "Initialize"
                , Initialize_function_type( &Trainer_wrapper::Initialize )
                , ( bp::arg("instances") ) );
        
        }
        { //::gezi::Trainer::InnerTrain
        
            typedef void ( Trainer_wrapper::*InnerTrain_function_type )( ::gezi::Instances & ) ;
            
            Trainer_exposer.def( 
                "InnerTrain"
                , InnerTrain_function_type( &Trainer_wrapper::InnerTrain )
                , ( bp::arg("instances") ) );
        
        }
        { //::gezi::Trainer::SetCalibrator
        
            typedef void ( ::gezi::Trainer::*SetCalibrator_function_type )( ::gezi::CalibratorPtr ) ;
            
            Trainer_exposer.def( 
                "SetCalibrator"
                , SetCalibrator_function_type( &::gezi::Trainer::SetCalibrator )
                , ( bp::arg("calibrator") ) );
        
        }
        { //::gezi::Trainer::SetNormalizeCopy
        
            typedef void ( ::gezi::Trainer::*SetNormalizeCopy_function_type )( bool ) ;
            
            Trainer_exposer.def( 
                "SetNormalizeCopy"
                , SetNormalizeCopy_function_type( &::gezi::Trainer::SetNormalizeCopy )
                , ( bp::arg("normalizeCopy")=(bool)(true) ) );
        
        }
        { //::gezi::Trainer::SetNormalizer
        
            typedef void ( ::gezi::Trainer::*SetNormalizer_function_type )( ::gezi::NormalizerPtr ) ;
            
            Trainer_exposer.def( 
                "SetNormalizer"
                , SetNormalizer_function_type( &::gezi::Trainer::SetNormalizer )
                , ( bp::arg("normalizer") ) );
        
        }
        { //::gezi::Trainer::SetRandSeed
        
            typedef void ( ::gezi::Trainer::*SetRandSeed_function_type )( unsigned int ) ;
            
            Trainer_exposer.def( 
                "SetRandSeed"
                , SetRandSeed_function_type( &::gezi::Trainer::SetRandSeed )
                , ( bp::arg("randSeed") ) );
        
        }
        { //::gezi::Trainer::SetStreaming
        
            typedef void ( ::gezi::Trainer::*SetStreaming_function_type )(  ) ;
            
            Trainer_exposer.def( 
                "SetStreaming"
                , SetStreaming_function_type( &::gezi::Trainer::SetStreaming ) );
        
        }
        { //::gezi::Trainer::Train
        
            typedef void ( ::gezi::Trainer::*Train_function_type )( ::gezi::Instances & ) ;
            typedef void ( Trainer_wrapper::*default_Train_function_type )( ::gezi::Instances & ) ;
            
            Trainer_exposer.def( 
                "Train"
                , Train_function_type(&::gezi::Trainer::Train)
                , default_Train_function_type(&Trainer_wrapper::default_Train)
                , ( bp::arg("instances") ) );
        
        }
        { //::gezi::Trainer::TrainingSchema
        
            typedef ::gezi::HeaderSchema const & ( ::gezi::Trainer::*TrainingSchema_function_type )(  ) const;
            
            Trainer_exposer.def( 
                "TrainingSchema"
                , TrainingSchema_function_type( &::gezi::Trainer::TrainingSchema )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::gezi::Trainer::TryInitializeNormalizer
        
            typedef void ( ::gezi::Trainer::*TryInitializeNormalizer_function_type )( ::gezi::Instances &,bool ) ;
            typedef void ( Trainer_wrapper::*default_TryInitializeNormalizer_function_type )( ::gezi::Instances &,bool ) ;
            
            Trainer_exposer.def( 
                "TryInitializeNormalizer"
                , TryInitializeNormalizer_function_type(&::gezi::Trainer::TryInitializeNormalizer)
                , default_TryInitializeNormalizer_function_type(&Trainer_wrapper::default_TryInitializeNormalizer)
                , ( bp::arg("instances"), bp::arg("isStreaming") ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< gezi::Trainer > >();
        bp::implicitly_convertible< boost::shared_ptr< gezi::Trainer >, boost::shared_ptr< gezi::WithHelp > >();
        bp::implicitly_convertible< boost::shared_ptr< gezi::Trainer >, boost::shared_ptr< gezi::WithArgs > >();
        bp::implicitly_convertible< boost::shared_ptr< gezi::ValidatingTrainer >, boost::shared_ptr< gezi::Trainer > >();
        bp::implicitly_convertible< boost::shared_ptr< gezi::IterativeTrainer >, boost::shared_ptr< gezi::Trainer > >();
    }

    bp::class_< ValidatingTrainer_wrapper, bp::bases< gezi::Trainer > >( "ValidatingTrainer", bp::init< >() )    
        .def( 
            "BestIteration"
            , (int ( ::gezi::ValidatingTrainer::* )(  ) const)( &::gezi::ValidatingTrainer::BestIteration ) )    
        .def( 
            "Evaluate"
            , (bool ( ValidatingTrainer_wrapper::* )( int,bool ) )(&ValidatingTrainer_wrapper::Evaluate)
            , ( bp::arg("round"), bp::arg("forceEvaluate")=(bool)(false) ) )    
        .def( 
            "EvaluateOnce"
            , (void ( ValidatingTrainer_wrapper::* )(  ) )(&ValidatingTrainer_wrapper::EvaluateOnce) )    
        .def( 
            "EvaluatePredicts"
            , (void ( ValidatingTrainer_wrapper::* )(  ) )(&ValidatingTrainer_wrapper::EvaluatePredicts) )    
        .def( 
            "GenPredicts"
            , (void ( ValidatingTrainer_wrapper::* )(  ) )(&ValidatingTrainer_wrapper::GenPredicts) )    
        .def( 
            "GenProabilites"
            , (void ( ValidatingTrainer_wrapper::* )(  ) )(&ValidatingTrainer_wrapper::GenProabilites) )    
        .def( 
            "RestoreBestStage"
            , (void ( ValidatingTrainer_wrapper::* )(  ) )(&ValidatingTrainer_wrapper::RestoreBestStage) )    
        .def( 
            "SetEarlyStop"
            , (::gezi::ValidatingTrainer & ( ::gezi::ValidatingTrainer::* )( bool ) )( &::gezi::ValidatingTrainer::SetEarlyStop )
            , ( bp::arg("earlyStop")=(bool)(true) )
                /* undefined call policies */ )    
        .def( 
            "SetEarlyStopCheckFrequency"
            , (::gezi::ValidatingTrainer & ( ::gezi::ValidatingTrainer::* )( int ) )( &::gezi::ValidatingTrainer::SetEarlyStopCheckFrequency )
            , ( bp::arg("earlyStopCheckFrequency") )
                /* undefined call policies */ )    
        .def( 
            "SetEarlyStopRounds"
            , (::gezi::ValidatingTrainer & ( ::gezi::ValidatingTrainer::* )( int ) )( &::gezi::ValidatingTrainer::SetEarlyStopRounds )
            , ( bp::arg("stopRounds") )
                /* undefined call policies */ )    
        .def( 
            "SetEvaluateFrequency"
            , (::gezi::ValidatingTrainer & ( ::gezi::ValidatingTrainer::* )( int ) )( &::gezi::ValidatingTrainer::SetEvaluateFrequency )
            , ( bp::arg("freq") )
                /* undefined call policies */ )    
        .def( 
            "SetScale"
            , (void ( ::gezi::ValidatingTrainer::* )( double ) )( &::gezi::ValidatingTrainer::SetScale )
            , ( bp::arg("scale") ) )    
        .def( 
            "SetSelfEvaluate"
            , (::gezi::ValidatingTrainer & ( ::gezi::ValidatingTrainer::* )( bool ) )( &::gezi::ValidatingTrainer::SetSelfEvaluate )
            , ( bp::arg("evaluate") )
                /* undefined call policies */ )    
        .def( 
            "SetSelfEvaluate2"
            , (::gezi::ValidatingTrainer & ( ::gezi::ValidatingTrainer::* )( bool ) )( &::gezi::ValidatingTrainer::SetSelfEvaluate2 )
            , ( bp::arg("evaluate") )
                /* undefined call policies */ )    
        .def( 
            "SetSelfEvaluateInstances"
            , (void ( ::gezi::ValidatingTrainer::* )( ::gezi::Instances const & ) )( &::gezi::ValidatingTrainer::SetSelfEvaluateInstances )
            , ( bp::arg("instances") ) )    
        .def( 
            "SetUseBestStage"
            , (::gezi::ValidatingTrainer & ( ::gezi::ValidatingTrainer::* )( bool ) )( &::gezi::ValidatingTrainer::SetUseBestStage )
            , ( bp::arg("useBestStage")=(bool)(true) )
                /* undefined call policies */ )    
        .def( 
            "StoreBestStage"
            , (void ( ValidatingTrainer_wrapper::* )(  ) )(&ValidatingTrainer_wrapper::StoreBestStage) )    
        .def( 
            "Train"
            , (void ( ::gezi::ValidatingTrainer::* )( ::gezi::Instances &,::std::vector< gezi::Instances > &,::std::vector< boost::shared_ptr<gezi::Evaluator> > & ) )(&::gezi::ValidatingTrainer::Train)
            , (void ( ValidatingTrainer_wrapper::* )( ::gezi::Instances &,::std::vector< gezi::Instances > &,::std::vector< boost::shared_ptr<gezi::Evaluator> > & ) )(&ValidatingTrainer_wrapper::default_Train)
            , ( bp::arg("instances"), bp::arg("validationInstances"), bp::arg("evaluators") ) )    
        .def( 
            "Validating"
            , (bool ( ::gezi::ValidatingTrainer::* )(  ) const)( &::gezi::ValidatingTrainer::Validating ) )    
        .def_readwrite( "Probabilities", &gezi::ValidatingTrainer::Probabilities )    
        .def_readwrite( "Scores", &gezi::ValidatingTrainer::Scores )    
        .def_readwrite( "TrainProbabilities", &gezi::ValidatingTrainer::TrainProbabilities )    
        .def_readwrite( "TrainScores", &gezi::ValidatingTrainer::TrainScores )    
        .def( 
            "Finalize"
            , (void ( ValidatingTrainer_wrapper::* )( ::gezi::Instances & ) )(&ValidatingTrainer_wrapper::Finalize)
            , ( bp::arg("instances") ) )    
        .def( 
            "GetLossKind"
            , (::gezi::LossKind ( ::gezi::Trainer::* )(  ) )(&::gezi::Trainer::GetLossKind)
            , (::gezi::LossKind ( ValidatingTrainer_wrapper::* )(  ) )(&ValidatingTrainer_wrapper::default_GetLossKind) )    
        .def( 
            "GetParam"
            , (::std::string ( ::gezi::Trainer::* )(  ) )(&::gezi::Trainer::GetParam)
            , (::std::string ( ValidatingTrainer_wrapper::* )(  ) )(&ValidatingTrainer_wrapper::default_GetParam) )    
        .def( 
            "GetPredictionKind"
            , (::gezi::PredictionKind ( ::gezi::Trainer::* )(  ) )(&::gezi::Trainer::GetPredictionKind)
            , (::gezi::PredictionKind ( ValidatingTrainer_wrapper::* )(  ) )(&ValidatingTrainer_wrapper::default_GetPredictionKind) )    
        .def( 
            "GetRandSeed"
            , (unsigned int ( ::gezi::Trainer::* )(  ) const)(&::gezi::Trainer::GetRandSeed)
            , (unsigned int ( ValidatingTrainer_wrapper::* )(  ) const)(&ValidatingTrainer_wrapper::default_GetRandSeed) )    
        .def( 
            "Init"
            , (void ( ValidatingTrainer_wrapper::* )(  ) )(&ValidatingTrainer_wrapper::Init) )    
        .def( 
            "Initialize"
            , (void ( ValidatingTrainer_wrapper::* )( ::gezi::Instances & ) )(&ValidatingTrainer_wrapper::Initialize)
            , ( bp::arg("instances") ) )    
        .def( 
            "InnerTrain"
            , (void ( ValidatingTrainer_wrapper::* )( ::gezi::Instances & ) )(&ValidatingTrainer_wrapper::InnerTrain)
            , ( bp::arg("instances") ) )    
        .def( 
            "Train"
            , (void ( ::gezi::Trainer::* )( ::gezi::Instances & ) )(&::gezi::Trainer::Train)
            , (void ( ValidatingTrainer_wrapper::* )( ::gezi::Instances & ) )(&ValidatingTrainer_wrapper::default_Train)
            , ( bp::arg("instances") ) )    
        .def( 
            "TryInitializeNormalizer"
            , (void ( ::gezi::Trainer::* )( ::gezi::Instances &,bool ) )(&::gezi::Trainer::TryInitializeNormalizer)
            , (void ( ValidatingTrainer_wrapper::* )( ::gezi::Instances &,bool ) )(&ValidatingTrainer_wrapper::default_TryInitializeNormalizer)
            , ( bp::arg("instances"), bp::arg("isStreaming") ) );

    bp::class_< IterativeTrainer_wrapper, bp::bases< gezi::ValidatingTrainer > >( "IterativeTrainer" )    
        .def( 
            "BeginTrainingIteration"
            , (void ( ::gezi::IterativeTrainer::* )(  ) )(&::gezi::IterativeTrainer::BeginTrainingIteration)
            , (void ( IterativeTrainer_wrapper::* )(  ) )(&IterativeTrainer_wrapper::default_BeginTrainingIteration) )    
        .def( 
            "FinishTrainingIteration"
            , (void ( ::gezi::IterativeTrainer::* )( bool & ) )(&::gezi::IterativeTrainer::FinishTrainingIteration)
            , (void ( IterativeTrainer_wrapper::* )( bool & ) )(&IterativeTrainer_wrapper::default_FinishTrainingIteration)
            , ( bp::arg("bMoreIterations") ) )    
        .def( 
            "InnerTrain"
            , (void ( ::gezi::IterativeTrainer::* )( ::gezi::Instances & ) )(&::gezi::IterativeTrainer::InnerTrain)
            , (void ( IterativeTrainer_wrapper::* )( ::gezi::Instances & ) )(&IterativeTrainer_wrapper::default_InnerTrain)
            , ( bp::arg("instances") ) )    
        .def( 
            "ProcessTrainingInstance"
            , (bool ( ::gezi::IterativeTrainer::* )( ::gezi::InstancePtr ) )(&::gezi::IterativeTrainer::ProcessTrainingInstance)
            , (bool ( IterativeTrainer_wrapper::* )( ::gezi::InstancePtr ) )(&IterativeTrainer_wrapper::default_ProcessTrainingInstance)
            , ( bp::arg("instance") ) )    
        .def( 
            "TrainingComplete"
            , (void ( ::gezi::IterativeTrainer::* )(  ) )(&::gezi::IterativeTrainer::TrainingComplete)
            , (void ( IterativeTrainer_wrapper::* )(  ) )(&IterativeTrainer_wrapper::default_TrainingComplete) )    
        .def( 
            "Evaluate"
            , (bool ( IterativeTrainer_wrapper::* )( int,bool ) )(&IterativeTrainer_wrapper::Evaluate)
            , ( bp::arg("round"), bp::arg("forceEvaluate")=(bool)(false) ) )    
        .def( 
            "EvaluateOnce"
            , (void ( IterativeTrainer_wrapper::* )(  ) )(&IterativeTrainer_wrapper::EvaluateOnce) )    
        .def( 
            "EvaluatePredicts"
            , (void ( IterativeTrainer_wrapper::* )(  ) )(&IterativeTrainer_wrapper::EvaluatePredicts) )    
        .def( 
            "Finalize"
            , (void ( IterativeTrainer_wrapper::* )( ::gezi::Instances & ) )(&IterativeTrainer_wrapper::Finalize)
            , ( bp::arg("instances") ) )    
        .def( 
            "GenPredicts"
            , (void ( IterativeTrainer_wrapper::* )(  ) )(&IterativeTrainer_wrapper::GenPredicts) )    
        .def( 
            "GenProabilites"
            , (void ( IterativeTrainer_wrapper::* )(  ) )(&IterativeTrainer_wrapper::GenProabilites) )    
        .def( 
            "GetLossKind"
            , (::gezi::LossKind ( ::gezi::Trainer::* )(  ) )(&::gezi::Trainer::GetLossKind)
            , (::gezi::LossKind ( IterativeTrainer_wrapper::* )(  ) )(&IterativeTrainer_wrapper::default_GetLossKind) )    
        .def( 
            "GetParam"
            , (::std::string ( ::gezi::Trainer::* )(  ) )(&::gezi::Trainer::GetParam)
            , (::std::string ( IterativeTrainer_wrapper::* )(  ) )(&IterativeTrainer_wrapper::default_GetParam) )    
        .def( 
            "GetPredictionKind"
            , (::gezi::PredictionKind ( ::gezi::Trainer::* )(  ) )(&::gezi::Trainer::GetPredictionKind)
            , (::gezi::PredictionKind ( IterativeTrainer_wrapper::* )(  ) )(&IterativeTrainer_wrapper::default_GetPredictionKind) )    
        .def( 
            "GetRandSeed"
            , (unsigned int ( ::gezi::Trainer::* )(  ) const)(&::gezi::Trainer::GetRandSeed)
            , (unsigned int ( IterativeTrainer_wrapper::* )(  ) const)(&IterativeTrainer_wrapper::default_GetRandSeed) )    
        .def( 
            "Init"
            , (void ( IterativeTrainer_wrapper::* )(  ) )(&IterativeTrainer_wrapper::Init) )    
        .def( 
            "Initialize"
            , (void ( IterativeTrainer_wrapper::* )( ::gezi::Instances & ) )(&IterativeTrainer_wrapper::Initialize)
            , ( bp::arg("instances") ) )    
        .def( 
            "RestoreBestStage"
            , (void ( IterativeTrainer_wrapper::* )(  ) )(&IterativeTrainer_wrapper::RestoreBestStage) )    
        .def( 
            "StoreBestStage"
            , (void ( IterativeTrainer_wrapper::* )(  ) )(&IterativeTrainer_wrapper::StoreBestStage) )    
        .def( 
            "Train"
            , (void ( ::gezi::Trainer::* )( ::gezi::Instances & ) )(&::gezi::Trainer::Train)
            , (void ( IterativeTrainer_wrapper::* )( ::gezi::Instances & ) )(&IterativeTrainer_wrapper::default_Train)
            , ( bp::arg("instances") ) )    
        .def( 
            "Train"
            , (void ( ::gezi::ValidatingTrainer::* )( ::gezi::Instances &,::std::vector< gezi::Instances > &,::std::vector< boost::shared_ptr<gezi::Evaluator> > & ) )(&::gezi::ValidatingTrainer::Train)
            , (void ( IterativeTrainer_wrapper::* )( ::gezi::Instances &,::std::vector< gezi::Instances > &,::std::vector< boost::shared_ptr<gezi::Evaluator> > & ) )(&IterativeTrainer_wrapper::default_Train)
            , ( bp::arg("instances"), bp::arg("validationInstances"), bp::arg("evaluators") ) )    
        .def( 
            "TryInitializeNormalizer"
            , (void ( ::gezi::Trainer::* )( ::gezi::Instances &,bool ) )(&::gezi::Trainer::TryInitializeNormalizer)
            , (void ( IterativeTrainer_wrapper::* )( ::gezi::Instances &,bool ) )(&IterativeTrainer_wrapper::default_TryInitializeNormalizer)
            , ( bp::arg("instances"), bp::arg("isStreaming") ) );

    { //::gezi::Predictor
        typedef bp::class_< Predictor_wrapper > Predictor_exposer_t;
        Predictor_exposer_t Predictor_exposer = Predictor_exposer_t( "Predictor", bp::init< >() );
        bp::scope Predictor_scope( Predictor_exposer );
        Predictor_exposer.def( bp::init< gezi::NormalizerPtr, gezi::CalibratorPtr, gezi::FeatureNamesVector const & >(( bp::arg("normalizer"), bp::arg("calibrator"), bp::arg("featureNames") )) );
        Predictor_exposer.def( bp::init< gezi::CalibratorPtr, gezi::FeatureNamesVector const & >(( bp::arg("calibrator"), bp::arg("featureNames") )) );
        Predictor_exposer.def( bp::init< gezi::FeatureNamesVector const & >(( bp::arg("featureNames") )) );
        bp::implicitly_convertible< gezi::FeatureNamesVector const &, gezi::Predictor >();
        { //::gezi::Predictor::GetCalibrator
        
            typedef ::gezi::CalibratorPtr & ( ::gezi::Predictor::*GetCalibrator_function_type )(  ) ;
            
            Predictor_exposer.def( 
                "GetCalibrator"
                , GetCalibrator_function_type( &::gezi::Predictor::GetCalibrator )
                    /* undefined call policies */ );
        
        }
        { //::gezi::Predictor::GetNormalizer
        
            typedef ::gezi::NormalizerPtr & ( ::gezi::Predictor::*GetNormalizer_function_type )(  ) ;
            
            Predictor_exposer.def( 
                "GetNormalizer"
                , GetNormalizer_function_type( &::gezi::Predictor::GetNormalizer )
                    /* undefined call policies */ );
        
        }
        { //::gezi::Predictor::GetParam
        
            typedef ::std::string ( ::gezi::Predictor::*GetParam_function_type )(  ) ;
            
            Predictor_exposer.def( 
                "GetParam"
                , GetParam_function_type( &::gezi::Predictor::GetParam ) );
        
        }
        { //::gezi::Predictor::GetPredictionKind
        
            typedef ::gezi::PredictionKind ( ::gezi::Predictor::*GetPredictionKind_function_type )(  ) ;
            typedef ::gezi::PredictionKind ( Predictor_wrapper::*default_GetPredictionKind_function_type )(  ) ;
            
            Predictor_exposer.def( 
                "GetPredictionKind"
                , GetPredictionKind_function_type(&::gezi::Predictor::GetPredictionKind)
                , default_GetPredictionKind_function_type(&Predictor_wrapper::default_GetPredictionKind) );
        
        }
        { //::gezi::Predictor::Load
        
            typedef void ( ::gezi::Predictor::*Load_function_type )( ::std::string ) ;
            typedef void ( Predictor_wrapper::*default_Load_function_type )( ::std::string ) ;
            
            Predictor_exposer.def( 
                "Load"
                , Load_function_type(&::gezi::Predictor::Load)
                , default_Load_function_type(&Predictor_wrapper::default_Load)
                , ( bp::arg("path") ) );
        
        }
        { //::gezi::Predictor::LoadBin
        
            typedef void ( ::gezi::Predictor::*LoadBin_function_type )( ::std::string ) ;
            typedef void ( Predictor_wrapper::*default_LoadBin_function_type )( ::std::string ) ;
            
            Predictor_exposer.def( 
                "LoadBin"
                , LoadBin_function_type(&::gezi::Predictor::LoadBin)
                , default_LoadBin_function_type(&Predictor_wrapper::default_LoadBin)
                , ( bp::arg("path") ) );
        
        }
        { //::gezi::Predictor::LoadNormalizerAndCalibrator
        
            typedef void ( ::gezi::Predictor::*LoadNormalizerAndCalibrator_function_type )( ::std::string ) ;
            
            Predictor_exposer.def( 
                "LoadNormalizerAndCalibrator"
                , LoadNormalizerAndCalibrator_function_type( &::gezi::Predictor::LoadNormalizerAndCalibrator )
                , ( bp::arg("path") ) );
        
        }
        { //::gezi::Predictor::LoadText
        
            typedef void ( ::gezi::Predictor::*LoadText_function_type )( ::std::string ) ;
            typedef void ( Predictor_wrapper::*default_LoadText_function_type )( ::std::string ) ;
            
            Predictor_exposer.def( 
                "LoadText"
                , LoadText_function_type(&::gezi::Predictor::LoadText)
                , default_LoadText_function_type(&Predictor_wrapper::default_LoadText)
                , ( bp::arg("path") ) );
        
        }
        { //::gezi::Predictor::LoadText_
        
            typedef void ( ::gezi::Predictor::*LoadText__function_type )( ::std::string ) ;
            typedef void ( Predictor_wrapper::*default_LoadText__function_type )( ::std::string ) ;
            
            Predictor_exposer.def( 
                "LoadText_"
                , LoadText__function_type(&::gezi::Predictor::LoadText_)
                , default_LoadText__function_type(&Predictor_wrapper::default_LoadText_)
                , ( bp::arg("file") ) );
        
        }
        { //::gezi::Predictor::Load_
        
            typedef void ( ::gezi::Predictor::*Load__function_type )( ::std::string ) ;
            typedef void ( Predictor_wrapper::*default_Load__function_type )( ::std::string ) ;
            
            Predictor_exposer.def( 
                "Load_"
                , Load__function_type(&::gezi::Predictor::Load_)
                , default_Load__function_type(&Predictor_wrapper::default_Load_)
                , ( bp::arg("file") ) );
        
        }
        { //::gezi::Predictor::Margin
        
            typedef ::Float ( Predictor_wrapper::*Margin_function_type )( ::gezi::Vector & ) ;
            
            Predictor_exposer.def( 
                "Margin"
                , Margin_function_type( &Predictor_wrapper::Margin )
                , ( bp::arg("features") ) );
        
        }
        { //::gezi::Predictor::Name
        
            typedef ::std::string ( ::gezi::Predictor::*Name_function_type )(  ) ;
            typedef ::std::string ( Predictor_wrapper::*default_Name_function_type )(  ) ;
            
            Predictor_exposer.def( 
                "Name"
                , Name_function_type(&::gezi::Predictor::Name)
                , default_Name_function_type(&Predictor_wrapper::default_Name) );
        
        }
        { //::gezi::Predictor::Output
        
            typedef ::Float ( ::gezi::Predictor::*Output_function_type )( ::gezi::Instance & ) ;
            
            Predictor_exposer.def( 
                "Output"
                , Output_function_type( &::gezi::Predictor::Output )
                , ( bp::arg("instance") ) );
        
        }
        { //::gezi::Predictor::Output
        
            typedef ::Float ( ::gezi::Predictor::*Output_function_type )( ::gezi::InstancePtr ) ;
            typedef ::Float ( Predictor_wrapper::*default_Output_function_type )( ::gezi::InstancePtr ) ;
            
            Predictor_exposer.def( 
                "Output"
                , Output_function_type(&::gezi::Predictor::Output)
                , default_Output_function_type(&Predictor_wrapper::default_Output)
                , ( bp::arg("instance") ) );
        
        }
        { //::gezi::Predictor::Output
        
            typedef ::Float ( ::gezi::Predictor::*Output_function_type )( ::gezi::Vector & ) ;
            
            Predictor_exposer.def( 
                "Output"
                , Output_function_type( &::gezi::Predictor::Output )
                , ( bp::arg("features") ) );
        
        }
        { //::gezi::Predictor::Output
        
            typedef ::Float ( ::gezi::Predictor::*Output_function_type )( ::Fvec & ) ;
            
            Predictor_exposer.def( 
                "Output"
                , Output_function_type( &::gezi::Predictor::Output )
                , ( bp::arg("values") ) );
        
        }
        { //::gezi::Predictor::Output
        
            typedef ::Float ( ::gezi::Predictor::*Output_function_type )( ::ivec &,::Fvec & ) ;
            
            Predictor_exposer.def( 
                "Output"
                , Output_function_type( &::gezi::Predictor::Output )
                , ( bp::arg("indices"), bp::arg("values") ) );
        
        }
        { //::gezi::Predictor::Output
        
            typedef ::Float ( ::gezi::Predictor::*Output_function_type )( ::std::string ) ;
            typedef ::Float ( Predictor_wrapper::*default_Output_function_type )( ::std::string ) ;
            
            Predictor_exposer.def( 
                "Output"
                , Output_function_type(&::gezi::Predictor::Output)
                , default_Output_function_type(&Predictor_wrapper::default_Output)
                , ( bp::arg("line") ) );
        
        }
        { //::gezi::Predictor::Path
        
            typedef ::std::string ( ::gezi::Predictor::*Path_function_type )(  ) ;
            
            Predictor_exposer.def( 
                "Path"
                , Path_function_type( &::gezi::Predictor::Path ) );
        
        }
        { //::gezi::Predictor::Predict
        
            typedef ::Float ( ::gezi::Predictor::*Predict_function_type )( ::gezi::Instance & ) ;
            
            Predictor_exposer.def( 
                "Predict"
                , Predict_function_type( &::gezi::Predictor::Predict )
                , ( bp::arg("instance") ) );
        
        }
        { //::gezi::Predictor::Predict
        
            typedef ::Float ( ::gezi::Predictor::*Predict_function_type )( ::Fvec & ) ;
            
            Predictor_exposer.def( 
                "Predict"
                , Predict_function_type( &::gezi::Predictor::Predict )
                , ( bp::arg("values") ) );
        
        }
        { //::gezi::Predictor::Predict
        
            typedef ::Float ( ::gezi::Predictor::*Predict_function_type )( ::ivec &,::Fvec & ) ;
            
            Predictor_exposer.def( 
                "Predict"
                , Predict_function_type( &::gezi::Predictor::Predict )
                , ( bp::arg("indices"), bp::arg("values") ) );
        
        }
        { //::gezi::Predictor::Predict
        
            typedef ::Float ( ::gezi::Predictor::*Predict_function_type )( ::std::string,::Float & ) ;
            typedef ::Float ( Predictor_wrapper::*default_Predict_function_type )( ::std::string,::Float & ) ;
            
            Predictor_exposer.def( 
                "Predict"
                , Predict_function_type(&::gezi::Predictor::Predict)
                , default_Predict_function_type(&Predictor_wrapper::default_Predict)
                , ( bp::arg("line"), bp::arg("output") ) );
        
        }
        { //::gezi::Predictor::Predict
        
            typedef ::Float ( ::gezi::Predictor::*Predict_function_type )( ::gezi::InstancePtr ) ;
            typedef ::Float ( Predictor_wrapper::*default_Predict_function_type )( ::gezi::InstancePtr ) ;
            
            Predictor_exposer.def( 
                "Predict"
                , Predict_function_type(&::gezi::Predictor::Predict)
                , default_Predict_function_type(&Predictor_wrapper::default_Predict)
                , ( bp::arg("instance") ) );
        
        }
        { //::gezi::Predictor::Predict
        
            typedef ::Float ( ::gezi::Predictor::*Predict_function_type )( ::gezi::Vector & ) ;
            typedef ::Float ( Predictor_wrapper::*default_Predict_function_type )( ::gezi::Vector & ) ;
            
            Predictor_exposer.def( 
                "Predict"
                , Predict_function_type(&::gezi::Predictor::Predict)
                , default_Predict_function_type(&Predictor_wrapper::default_Predict)
                , ( bp::arg("features") ) );
        
        }
        { //::gezi::Predictor::Predict
        
            typedef ::Float ( ::gezi::Predictor::*Predict_function_type )( ::gezi::Instance &,::Float & ) ;
            
            Predictor_exposer.def( 
                "Predict"
                , Predict_function_type( &::gezi::Predictor::Predict )
                , ( bp::arg("instance"), bp::arg("output") ) );
        
        }
        { //::gezi::Predictor::Predict
        
            typedef ::Float ( ::gezi::Predictor::*Predict_function_type )( ::gezi::InstancePtr,::Float & ) ;
            typedef ::Float ( Predictor_wrapper::*default_Predict_function_type )( ::gezi::InstancePtr,::Float & ) ;
            
            Predictor_exposer.def( 
                "Predict"
                , Predict_function_type(&::gezi::Predictor::Predict)
                , default_Predict_function_type(&Predictor_wrapper::default_Predict)
                , ( bp::arg("instance"), bp::arg("output") ) );
        
        }
        { //::gezi::Predictor::Predict
        
            typedef ::Float ( ::gezi::Predictor::*Predict_function_type )( ::gezi::Vector &,::Float & ) ;
            
            Predictor_exposer.def( 
                "Predict"
                , Predict_function_type( &::gezi::Predictor::Predict )
                , ( bp::arg("features"), bp::arg("output") ) );
        
        }
        { //::gezi::Predictor::Predict
        
            typedef ::Float ( ::gezi::Predictor::*Predict_function_type )( ::Fvec &,::Float & ) ;
            
            Predictor_exposer.def( 
                "Predict"
                , Predict_function_type( &::gezi::Predictor::Predict )
                , ( bp::arg("values"), bp::arg("output") ) );
        
        }
        { //::gezi::Predictor::Predict
        
            typedef ::Float ( ::gezi::Predictor::*Predict_function_type )( ::ivec &,::Fvec &,::Float & ) ;
            
            Predictor_exposer.def( 
                "Predict"
                , Predict_function_type( &::gezi::Predictor::Predict )
                , ( bp::arg("indices"), bp::arg("values"), bp::arg("output") ) );
        
        }
        { //::gezi::Predictor::Predict
        
            typedef ::Float ( ::gezi::Predictor::*Predict_function_type )( ::std::map< int, double > const & ) ;
            
            Predictor_exposer.def( 
                "Predict"
                , Predict_function_type( &::gezi::Predictor::Predict )
                , ( bp::arg("m") ) );
        
        }
        { //::gezi::Predictor::Predict
        
            typedef ::Float ( ::gezi::Predictor::*Predict_function_type )( ::std::map< int, double > const &,::Float & ) ;
            
            Predictor_exposer.def( 
                "Predict"
                , Predict_function_type( &::gezi::Predictor::Predict )
                , ( bp::arg("m"), bp::arg("output") ) );
        
        }
        { //::gezi::Predictor::Predict
        
            typedef ::Float ( ::gezi::Predictor::*Predict_function_type )( ::Float ) ;
            
            Predictor_exposer.def( 
                "Predict"
                , Predict_function_type( &::gezi::Predictor::Predict )
                , ( bp::arg("output") ) );
        
        }
        { //::gezi::Predictor::Save
        
            typedef void ( ::gezi::Predictor::*Save_function_type )(  ) ;
            typedef void ( Predictor_wrapper::*default_Save_function_type )(  ) ;
            
            Predictor_exposer.def( 
                "Save"
                , Save_function_type(&::gezi::Predictor::Save)
                , default_Save_function_type(&Predictor_wrapper::default_Save) );
        
        }
        { //::gezi::Predictor::Save
        
            typedef void ( ::gezi::Predictor::*Save_function_type )( ::std::string ) ;
            typedef void ( Predictor_wrapper::*default_Save_function_type )( ::std::string ) ;
            
            Predictor_exposer.def( 
                "Save"
                , Save_function_type(&::gezi::Predictor::Save)
                , default_Save_function_type(&Predictor_wrapper::default_Save)
                , ( bp::arg("path") ) );
        
        }
        { //::gezi::Predictor::SaveBin
        
            typedef void ( ::gezi::Predictor::*SaveBin_function_type )( ::std::string ) ;
            typedef void ( Predictor_wrapper::*default_SaveBin_function_type )( ::std::string ) ;
            
            Predictor_exposer.def( 
                "SaveBin"
                , SaveBin_function_type(&::gezi::Predictor::SaveBin)
                , default_SaveBin_function_type(&Predictor_wrapper::default_SaveBin)
                , ( bp::arg("path") ) );
        
        }
        { //::gezi::Predictor::SaveCode
        
            typedef void ( ::gezi::Predictor::*SaveCode_function_type )( ::std::string ) ;
            typedef void ( Predictor_wrapper::*default_SaveCode_function_type )( ::std::string ) ;
            
            Predictor_exposer.def( 
                "SaveCode"
                , SaveCode_function_type(&::gezi::Predictor::SaveCode)
                , default_SaveCode_function_type(&Predictor_wrapper::default_SaveCode)
                , ( bp::arg("codeTypeStr")="cpp" ) );
        
        }
        { //::gezi::Predictor::SaveCode_
        
            typedef void ( ::gezi::Predictor::*SaveCode__function_type )( ::std::string,::gezi::CodeType ) ;
            typedef void ( Predictor_wrapper::*default_SaveCode__function_type )( ::std::string,::gezi::CodeType ) ;
            
            Predictor_exposer.def( 
                "SaveCode_"
                , SaveCode__function_type(&::gezi::Predictor::SaveCode_)
                , default_SaveCode__function_type(&Predictor_wrapper::default_SaveCode_)
                , ( bp::arg("file"), bp::arg("codeType") ) );
        
        }
        { //::gezi::Predictor::SaveFeaturesGain
        
            typedef void ( ::gezi::Predictor::*SaveFeaturesGain_function_type )( int ) ;
            
            Predictor_exposer.def( 
                "SaveFeaturesGain"
                , SaveFeaturesGain_function_type( &::gezi::Predictor::SaveFeaturesGain )
                , ( bp::arg("topNum")=(int)(0) ) );
        
        }
        { //::gezi::Predictor::SaveJson
        
            typedef void ( ::gezi::Predictor::*SaveJson_function_type )( ::std::string ) ;
            typedef void ( Predictor_wrapper::*default_SaveJson_function_type )( ::std::string ) ;
            
            Predictor_exposer.def( 
                "SaveJson"
                , SaveJson_function_type(&::gezi::Predictor::SaveJson)
                , default_SaveJson_function_type(&Predictor_wrapper::default_SaveJson)
                , ( bp::arg("file") ) );
        
        }
        { //::gezi::Predictor::SaveJson
        
            typedef void ( ::gezi::Predictor::*SaveJson_function_type )(  ) ;
            
            Predictor_exposer.def( 
                "SaveJson"
                , SaveJson_function_type( &::gezi::Predictor::SaveJson ) );
        
        }
        { //::gezi::Predictor::SaveJson_
        
            typedef void ( ::gezi::Predictor::*SaveJson__function_type )( ::std::string ) ;
            typedef void ( Predictor_wrapper::*default_SaveJson__function_type )( ::std::string ) ;
            
            Predictor_exposer.def( 
                "SaveJson_"
                , SaveJson__function_type(&::gezi::Predictor::SaveJson_)
                , default_SaveJson__function_type(&Predictor_wrapper::default_SaveJson_)
                , ( bp::arg("file") ) );
        
        }
        { //::gezi::Predictor::SaveText
        
            typedef void ( ::gezi::Predictor::*SaveText_function_type )( ::std::string ) ;
            typedef void ( Predictor_wrapper::*default_SaveText_function_type )( ::std::string ) ;
            
            Predictor_exposer.def( 
                "SaveText"
                , SaveText_function_type(&::gezi::Predictor::SaveText)
                , default_SaveText_function_type(&Predictor_wrapper::default_SaveText)
                , ( bp::arg("file") ) );
        
        }
        { //::gezi::Predictor::SaveText
        
            typedef void ( ::gezi::Predictor::*SaveText_function_type )(  ) ;
            
            Predictor_exposer.def( 
                "SaveText"
                , SaveText_function_type( &::gezi::Predictor::SaveText ) );
        
        }
        { //::gezi::Predictor::SaveText_
        
            typedef void ( ::gezi::Predictor::*SaveText__function_type )( ::std::string ) ;
            typedef void ( Predictor_wrapper::*default_SaveText__function_type )( ::std::string ) ;
            
            Predictor_exposer.def( 
                "SaveText_"
                , SaveText__function_type(&::gezi::Predictor::SaveText_)
                , default_SaveText__function_type(&Predictor_wrapper::default_SaveText_)
                , ( bp::arg("file") ) );
        
        }
        { //::gezi::Predictor::SaveXml
        
            typedef void ( ::gezi::Predictor::*SaveXml_function_type )( ::std::string ) ;
            typedef void ( Predictor_wrapper::*default_SaveXml_function_type )( ::std::string ) ;
            
            Predictor_exposer.def( 
                "SaveXml"
                , SaveXml_function_type(&::gezi::Predictor::SaveXml)
                , default_SaveXml_function_type(&Predictor_wrapper::default_SaveXml)
                , ( bp::arg("file") ) );
        
        }
        { //::gezi::Predictor::SaveXml
        
            typedef void ( ::gezi::Predictor::*SaveXml_function_type )(  ) ;
            
            Predictor_exposer.def( 
                "SaveXml"
                , SaveXml_function_type( &::gezi::Predictor::SaveXml ) );
        
        }
        { //::gezi::Predictor::SaveXml_
        
            typedef void ( ::gezi::Predictor::*SaveXml__function_type )( ::std::string ) ;
            typedef void ( Predictor_wrapper::*default_SaveXml__function_type )( ::std::string ) ;
            
            Predictor_exposer.def( 
                "SaveXml_"
                , SaveXml__function_type(&::gezi::Predictor::SaveXml_)
                , default_SaveXml__function_type(&Predictor_wrapper::default_SaveXml_)
                , ( bp::arg("file") ) );
        
        }
        { //::gezi::Predictor::Save_
        
            typedef void ( ::gezi::Predictor::*Save__function_type )( ::std::string ) ;
            typedef void ( Predictor_wrapper::*default_Save__function_type )( ::std::string ) ;
            
            Predictor_exposer.def( 
                "Save_"
                , Save__function_type(&::gezi::Predictor::Save_)
                , default_Save__function_type(&Predictor_wrapper::default_Save_)
                , ( bp::arg("file") ) );
        
        }
        { //::gezi::Predictor::SetCalibrator
        
            typedef void ( ::gezi::Predictor::*SetCalibrator_function_type )( ::gezi::CalibratorPtr ) ;
            
            Predictor_exposer.def( 
                "SetCalibrator"
                , SetCalibrator_function_type( &::gezi::Predictor::SetCalibrator )
                , ( bp::arg("calibrator") ) );
        
        }
        { //::gezi::Predictor::SetFeatureGainVec
        
            typedef void ( ::gezi::Predictor::*SetFeatureGainVec_function_type )( ::std::vector< double > const & ) ;
            
            Predictor_exposer.def( 
                "SetFeatureGainVec"
                , SetFeatureGainVec_function_type( &::gezi::Predictor::SetFeatureGainVec )
                , ( bp::arg("featureGainVec") ) );
        
        }
        { //::gezi::Predictor::SetFeatureNames
        
            typedef void ( ::gezi::Predictor::*SetFeatureNames_function_type )( ::gezi::FeatureNamesVector const & ) ;
            
            Predictor_exposer.def( 
                "SetFeatureNames"
                , SetFeatureNames_function_type( &::gezi::Predictor::SetFeatureNames )
                , ( bp::arg("featureNames") ) );
        
        }
        { //::gezi::Predictor::SetLoadNormalizerAndCalibrator
        
            typedef void ( *SetLoadNormalizerAndCalibrator_function_type )( bool );
            
            Predictor_exposer.def( 
                "SetLoadNormalizerAndCalibrator"
                , SetLoadNormalizerAndCalibrator_function_type( &::gezi::Predictor::SetLoadNormalizerAndCalibrator )
                , ( bp::arg("loadNormalizerAndCalibrator_")=(bool)(true) ) );
        
        }
        { //::gezi::Predictor::SetNormalizeCopy
        
            typedef ::gezi::Predictor & ( ::gezi::Predictor::*SetNormalizeCopy_function_type )( bool ) ;
            
            Predictor_exposer.def( 
                "SetNormalizeCopy"
                , SetNormalizeCopy_function_type( &::gezi::Predictor::SetNormalizeCopy )
                , ( bp::arg("normalizeCopy")=(bool)(true) )
                    /* undefined call policies */ );
        
        }
        { //::gezi::Predictor::SetNormalizer
        
            typedef void ( ::gezi::Predictor::*SetNormalizer_function_type )( ::gezi::NormalizerPtr ) ;
            
            Predictor_exposer.def( 
                "SetNormalizer"
                , SetNormalizer_function_type( &::gezi::Predictor::SetNormalizer )
                , ( bp::arg("normalizer") ) );
        
        }
        { //::gezi::Predictor::SetParam
        
            typedef ::gezi::Predictor & ( ::gezi::Predictor::*SetParam_function_type )( ::std::string ) ;
            
            Predictor_exposer.def( 
                "SetParam"
                , SetParam_function_type( &::gezi::Predictor::SetParam )
                , ( bp::arg("param") )
                    /* undefined call policies */ );
        
        }
        { //::gezi::Predictor::SetPath
        
            typedef ::gezi::Predictor & ( ::gezi::Predictor::*SetPath_function_type )( ::std::string ) ;
            
            Predictor_exposer.def( 
                "SetPath"
                , SetPath_function_type( &::gezi::Predictor::SetPath )
                , ( bp::arg("path") )
                    /* undefined call policies */ );
        
        }
        { //::gezi::Predictor::SetSaveCalibratorText
        
            typedef ::gezi::Predictor & ( ::gezi::Predictor::*SetSaveCalibratorText_function_type )( bool ) ;
            
            Predictor_exposer.def( 
                "SetSaveCalibratorText"
                , SetSaveCalibratorText_function_type( &::gezi::Predictor::SetSaveCalibratorText )
                , ( bp::arg("setSave")=(bool)(true) )
                    /* undefined call policies */ );
        
        }
        { //::gezi::Predictor::SetSaveNormalizerText
        
            typedef ::gezi::Predictor & ( ::gezi::Predictor::*SetSaveNormalizerText_function_type )( bool ) ;
            
            Predictor_exposer.def( 
                "SetSaveNormalizerText"
                , SetSaveNormalizerText_function_type( &::gezi::Predictor::SetSaveNormalizerText )
                , ( bp::arg("setSave")=(bool)(true) )
                    /* undefined call policies */ );
        
        }
        { //::gezi::Predictor::ThirdModelName
        
            typedef ::std::string ( *ThirdModelName_function_type )( ::std::string );
            
            Predictor_exposer.def( 
                "ThirdModelName"
                , ThirdModelName_function_type( &::gezi::Predictor::ThirdModelName )
                , ( bp::arg("file") ) );
        
        }
        { //::gezi::Predictor::ToFeaturesGainSummary
        
            typedef ::std::string ( ::gezi::Predictor::*ToFeaturesGainSummary_function_type )( int ) ;
            typedef ::std::string ( Predictor_wrapper::*default_ToFeaturesGainSummary_function_type )( int ) ;
            
            Predictor_exposer.def( 
                "ToFeaturesGainSummary"
                , ToFeaturesGainSummary_function_type(&::gezi::Predictor::ToFeaturesGainSummary)
                , default_ToFeaturesGainSummary_function_type(&Predictor_wrapper::default_ToFeaturesGainSummary)
                , ( bp::arg("topNum")=(int)(0) ) );
        
        }
        { //::gezi::Predictor::ToGainSummary
        
            typedef ::std::string ( ::gezi::Predictor::*ToGainSummary_function_type )( ::gezi::Vector & ) ;
            typedef ::std::string ( Predictor_wrapper::*default_ToGainSummary_function_type )( ::gezi::Vector & ) ;
            
            Predictor_exposer.def( 
                "ToGainSummary"
                , ToGainSummary_function_type(&::gezi::Predictor::ToGainSummary)
                , default_ToGainSummary_function_type(&Predictor_wrapper::default_ToGainSummary)
                , ( bp::arg("features") ) );
        
        }
        { //::gezi::Predictor::ToNamedFeatures
        
            typedef ::std::map< std::string, double > ( ::gezi::Predictor::*ToNamedFeatures_function_type )( ::gezi::Vector const & ) ;
            
            Predictor_exposer.def( 
                "ToNamedFeatures"
                , ToNamedFeatures_function_type( &::gezi::Predictor::ToNamedFeatures )
                , ( bp::arg("features") ) );
        
        }
        Predictor_exposer.staticmethod( "SetLoadNormalizerAndCalibrator" );
        Predictor_exposer.staticmethod( "ThirdModelName" );
        bp::register_ptr_to_python< boost::shared_ptr< gezi::Predictor > >();
        bp::implicitly_convertible< boost::shared_ptr< gezi::Predictor >, boost::shared_ptr< gezi::LoadSave > >();
    }

    bp::class_< gezi::PredictorFactory >( "PredictorFactory" )    
        .def( 
            "CreatePredictor"
            , (::gezi::PredictorPtr (*)( ::std::string ))( &::gezi::PredictorFactory::CreatePredictor )
            , ( bp::arg("name") ) )    
        .def( 
            "CreatePredictor"
            , (::gezi::PredictorPtr (*)( ::std::string,::std::string ))( &::gezi::PredictorFactory::CreatePredictor )
            , ( bp::arg("name"), bp::arg("path") ) )    
        .def( 
            "CreatePredictorFromTextFormat"
            , (::gezi::PredictorPtr (*)( ::std::string,::std::string ))( &::gezi::PredictorFactory::CreatePredictorFromTextFormat )
            , ( bp::arg("name"), bp::arg("path") ) )    
        .def( 
            "LoadPredictor"
            , (::gezi::PredictorPtr (*)( ::std::string ))( &::gezi::PredictorFactory::LoadPredictor )
            , ( bp::arg("path") ) )    
        .def( 
            "LoadPredictors"
            , (::gezi::Predictors (*)( ::svec const & ))( &::gezi::PredictorFactory::LoadPredictors )
            , ( bp::arg("paths") ) )    
        .def( 
            "LoadTextPredictor"
            , (::gezi::PredictorPtr (*)( ::std::string ))( &::gezi::PredictorFactory::LoadTextPredictor )
            , ( bp::arg("path") ) )    
        .staticmethod( "CreatePredictor" )    
        .staticmethod( "CreatePredictorFromTextFormat" )    
        .staticmethod( "LoadPredictor" )    
        .staticmethod( "LoadPredictors" )    
        .staticmethod( "LoadTextPredictor" );

    bp::class_< gezi::PyFeatures, bp::bases< gezi::FeatureVector > >( "PyFeatures" );

    bp::class_< gezi::ValueIdentifer< double >, bp::bases< gezi::Identifer > >( "DoubleIdentifer" )    
        .def( 
            "Load"
            , (void ( ::gezi::ValueIdentifer<double>::* )( ::std::string ) )( &::gezi::ValueIdentifer< double >::Load )
            , ( bp::arg("file") ) )    
        .def( 
            "Save"
            , (void ( ::gezi::ValueIdentifer<double>::* )( ::std::string ) )( &::gezi::ValueIdentifer< double >::Save )
            , ( bp::arg("file") ) )    
        .def( 
            "get_value"
            , (double ( ::gezi::ValueIdentifer<double>::* )( ::std::string ) const)( &::gezi::ValueIdentifer< double >::get_value )
            , ( bp::arg("key") ) )    
        .def( 
            "load"
            , (bool ( ::gezi::ValueIdentifer<double>::* )( ::std::string,int,::std::string ) )( &::gezi::ValueIdentifer< double >::load )
            , ( bp::arg("file"), bp::arg("index")=(int)(1), bp::arg("sep")="\011" ) )    
        .def( 
            "value"
            , (double ( ::gezi::ValueIdentifer<double>::* )( int ) const)( &::gezi::ValueIdentifer< double >::value )
            , ( bp::arg("index") ) );

    bp::class_< gezi::PyHack_DoubleIdentifer, bp::bases< gezi::ValueIdentifer< double > > >( "PyHack_DoubleIdentifer" );

    bp::class_< gezi::ValueIdentifer< int >, bp::bases< gezi::Identifer > >( "IntIdentifer" )    
        .def( 
            "Load"
            , (void ( ::gezi::ValueIdentifer<int>::* )( ::std::string ) )( &::gezi::ValueIdentifer< int >::Load )
            , ( bp::arg("file") ) )    
        .def( 
            "Save"
            , (void ( ::gezi::ValueIdentifer<int>::* )( ::std::string ) )( &::gezi::ValueIdentifer< int >::Save )
            , ( bp::arg("file") ) )    
        .def( 
            "get_value"
            , (int ( ::gezi::ValueIdentifer<int>::* )( ::std::string ) const)( &::gezi::ValueIdentifer< int >::get_value )
            , ( bp::arg("key") ) )    
        .def( 
            "load"
            , (bool ( ::gezi::ValueIdentifer<int>::* )( ::std::string,int,::std::string ) )( &::gezi::ValueIdentifer< int >::load )
            , ( bp::arg("file"), bp::arg("index")=(int)(1), bp::arg("sep")="\011" ) )    
        .def( 
            "value"
            , (int ( ::gezi::ValueIdentifer<int>::* )( int ) const)( &::gezi::ValueIdentifer< int >::value )
            , ( bp::arg("index") ) );

    bp::class_< gezi::PyHack_IntIndentifer, bp::bases< gezi::ValueIdentifer< int > > >( "PyHack_IntIndentifer" );

    { //::gezi::TVector< int >
        typedef bp::class_< gezi::TVector< int > > IntArray_exposer_t;
        IntArray_exposer_t IntArray_exposer = IntArray_exposer_t( "IntArray", bp::init< >() );
        bp::scope IntArray_scope( IntArray_exposer );
        IntArray_exposer.def( bp::init< gezi::TVector< int > const & >(( bp::arg("arg0") )) );
        IntArray_exposer.def( bp::init< int >(( bp::arg("length_") )) );
        bp::implicitly_convertible< int, gezi::TVector< int > >();
        IntArray_exposer.def( bp::init< int, int >(( bp::arg("value_"), bp::arg("length_") )) );
        { //::gezi::TVector< int >::Add
        
            typedef gezi::TVector< int > exported_class_t;
            typedef void ( exported_class_t::*Add_function_type )( int ) ;
            
            IntArray_exposer.def( 
                "Add"
                , Add_function_type( &::gezi::TVector< int >::Add )
                , ( bp::arg("value") ) );
        
        }
        { //::gezi::TVector< int >::Add
        
            typedef gezi::TVector< int > exported_class_t;
            typedef void ( exported_class_t::*Add_function_type )( int,int ) ;
            
            IntArray_exposer.def( 
                "Add"
                , Add_function_type( &::gezi::TVector< int >::Add )
                , ( bp::arg("index"), bp::arg("value") ) );
        
        }
        { //::gezi::TVector< int >::CheckInvariants
        
            typedef gezi::TVector< int > exported_class_t;
            typedef void ( exported_class_t::*CheckInvariants_function_type )(  ) ;
            
            IntArray_exposer.def( 
                "CheckInvariants"
                , CheckInvariants_function_type( &::gezi::TVector< int >::CheckInvariants ) );
        
        }
        { //::gezi::TVector< int >::Clear
        
            typedef gezi::TVector< int > exported_class_t;
            typedef void ( exported_class_t::*Clear_function_type )(  ) ;
            
            IntArray_exposer.def( 
                "Clear"
                , Clear_function_type( &::gezi::TVector< int >::Clear ) );
        
        }
        { //::gezi::TVector< int >::Count
        
            typedef gezi::TVector< int > exported_class_t;
            typedef int ( exported_class_t::*Count_function_type )(  ) const;
            
            IntArray_exposer.def( 
                "Count"
                , Count_function_type( &::gezi::TVector< int >::Count ) );
        
        }
        { //::gezi::TVector< int >::DenseStr
        
            typedef gezi::TVector< int > exported_class_t;
            typedef ::std::string ( exported_class_t::*DenseStr_function_type )( ::std::string ) ;
            
            IntArray_exposer.def( 
                "DenseStr"
                , DenseStr_function_type( &::gezi::TVector< int >::DenseStr )
                , ( bp::arg("sep")="," ) );
        
        }
        { //::gezi::TVector< int >::Densify
        
            typedef gezi::TVector< int > exported_class_t;
            typedef void ( exported_class_t::*Densify_function_type )( ::Float ) ;
            
            IntArray_exposer.def( 
                "Densify"
                , Densify_function_type( &::gezi::TVector< int >::Densify )
                , ( bp::arg("maxSparsity") ) );
        
        }
        { //::gezi::TVector< int >::Densify
        
            typedef gezi::TVector< int > exported_class_t;
            typedef void ( exported_class_t::*Densify_function_type )(  ) ;
            
            IntArray_exposer.def( 
                "Densify"
                , Densify_function_type( &::gezi::TVector< int >::Densify ) );
        
        }
        { //::gezi::TVector< int >::Empty
        
            typedef gezi::TVector< int > exported_class_t;
            typedef bool ( exported_class_t::*Empty_function_type )(  ) const;
            
            IntArray_exposer.def( 
                "Empty"
                , Empty_function_type( &::gezi::TVector< int >::Empty ) );
        
        }
        { //::gezi::TVector< int >::Index
        
            typedef gezi::TVector< int > exported_class_t;
            typedef int ( exported_class_t::*Index_function_type )( int ) const;
            
            IntArray_exposer.def( 
                "Index"
                , Index_function_type( &::gezi::TVector< int >::Index )
                , ( bp::arg("index") ) );
        
        }
        { //::gezi::TVector< int >::Index
        
            typedef gezi::TVector< int > exported_class_t;
            typedef int ( exported_class_t::*Index_function_type )( int ) ;
            
            IntArray_exposer.def( 
                "Index"
                , Index_function_type( &::gezi::TVector< int >::Index )
                , ( bp::arg("index") ) );
        
        }
        { //::gezi::TVector< int >::Indices
        
            typedef gezi::TVector< int > exported_class_t;
            typedef ::std::vector< int > const & ( exported_class_t::*Indices_function_type )(  ) const;
            
            IntArray_exposer.def( 
                "Indices"
                , Indices_function_type( &::gezi::TVector< int >::Indices )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::gezi::TVector< int >::Indices
        
            typedef gezi::TVector< int > exported_class_t;
            typedef ::std::vector< int > & ( exported_class_t::*Indices_function_type )(  ) ;
            
            IntArray_exposer.def( 
                "Indices"
                , Indices_function_type( &::gezi::TVector< int >::Indices )
                    /* undefined call policies */ );
        
        }
        { //::gezi::TVector< int >::Init
        
            typedef gezi::TVector< int > exported_class_t;
            typedef void ( exported_class_t::*Init_function_type )( ::std::vector< int > & ) ;
            
            IntArray_exposer.def( 
                "Init"
                , Init_function_type( &::gezi::TVector< int >::Init )
                , ( bp::arg("values_") ) );
        
        }
        { //::gezi::TVector< int >::IsDense
        
            typedef gezi::TVector< int > exported_class_t;
            typedef bool ( exported_class_t::*IsDense_function_type )(  ) const;
            
            IntArray_exposer.def( 
                "IsDense"
                , IsDense_function_type( &::gezi::TVector< int >::IsDense ) );
        
        }
        { //::gezi::TVector< int >::IsSparse
        
            typedef gezi::TVector< int > exported_class_t;
            typedef bool ( exported_class_t::*IsSparse_function_type )(  ) const;
            
            IntArray_exposer.def( 
                "IsSparse"
                , IsSparse_function_type( &::gezi::TVector< int >::IsSparse ) );
        
        }
        { //::gezi::TVector< int >::Length
        
            typedef gezi::TVector< int > exported_class_t;
            typedef int ( exported_class_t::*Length_function_type )(  ) const;
            
            IntArray_exposer.def( 
                "Length"
                , Length_function_type( &::gezi::TVector< int >::Length ) );
        
        }
        { //::gezi::TVector< int >::MakeDense
        
            typedef gezi::TVector< int > exported_class_t;
            typedef void ( exported_class_t::*MakeDense_function_type )(  ) ;
            
            IntArray_exposer.def( 
                "MakeDense"
                , MakeDense_function_type( &::gezi::TVector< int >::MakeDense ) );
        
        }
        { //::gezi::TVector< int >::MakeSparse
        
            typedef gezi::TVector< int > exported_class_t;
            typedef void ( exported_class_t::*MakeSparse_function_type )(  ) ;
            
            IntArray_exposer.def( 
                "MakeSparse"
                , MakeSparse_function_type( &::gezi::TVector< int >::MakeSparse ) );
        
        }
        { //::gezi::TVector< int >::NumNonZeros
        
            typedef gezi::TVector< int > exported_class_t;
            typedef int ( exported_class_t::*NumNonZeros_function_type )(  ) ;
            
            IntArray_exposer.def( 
                "NumNonZeros"
                , NumNonZeros_function_type( &::gezi::TVector< int >::NumNonZeros ) );
        
        }
        { //::gezi::TVector< int >::PrepareDense
        
            typedef gezi::TVector< int > exported_class_t;
            typedef void ( exported_class_t::*PrepareDense_function_type )(  ) ;
            
            IntArray_exposer.def( 
                "PrepareDense"
                , PrepareDense_function_type( &::gezi::TVector< int >::PrepareDense ) );
        
        }
        { //::gezi::TVector< int >::SetLength
        
            typedef gezi::TVector< int > exported_class_t;
            typedef void ( exported_class_t::*SetLength_function_type )( int ) ;
            
            IntArray_exposer.def( 
                "SetLength"
                , SetLength_function_type( &::gezi::TVector< int >::SetLength )
                , ( bp::arg("length_") ) );
        
        }
        { //::gezi::TVector< int >::Sparsify
        
            typedef gezi::TVector< int > exported_class_t;
            typedef void ( exported_class_t::*Sparsify_function_type )( ::Float ) ;
            
            IntArray_exposer.def( 
                "Sparsify"
                , Sparsify_function_type( &::gezi::TVector< int >::Sparsify )
                , ( bp::arg("maxSparsity") ) );
        
        }
        { //::gezi::TVector< int >::Sparsify
        
            typedef gezi::TVector< int > exported_class_t;
            typedef void ( exported_class_t::*Sparsify_function_type )(  ) ;
            
            IntArray_exposer.def( 
                "Sparsify"
                , Sparsify_function_type( &::gezi::TVector< int >::Sparsify ) );
        
        }
        { //::gezi::TVector< int >::Str
        
            typedef gezi::TVector< int > exported_class_t;
            typedef ::std::string ( exported_class_t::*Str_function_type )( ::std::string ) ;
            
            IntArray_exposer.def( 
                "Str"
                , Str_function_type( &::gezi::TVector< int >::Str )
                , ( bp::arg("sep")="," ) );
        
        }
        { //::gezi::TVector< int >::Swap
        
            typedef gezi::TVector< int > exported_class_t;
            typedef void ( exported_class_t::*Swap_function_type )( ::gezi::TVector< int > & ) ;
            
            IntArray_exposer.def( 
                "Swap"
                , Swap_function_type( &::gezi::TVector< int >::Swap )
                , ( bp::arg("other") ) );
        
        }
        { //::gezi::TVector< int >::ToDense
        
            typedef gezi::TVector< int > exported_class_t;
            typedef void ( exported_class_t::*ToDense_function_type )( ::std::vector< int > & ) ;
            
            IntArray_exposer.def( 
                "ToDense"
                , ToDense_function_type( &::gezi::TVector< int >::ToDense )
                , ( bp::arg("values_") ) );
        
        }
        { //::gezi::TVector< int >::ToDense
        
            typedef gezi::TVector< int > exported_class_t;
            typedef void ( exported_class_t::*ToDense_function_type )(  ) ;
            
            IntArray_exposer.def( 
                "ToDense"
                , ToDense_function_type( &::gezi::TVector< int >::ToDense ) );
        
        }
        { //::gezi::TVector< int >::ToSparse
        
            typedef gezi::TVector< int > exported_class_t;
            typedef void ( exported_class_t::*ToSparse_function_type )(  ) ;
            
            IntArray_exposer.def( 
                "ToSparse"
                , ToSparse_function_type( &::gezi::TVector< int >::ToSparse ) );
        
        }
        { //::gezi::TVector< int >::Value
        
            typedef gezi::TVector< int > exported_class_t;
            typedef int ( exported_class_t::*Value_function_type )( int ) const;
            
            IntArray_exposer.def( 
                "Value"
                , Value_function_type( &::gezi::TVector< int >::Value )
                , ( bp::arg("index") ) );
        
        }
        { //::gezi::TVector< int >::Values
        
            typedef gezi::TVector< int > exported_class_t;
            typedef ::std::vector< int > const & ( exported_class_t::*Values_function_type )(  ) const;
            
            IntArray_exposer.def( 
                "Values"
                , Values_function_type( &::gezi::TVector< int >::Values )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::gezi::TVector< int >::Values
        
            typedef gezi::TVector< int > exported_class_t;
            typedef ::std::vector< int > & ( exported_class_t::*Values_function_type )(  ) ;
            
            IntArray_exposer.def( 
                "Values"
                , Values_function_type( &::gezi::TVector< int >::Values )
                    /* undefined call policies */ );
        
        }
        { //::gezi::TVector< int >::ZeroValue
        
            typedef gezi::TVector< int > exported_class_t;
            typedef int const ( exported_class_t::*ZeroValue_function_type )(  ) const;
            
            IntArray_exposer.def( 
                "ZeroValue"
                , ZeroValue_function_type( &::gezi::TVector< int >::ZeroValue ) );
        
        }
        { //::gezi::TVector< int >::empty
        
            typedef gezi::TVector< int > exported_class_t;
            typedef bool ( exported_class_t::*empty_function_type )(  ) const;
            
            IntArray_exposer.def( 
                "empty"
                , empty_function_type( &::gezi::TVector< int >::empty ) );
        
        }
        { //::gezi::TVector< int >::operator()
        
            typedef gezi::TVector< int > exported_class_t;
            typedef ::gezi::TVector< int > & ( exported_class_t::*__call___function_type )( int,int ) ;
            
            IntArray_exposer.def( 
                "__call__"
                , __call___function_type( &::gezi::TVector< int >::operator() )
                , ( bp::arg("index"), bp::arg("value") )
                    /* undefined call policies */ );
        
        }
        { //::gezi::TVector< int >::operator=
        
            typedef gezi::TVector< int > exported_class_t;
            typedef ::gezi::TVector< int > & ( exported_class_t::*assign_function_type )( ::gezi::TVector< int > const & ) ;
            
            IntArray_exposer.def( 
                "assign"
                , assign_function_type( &::gezi::TVector< int >::operator= )
                , ( bp::arg("arg0") )
                , bp::return_self< >() );
        
        }
        { //::gezi::TVector< int >::operator[]
        
            typedef gezi::TVector< int > exported_class_t;
            typedef int ( exported_class_t::*__getitem___function_type )( int ) const;
            
            IntArray_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::gezi::TVector< int >::operator[] )
                , ( bp::arg("i") ) );
        
        }
        { //::gezi::TVector< int >::size
        
            typedef gezi::TVector< int > exported_class_t;
            typedef int ( exported_class_t::*size_function_type )(  ) const;
            
            IntArray_exposer.def( 
                "size"
                , size_function_type( &::gezi::TVector< int >::size ) );
        
        }
        { //::gezi::TVector< int >::str
        
            typedef gezi::TVector< int > exported_class_t;
            typedef ::std::string ( exported_class_t::*str_function_type )( ::std::string ) ;
            
            IntArray_exposer.def( 
                "str"
                , str_function_type( &::gezi::TVector< int >::str )
                , ( bp::arg("sep")="," ) );
        
        }
        IntArray_exposer.def_readwrite( "indices", &gezi::TVector< int >::indices );
        IntArray_exposer.def_readwrite( "keepDense", &gezi::TVector< int >::keepDense );
        IntArray_exposer.def_readwrite( "keepSparse", &gezi::TVector< int >::keepSparse );
        IntArray_exposer.def_readwrite( "normalized", &gezi::TVector< int >::normalized );
        IntArray_exposer.def_readwrite( "numNonZeros", &gezi::TVector< int >::numNonZeros );
        IntArray_exposer.def_readwrite( "sparsityRatio", &gezi::TVector< int >::sparsityRatio );
        IntArray_exposer.def_readwrite( "values", &gezi::TVector< int >::values );
    }

    bp::class_< gezi::PyIntArray, bp::bases< gezi::TVector< int > > >( "PyIntArray" );

    { //::gezi::WeightVector
        typedef bp::class_< gezi::WeightVector, bp::bases< gezi::Vector > > WeightVector_exposer_t;
        WeightVector_exposer_t WeightVector_exposer = WeightVector_exposer_t( "WeightVector", bp::init< >() );
        bp::scope WeightVector_scope( WeightVector_exposer );
        WeightVector_exposer.def( bp::init< int >(( bp::arg("length_") )) );
        bp::implicitly_convertible< int, gezi::WeightVector >();
        WeightVector_exposer.def( bp::init< int, Float >(( bp::arg("length_"), bp::arg("val") )) );
        { //::gezi::WeightVector::Add
        
            typedef void ( ::gezi::WeightVector::*Add_function_type )( ::gezi::Vector const & ) ;
            
            WeightVector_exposer.def( 
                "Add"
                , Add_function_type( &::gezi::WeightVector::Add )
                , ( bp::arg("other") ) );
        
        }
        { //::gezi::WeightVector::AddScale
        
            typedef void ( ::gezi::WeightVector::*AddScale_function_type )( ::gezi::Vector const &,::Float ) ;
            
            WeightVector_exposer.def( 
                "AddScale"
                , AddScale_function_type( &::gezi::WeightVector::AddScale )
                , ( bp::arg("other"), bp::arg("scale") ) );
        
        }
        { //::gezi::WeightVector::AddSparse
        
            typedef void ( ::gezi::WeightVector::*AddSparse_function_type )( ::gezi::Vector const & ) ;
            
            WeightVector_exposer.def( 
                "AddSparse"
                , AddSparse_function_type( &::gezi::WeightVector::AddSparse )
                , ( bp::arg("other") ) );
        
        }
        { //::gezi::WeightVector::Init
        
            typedef void ( ::gezi::WeightVector::*Init_function_type )( int,::Float ) ;
            
            WeightVector_exposer.def( 
                "Init"
                , Init_function_type( &::gezi::WeightVector::Init )
                , ( bp::arg("length_"), bp::arg("val") ) );
        
        }
        { //::gezi::WeightVector::Norm
        
            typedef ::Float ( ::gezi::WeightVector::*Norm_function_type )(  ) ;
            
            WeightVector_exposer.def( 
                "Norm"
                , Norm_function_type( &::gezi::WeightVector::Norm ) );
        
        }
        { //::gezi::WeightVector::Resize
        
            typedef void ( ::gezi::WeightVector::*Resize_function_type )( int,::Float ) ;
            
            WeightVector_exposer.def( 
                "Resize"
                , Resize_function_type( &::gezi::WeightVector::Resize )
                , ( bp::arg("length_"), bp::arg("value_")=0 ) );
        
        }
        { //::gezi::WeightVector::ScaleBy
        
            typedef void ( ::gezi::WeightVector::*ScaleBy_function_type )( ::Float ) ;
            
            WeightVector_exposer.def( 
                "ScaleBy"
                , ScaleBy_function_type( &::gezi::WeightVector::ScaleBy )
                , ( bp::arg("scalingFactor") ) );
        
        }
        { //::gezi::WeightVector::ScaleToOne
        
            typedef void ( ::gezi::WeightVector::*ScaleToOne_function_type )(  ) ;
            
            WeightVector_exposer.def( 
                "ScaleToOne"
                , ScaleToOne_function_type( &::gezi::WeightVector::ScaleToOne ) );
        
        }
        { //::gezi::WeightVector::SetLength
        
            typedef void ( ::gezi::WeightVector::*SetLength_function_type )( int ) ;
            
            WeightVector_exposer.def( 
                "SetLength"
                , SetLength_function_type( &::gezi::WeightVector::SetLength )
                , ( bp::arg("length_") ) );
        
        }
        { //::gezi::WeightVector::SquaredNorm
        
            typedef ::Float ( ::gezi::WeightVector::*SquaredNorm_function_type )(  ) const;
            
            WeightVector_exposer.def( 
                "SquaredNorm"
                , SquaredNorm_function_type( &::gezi::WeightVector::SquaredNorm ) );
        
        }
        { //::gezi::WeightVector::ToVector
        
            typedef ::gezi::Vector ( ::gezi::WeightVector::*ToVector_function_type )(  ) ;
            
            WeightVector_exposer.def( 
                "ToVector"
                , ToVector_function_type( &::gezi::WeightVector::ToVector ) );
        
        }
        { //::gezi::WeightVector::Value
        
            typedef ::Float ( ::gezi::WeightVector::*Value_function_type )( int ) const;
            
            WeightVector_exposer.def( 
                "Value"
                , Value_function_type( &::gezi::WeightVector::Value )
                , ( bp::arg("index") ) );
        
        }
        { //::gezi::WeightVector::dot
        
            typedef ::Float ( ::gezi::WeightVector::*dot_function_type )( ::gezi::Vector const & ) const;
            
            WeightVector_exposer.def( 
                "dot"
                , dot_function_type( &::gezi::WeightVector::dot )
                , ( bp::arg("other") ) );
        
        }
        { //::gezi::WeightVector::dot
        
            typedef ::Float ( ::gezi::WeightVector::*dot_function_type )( ::gezi::Vector const &,::Float ) const;
            
            WeightVector_exposer.def( 
                "dot"
                , dot_function_type( &::gezi::WeightVector::dot )
                , ( bp::arg("other"), bp::arg("scale") ) );
        
        }
        { //::gezi::WeightVector::dotOnDifference
        
            typedef ::Float ( ::gezi::WeightVector::*dotOnDifference_function_type )( ::gezi::Vector const &,::gezi::Vector const &,::Float ) const;
            
            WeightVector_exposer.def( 
                "dotOnDifference"
                , dotOnDifference_function_type( &::gezi::WeightVector::dotOnDifference )
                , ( bp::arg("other1"), bp::arg("other2"), bp::arg("scale")=1.0e+0 ) );
        
        }
        { //::gezi::WeightVector::operator[]
        
            typedef ::Float ( ::gezi::WeightVector::*__getitem___function_type )( int ) const;
            
            WeightVector_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::gezi::WeightVector::operator[] )
                , ( bp::arg("index") ) );
        
        }
        WeightVector_exposer.def_readwrite( "squaredNorm", &gezi::WeightVector::squaredNorm );
    }

    bp::class_< gezi::SparseWeightVector, bp::bases< gezi::WeightVector > >( "SparseWeightVector" )    
        .def( 
            "Add"
            , (void ( ::gezi::SparseWeightVector::* )( ::gezi::Vector & ) )( &::gezi::SparseWeightVector::Add )
            , ( bp::arg("a") ) )    
        .def( 
            "Add"
            , (void ( ::gezi::SparseWeightVector::* )( ::gezi::SparseWeightVector & ) )( &::gezi::SparseWeightVector::Add )
            , ( bp::arg("a") ) )    
        .def( 
            "AddScale"
            , (void ( ::gezi::SparseWeightVector::* )( ::gezi::Vector &,::Float ) )( &::gezi::SparseWeightVector::AddScale )
            , ( bp::arg("a"), bp::arg("scale") ) )    
        .def( 
            "AddScale"
            , (void ( ::gezi::SparseWeightVector::* )( ::gezi::SparseWeightVector &,::Float ) )( &::gezi::SparseWeightVector::AddScale )
            , ( bp::arg("a"), bp::arg("scale") ) );

    bp::class_< gezi::TextPredictor >( "TextPredictor" )    
        .def( 
            "Prase"
            , (void (*)( ::svec &,::std::map< int, double > &,::gezi::DoubleIdentifer const &,int,int,int,::std::string,bool,bool,bool ))( &::gezi::TextPredictor::Prase )
            , ( bp::arg("words_"), bp::arg("m"), bp::arg("identifer"), bp::arg("startIndex")=(int)(0), bp::arg("ngram")=(int)(3), bp::arg("skip")=(int)(2), bp::arg("sep")="$#$", bp::arg("hasPic")=(bool)(false), bp::arg("hasUrl")=(bool)(false), bp::arg("hasAt")=(bool)(false) ) )    
        .staticmethod( "Prase" );

    bp::class_< gezi::TrainerFactory >( "TrainerFactory" )    
        .def( 
            "CreateTrainer"
            , (::gezi::TrainerPtr (*)( ::std::string ))( &::gezi::TrainerFactory::CreateTrainer )
            , ( bp::arg("name_") ) )    
        .def( 
            "PrintTrainersInfo"
            , (void (*)(  ))( &::gezi::TrainerFactory::PrintTrainersInfo ) )    
        .staticmethod( "CreateTrainer" )    
        .staticmethod( "PrintTrainersInfo" );

    { //::gezi::create_instances
    
        typedef ::gezi::Instances ( *create_instances_function_type )( ::std::string,bool );
        
        bp::def( 
            "create_instances"
            , create_instances_function_type( &::gezi::create_instances )
            , ( bp::arg("infile"), bp::arg("printInfo")=(bool)(false) ) );
    
    }

    { //::gezi::get_feature_name
    
        typedef ::std::string ( *get_feature_name_function_type )( ::svec const * const,int );
        
        bp::def( 
            "get_feature_name"
            , get_feature_name_function_type( &::gezi::get_feature_name )
            , ( bp::arg("featureNames"), bp::arg("index") ) );
    
    }

    { //::gezi::get_feature_name
    
        typedef ::std::string ( *get_feature_name_function_type )( ::svec const &,int );
        
        bp::def( 
            "get_feature_name"
            , get_feature_name_function_type( &::gezi::get_feature_name )
            , ( bp::arg("featureNames"), bp::arg("index") ) );
    
    }

    { //::gezi::to_features
    
        typedef ::gezi::Vector ( *to_features_function_type )( ::std::string );
        
        bp::def( 
            "to_features"
            , to_features_function_type( &::gezi::to_features )
            , ( bp::arg("sparseFeatureStr") ) );
    
    }

    { //::gezi::write
    
        typedef void ( *write_function_type )( ::gezi::Instances &,::std::string );
        
        bp::def( 
            "write"
            , write_function_type( &::gezi::write )
            , ( bp::arg("instances"), bp::arg("outfile") ) );
    
    }

    { //::gezi::write
    
        typedef void ( *write_function_type )( ::gezi::Instances &,::std::string,::gezi::FileFormat );
        
        bp::def( 
            "write"
            , write_function_type( &::gezi::write )
            , ( bp::arg("instances"), bp::arg("outfile"), bp::arg("format") ) );
    
    }

    { //::gezi::write_arff
    
        typedef void ( *write_arff_function_type )( ::gezi::Features const &,::std::string,::std::string,::std::ostream & );
        
        bp::def( 
            "write_arff"
            , write_arff_function_type( &::gezi::write_arff )
            , ( bp::arg("features"), bp::arg("uid"), bp::arg("type"), bp::arg("ofs") ) );
    
    }

    { //::gezi::write_arff
    
        typedef void ( *write_arff_function_type )( ::gezi::Instances &,::std::string,::std::string );
        
        bp::def( 
            "write_arff"
            , write_arff_function_type( &::gezi::write_arff )
            , ( bp::arg("instances"), bp::arg("outfile"), bp::arg("relation")="table" ) );
    
    }

    { //::gezi::write_def
    
        typedef void ( *write_def_function_type )( ::gezi::Features const &,::std::string );
        
        bp::def( 
            "write_def"
            , write_def_function_type( &::gezi::write_def )
            , ( bp::arg("features"), bp::arg("outfile") ) );
    
    }

    { //::gezi::write_dense
    
        typedef void ( *write_dense_function_type )( ::gezi::Instances &,::std::string );
        
        bp::def( 
            "write_dense"
            , write_dense_function_type( &::gezi::write_dense )
            , ( bp::arg("instances"), bp::arg("outfile") ) );
    
    }

    { //::gezi::write_dense
    
        typedef void ( *write_dense_function_type )( ::gezi::Instance &,::gezi::HeaderSchema &,::std::ofstream & );
        
        bp::def( 
            "write_dense"
            , write_dense_function_type( &::gezi::write_dense )
            , ( bp::arg("instance"), bp::arg("schema"), bp::arg("ofs") ) );
    
    }

    { //::gezi::write_header
    
        typedef void ( *write_header_function_type )( ::gezi::Features const &,::std::string );
        
        bp::def( 
            "write_header"
            , write_header_function_type( &::gezi::write_header )
            , ( bp::arg("features"), bp::arg("file") ) );
    
    }

    { //::gezi::write_header
    
        typedef void ( *write_header_function_type )( ::gezi::Features const &,::std::ostream & );
        
        bp::def( 
            "write_header"
            , write_header_function_type( &::gezi::write_header )
            , ( bp::arg("features"), bp::arg("ofs") ) );
    
    }

    { //::gezi::write_libsvm
    
        typedef void ( *write_libsvm_function_type )( ::gezi::Features const &,::std::string,::std::ostream & );
        
        bp::def( 
            "write_libsvm"
            , write_libsvm_function_type( &::gezi::write_libsvm )
            , ( bp::arg("features"), bp::arg("label"), bp::arg("ofs") ) );
    
    }

    { //::gezi::write_libsvm
    
        typedef void ( *write_libsvm_function_type )( ::gezi::Instances &,::std::string,bool );
        
        bp::def( 
            "write_libsvm"
            , write_libsvm_function_type( &::gezi::write_libsvm )
            , ( bp::arg("instances"), bp::arg("outfile"), bp::arg("noNegLabel")=(bool)(false) ) );
    
    }

    { //::gezi::write_libsvm
    
        typedef void ( *write_libsvm_function_type )( ::gezi::Instance &,::gezi::HeaderSchema &,::std::ofstream &,bool,bool );
        
        bp::def( 
            "write_libsvm"
            , write_libsvm_function_type( &::gezi::write_libsvm )
            , ( bp::arg("instance"), bp::arg("schema"), bp::arg("ofs"), bp::arg("noNegLabel")=(bool)(false), bp::arg("isVW")=(bool)(false) ) );
    
    }

    { //::gezi::write_sparse
    
        typedef void ( *write_sparse_function_type )( ::gezi::Instances &,::std::string );
        
        bp::def( 
            "write_sparse"
            , write_sparse_function_type( &::gezi::write_sparse )
            , ( bp::arg("instances"), bp::arg("outfile") ) );
    
    }

    { //::gezi::write_sparse
    
        typedef void ( *write_sparse_function_type )( ::gezi::Instance &,::gezi::HeaderSchema &,::std::ofstream & );
        
        bp::def( 
            "write_sparse"
            , write_sparse_function_type( &::gezi::write_sparse )
            , ( bp::arg("instance"), bp::arg("schema"), bp::arg("ofs") ) );
    
    }

    { //::gezi::write_table_feature
    
        typedef void ( *write_table_feature_function_type )( ::gezi::Features const &,::std::ofstream & );
        
        bp::def( 
            "write_table_feature"
            , write_table_feature_function_type( &::gezi::write_table_feature )
            , ( bp::arg("features"), bp::arg("ofs") ) );
    
    }

    { //::gezi::write_template
    
        typedef void ( *write_template_function_type )( ::gezi::Features const &,::std::string );
        
        bp::def( 
            "write_template"
            , write_template_function_type( &::gezi::write_template )
            , ( bp::arg("features"), bp::arg("outfile") ) );
    
    }

    { //::gezi::write_text
    
        typedef void ( *write_text_function_type )( ::gezi::Instances &,::std::string );
        
        bp::def( 
            "write_text"
            , write_text_function_type( &::gezi::write_text )
            , ( bp::arg("instances"), bp::arg("outfile") ) );
    
    }

    { //::gezi::write_vw
    
        typedef void ( *write_vw_function_type )( ::gezi::Instances &,::std::string );
        
        bp::def( 
            "write_vw"
            , write_vw_function_type( &::gezi::write_vw )
            , ( bp::arg("instances"), bp::arg("outfile") ) );
    
    }

    bp::scope().attr("kFormatNames") = gezi::kFormatNames;

    bp::scope().attr("kFormatSuffixes") = gezi::kFormatSuffixes;

    bp::scope().attr("kFormats") = gezi::kFormats;
}

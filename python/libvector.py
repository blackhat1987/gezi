# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libvector', [dirname(__file__)])
        except ImportError:
            import _libvector
            return _libvector
        if fp is not None:
            try:
                _mod = imp.load_module('_libvector', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _libvector = swig_import_helper()
    del swig_import_helper
else:
    import _libvector
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libvector.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _libvector.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _libvector.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _libvector.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _libvector.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _libvector.SwigPyIterator_equal(self, x)

    def copy(self):
        return _libvector.SwigPyIterator_copy(self)

    def next(self):
        return _libvector.SwigPyIterator_next(self)

    def __next__(self):
        return _libvector.SwigPyIterator___next__(self)

    def previous(self):
        return _libvector.SwigPyIterator_previous(self)

    def advance(self, n):
        return _libvector.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _libvector.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _libvector.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _libvector.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _libvector.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _libvector.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _libvector.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _libvector.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ivec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ivec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ivec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libvector.ivec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libvector.ivec___nonzero__(self)

    def __bool__(self):
        return _libvector.ivec___bool__(self)

    def __len__(self):
        return _libvector.ivec___len__(self)

    def __getslice__(self, i, j):
        return _libvector.ivec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libvector.ivec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libvector.ivec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libvector.ivec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libvector.ivec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libvector.ivec___setitem__(self, *args)

    def pop(self):
        return _libvector.ivec_pop(self)

    def append(self, x):
        return _libvector.ivec_append(self, x)

    def empty(self):
        return _libvector.ivec_empty(self)

    def size(self):
        return _libvector.ivec_size(self)

    def swap(self, v):
        return _libvector.ivec_swap(self, v)

    def begin(self):
        return _libvector.ivec_begin(self)

    def end(self):
        return _libvector.ivec_end(self)

    def rbegin(self):
        return _libvector.ivec_rbegin(self)

    def rend(self):
        return _libvector.ivec_rend(self)

    def clear(self):
        return _libvector.ivec_clear(self)

    def get_allocator(self):
        return _libvector.ivec_get_allocator(self)

    def pop_back(self):
        return _libvector.ivec_pop_back(self)

    def erase(self, *args):
        return _libvector.ivec_erase(self, *args)

    def __init__(self, *args):
        this = _libvector.new_ivec(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _libvector.ivec_push_back(self, x)

    def front(self):
        return _libvector.ivec_front(self)

    def back(self):
        return _libvector.ivec_back(self)

    def assign(self, n, x):
        return _libvector.ivec_assign(self, n, x)

    def resize(self, *args):
        return _libvector.ivec_resize(self, *args)

    def insert(self, *args):
        return _libvector.ivec_insert(self, *args)

    def reserve(self, n):
        return _libvector.ivec_reserve(self, n)

    def capacity(self):
        return _libvector.ivec_capacity(self)
    __swig_destroy__ = _libvector.delete_ivec
    __del__ = lambda self: None
ivec_swigregister = _libvector.ivec_swigregister
ivec_swigregister(ivec)

class dvec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dvec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dvec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libvector.dvec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libvector.dvec___nonzero__(self)

    def __bool__(self):
        return _libvector.dvec___bool__(self)

    def __len__(self):
        return _libvector.dvec___len__(self)

    def __getslice__(self, i, j):
        return _libvector.dvec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libvector.dvec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libvector.dvec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libvector.dvec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libvector.dvec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libvector.dvec___setitem__(self, *args)

    def pop(self):
        return _libvector.dvec_pop(self)

    def append(self, x):
        return _libvector.dvec_append(self, x)

    def empty(self):
        return _libvector.dvec_empty(self)

    def size(self):
        return _libvector.dvec_size(self)

    def swap(self, v):
        return _libvector.dvec_swap(self, v)

    def begin(self):
        return _libvector.dvec_begin(self)

    def end(self):
        return _libvector.dvec_end(self)

    def rbegin(self):
        return _libvector.dvec_rbegin(self)

    def rend(self):
        return _libvector.dvec_rend(self)

    def clear(self):
        return _libvector.dvec_clear(self)

    def get_allocator(self):
        return _libvector.dvec_get_allocator(self)

    def pop_back(self):
        return _libvector.dvec_pop_back(self)

    def erase(self, *args):
        return _libvector.dvec_erase(self, *args)

    def __init__(self, *args):
        this = _libvector.new_dvec(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _libvector.dvec_push_back(self, x)

    def front(self):
        return _libvector.dvec_front(self)

    def back(self):
        return _libvector.dvec_back(self)

    def assign(self, n, x):
        return _libvector.dvec_assign(self, n, x)

    def resize(self, *args):
        return _libvector.dvec_resize(self, *args)

    def insert(self, *args):
        return _libvector.dvec_insert(self, *args)

    def reserve(self, n):
        return _libvector.dvec_reserve(self, n)

    def capacity(self):
        return _libvector.dvec_capacity(self)
    __swig_destroy__ = _libvector.delete_dvec
    __del__ = lambda self: None
dvec_swigregister = _libvector.dvec_swigregister
dvec_swigregister(dvec)

class svec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, svec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, svec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libvector.svec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libvector.svec___nonzero__(self)

    def __bool__(self):
        return _libvector.svec___bool__(self)

    def __len__(self):
        return _libvector.svec___len__(self)

    def __getslice__(self, i, j):
        return _libvector.svec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libvector.svec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libvector.svec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libvector.svec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libvector.svec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libvector.svec___setitem__(self, *args)

    def pop(self):
        return _libvector.svec_pop(self)

    def append(self, x):
        return _libvector.svec_append(self, x)

    def empty(self):
        return _libvector.svec_empty(self)

    def size(self):
        return _libvector.svec_size(self)

    def swap(self, v):
        return _libvector.svec_swap(self, v)

    def begin(self):
        return _libvector.svec_begin(self)

    def end(self):
        return _libvector.svec_end(self)

    def rbegin(self):
        return _libvector.svec_rbegin(self)

    def rend(self):
        return _libvector.svec_rend(self)

    def clear(self):
        return _libvector.svec_clear(self)

    def get_allocator(self):
        return _libvector.svec_get_allocator(self)

    def pop_back(self):
        return _libvector.svec_pop_back(self)

    def erase(self, *args):
        return _libvector.svec_erase(self, *args)

    def __init__(self, *args):
        this = _libvector.new_svec(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _libvector.svec_push_back(self, x)

    def front(self):
        return _libvector.svec_front(self)

    def back(self):
        return _libvector.svec_back(self)

    def assign(self, n, x):
        return _libvector.svec_assign(self, n, x)

    def resize(self, *args):
        return _libvector.svec_resize(self, *args)

    def insert(self, *args):
        return _libvector.svec_insert(self, *args)

    def reserve(self, n):
        return _libvector.svec_reserve(self, n)

    def capacity(self):
        return _libvector.svec_capacity(self)
    __swig_destroy__ = _libvector.delete_svec
    __del__ = lambda self: None
svec_swigregister = _libvector.svec_swigregister
svec_swigregister(svec)

class Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libvector.delete_Vector
    __del__ = lambda self: None

    def __eq__(self, other):
        return _libvector.Vector___eq__(self, other)

    def Resize(self, length_, value_=0):
        return _libvector.Vector_Resize(self, length_, value_)

    def resize(self, length_, value_=0):
        return _libvector.Vector_resize(self, length_, value_)

    def __init__(self, *args):
        this = _libvector.new_Vector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def Swap(self, other):
        return _libvector.Vector_Swap(self, other)

    def Init(self, *args):
        return _libvector.Vector_Init(self, *args)

    def begin(self):
        return _libvector.Vector_begin(self)

    def end(self):
        return _libvector.Vector_end(self)

    def front(self):
        return _libvector.Vector_front(self)

    def back(self):
        return _libvector.Vector_back(self)

    def push_back(self, item):
        return _libvector.Vector_push_back(self, item)

    def insert(self, position, val):
        return _libvector.Vector_insert(self, position, val)

    def erase(self, *args):
        return _libvector.Vector_erase(self, *args)

    def ToDense(self, *args):
        return _libvector.Vector_ToDense(self, *args)

    def ToSparse(self):
        return _libvector.Vector_ToSparse(self)

    def MakeDense(self):
        return _libvector.Vector_MakeDense(self)

    def ForceDense(self):
        return _libvector.Vector_ForceDense(self)

    def MakeSparse(self):
        return _libvector.Vector_MakeSparse(self)

    def ForceSparse(self):
        return _libvector.Vector_ForceSparse(self)

    def AddMap(self, m):
        return _libvector.Vector_AddMap(self, m)

    def PrepareDense(self):
        return _libvector.Vector_PrepareDense(self)

    def Sparsify(self, *args):
        return _libvector.Vector_Sparsify(self, *args)

    def Densify(self, *args):
        return _libvector.Vector_Densify(self, *args)

    def __call__(self, index, value):
        return _libvector.Vector___call__(self, index, value)

    def IsDense(self):
        return _libvector.Vector_IsDense(self)

    def IsSparse(self):
        return _libvector.Vector_IsSparse(self)

    def Length(self):
        return _libvector.Vector_Length(self)

    def size(self):
        return _libvector.Vector_size(self)

    def SetLength(self, length_):
        return _libvector.Vector_SetLength(self, length_)

    def Empty(self):
        return _libvector.Vector_Empty(self)

    def empty(self):
        return _libvector.Vector_empty(self)

    def Count(self):
        return _libvector.Vector_Count(self)

    def NumNonZeros(self):
        return _libvector.Vector_NumNonZeros(self)

    def Indices(self, *args):
        return _libvector.Vector_Indices(self, *args)

    def Values(self, *args):
        return _libvector.Vector_Values(self, *args)

    def Index(self, *args):
        return _libvector.Vector_Index(self, *args)

    def SetIndex(self, index, indexValue):
        return _libvector.Vector_SetIndex(self, index, indexValue)

    def Value(self, *args):
        return _libvector.Vector_Value(self, *args)

    def SetValue(self, index, value):
        return _libvector.Vector_SetValue(self, index, value)

    def Clear(self):
        return _libvector.Vector_Clear(self)

    def clear(self):
        return _libvector.Vector_clear(self)

    def CheckInvariants(self):
        return _libvector.Vector_CheckInvariants(self)

    def __imul__(self, d):
        return _libvector.Vector___imul__(self, d)

    def __idiv__(self, d):
        return _libvector.Vector___idiv__(self, d)

    def __iadd__(self, other):
        return _libvector.Vector___iadd__(self, other)

    def __isub__(self, other):
        return _libvector.Vector___isub__(self, other)

    def dot(self, other):
        return _libvector.Vector_dot(self, other)

    def ScaleBy(self, d):
        return _libvector.Vector_ScaleBy(self, d)

    def Add(self, *args):
        return _libvector.Vector_Add(self, *args)

    def Subtract(self, other):
        return _libvector.Vector_Subtract(self, other)

    def Norm(self):
        return _libvector.Vector_Norm(self)

    def SquaredNorm(self):
        return _libvector.Vector_SquaredNorm(self)

    def Str(self, *args):
        return _libvector.Vector_Str(self, *args)

    def AllStr(self, *args):
        return _libvector.Vector_AllStr(self, *args)

    def DenseStr(self, *args):
        return _libvector.Vector_DenseStr(self, *args)

    def str(self, *args):
        return _libvector.Vector_str(self, *args)
    __swig_setmethods__["indices"] = _libvector.Vector_indices_set
    __swig_getmethods__["indices"] = _libvector.Vector_indices_get
    if _newclass:
        indices = _swig_property(_libvector.Vector_indices_get, _libvector.Vector_indices_set)
    __swig_setmethods__["values"] = _libvector.Vector_values_set
    __swig_getmethods__["values"] = _libvector.Vector_values_get
    if _newclass:
        values = _swig_property(_libvector.Vector_values_get, _libvector.Vector_values_set)
    __swig_setmethods__["sparsityRatio"] = _libvector.Vector_sparsityRatio_set
    __swig_getmethods__["sparsityRatio"] = _libvector.Vector_sparsityRatio_get
    if _newclass:
        sparsityRatio = _swig_property(_libvector.Vector_sparsityRatio_get, _libvector.Vector_sparsityRatio_set)
    __swig_setmethods__["keepDense"] = _libvector.Vector_keepDense_set
    __swig_getmethods__["keepDense"] = _libvector.Vector_keepDense_get
    if _newclass:
        keepDense = _swig_property(_libvector.Vector_keepDense_get, _libvector.Vector_keepDense_set)
    __swig_setmethods__["keepSparse"] = _libvector.Vector_keepSparse_set
    __swig_getmethods__["keepSparse"] = _libvector.Vector_keepSparse_get
    if _newclass:
        keepSparse = _swig_property(_libvector.Vector_keepSparse_get, _libvector.Vector_keepSparse_set)
    __swig_setmethods__["normalized"] = _libvector.Vector_normalized_set
    __swig_getmethods__["normalized"] = _libvector.Vector_normalized_get
    if _newclass:
        normalized = _swig_property(_libvector.Vector_normalized_get, _libvector.Vector_normalized_set)
    __swig_setmethods__["numNonZeros"] = _libvector.Vector_numNonZeros_set
    __swig_getmethods__["numNonZeros"] = _libvector.Vector_numNonZeros_get
    if _newclass:
        numNonZeros = _swig_property(_libvector.Vector_numNonZeros_get, _libvector.Vector_numNonZeros_set)
Vector_swigregister = _libvector.Vector_swigregister
Vector_swigregister(Vector)


def __add__(l, r):
    return _libvector.__add__(l, r)
__add__ = _libvector.__add__

_libvector.CodeType_C_swigconstant(_libvector)
CodeType_C = _libvector.CodeType_C

_libvector.CodeType_Python_swigconstant(_libvector)
CodeType_Python = _libvector.CodeType_Python

_libvector.CodeType_Php_swigconstant(_libvector)
CodeType_Php = _libvector.CodeType_Php
class Predictor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Predictor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Predictor, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libvector.delete_Predictor
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _libvector.new_Predictor(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def GetPredictionKind(self):
        return _libvector.Predictor_GetPredictionKind(self)

    def Name(self):
        return _libvector.Predictor_Name(self)

    def SetPath(self, path):
        return _libvector.Predictor_SetPath(self, path)

    def Path(self):
        return _libvector.Predictor_Path(self)

    def SetParam(self, param):
        return _libvector.Predictor_SetParam(self, param)

    def SetUseCustomModel(self, useCustomModel):
        return _libvector.Predictor_SetUseCustomModel(self, useCustomModel)

    def UseCustomModel(self):
        return _libvector.Predictor_UseCustomModel(self)

    def GetParam(self):
        return _libvector.Predictor_GetParam(self)

    def ToNamedFeatures(self, features):
        return _libvector.Predictor_ToNamedFeatures(self, features)

    def Print(self, *args):
        return _libvector.Predictor_Print(self, *args)

    def BulkPredict(self, *args):
        return _libvector.Predictor_BulkPredict(self, *args)

    def InitThread(self):
        return _libvector.Predictor_InitThread(self)

    def Output(self, *args):
        return _libvector.Predictor_Output(self, *args)

    def Predict(self, *args):
        return _libvector.Predictor_Predict(self, *args)

    def SetNormalizeCopy(self, normalizeCopy=True):
        return _libvector.Predictor_SetNormalizeCopy(self, normalizeCopy)

    def SaveBin(self, path):
        return _libvector.Predictor_SaveBin(self, path)

    def Save(self, *args):
        return _libvector.Predictor_Save(self, *args)

    def CustomSave(self, *args):
        return _libvector.Predictor_CustomSave(self, *args)

    def CustomSave_(self, path):
        return _libvector.Predictor_CustomSave_(self, path)

    def Save_(self, file):
        return _libvector.Predictor_Save_(self, file)

    def LoadNormalizerAndCalibrator(self, path):
        return _libvector.Predictor_LoadNormalizerAndCalibrator(self, path)

    def LoadBin(self, path):
        return _libvector.Predictor_LoadBin(self, path)

    def ReadPathAndSetParam_(self, path):
        return _libvector.Predictor_ReadPathAndSetParam_(self, path)

    def CustomLoad(self, path):
        return _libvector.Predictor_CustomLoad(self, path)

    def Load(self, path):
        return _libvector.Predictor_Load(self, path)

    def Load_(self, file):
        return _libvector.Predictor_Load_(self, file)

    def SaveXml_(self, file):
        return _libvector.Predictor_SaveXml_(self, file)

    def SaveCode(self, *args):
        return _libvector.Predictor_SaveCode(self, *args)

    def SaveJson_(self, file):
        return _libvector.Predictor_SaveJson_(self, file)

    def SaveText_(self, file):
        return _libvector.Predictor_SaveText_(self, file)

    def SaveCode_(self, file, codeType):
        return _libvector.Predictor_SaveCode_(self, file, codeType)

    def SaveXml(self, *args):
        return _libvector.Predictor_SaveXml(self, *args)

    def SaveJson(self, *args):
        return _libvector.Predictor_SaveJson(self, *args)

    def SaveText(self, *args):
        return _libvector.Predictor_SaveText(self, *args)

    def SaveFeaturesGain(self, topNum=0):
        return _libvector.Predictor_SaveFeaturesGain(self, topNum)

    def CustomLoad_(self, path):
        return _libvector.Predictor_CustomLoad_(self, path)

    def LoadText_(self, file):
        return _libvector.Predictor_LoadText_(self, file)

    def LoadText(self, path):
        return _libvector.Predictor_LoadText(self, path)

    def GetNormalizer(self):
        return _libvector.Predictor_GetNormalizer(self)

    def SetNormalizer(self, normalizer):
        return _libvector.Predictor_SetNormalizer(self, normalizer)

    def SetCalibrator(self, calibrator):
        return _libvector.Predictor_SetCalibrator(self, calibrator)

    def GetCalibrator(self):
        return _libvector.Predictor_GetCalibrator(self)

    def SetSaveNormalizerText(self, setSave=True):
        return _libvector.Predictor_SetSaveNormalizerText(self, setSave)

    def SetSaveCalibratorText(self, setSave=True):
        return _libvector.Predictor_SetSaveCalibratorText(self, setSave)
    __swig_getmethods__["ThirdModelName"] = lambda x: _libvector.Predictor_ThirdModelName
    if _newclass:
        ThirdModelName = staticmethod(_libvector.Predictor_ThirdModelName)
    __swig_getmethods__["loadNormalizerAndCalibrator"] = lambda x: _libvector.Predictor_loadNormalizerAndCalibrator
    if _newclass:
        loadNormalizerAndCalibrator = staticmethod(_libvector.Predictor_loadNormalizerAndCalibrator)
    __swig_getmethods__["SetLoadNormalizerAndCalibrator"] = lambda x: _libvector.Predictor_SetLoadNormalizerAndCalibrator
    if _newclass:
        SetLoadNormalizerAndCalibrator = staticmethod(_libvector.Predictor_SetLoadNormalizerAndCalibrator)

    def ToGainSummary(self, features, sortByAbsGain=True):
        return _libvector.Predictor_ToGainSummary(self, features, sortByAbsGain)

    def ToFeaturesGainSummary(self, topNum=0):
        return _libvector.Predictor_ToFeaturesGainSummary(self, topNum)

    def SetFeatureNames(self, featureNames):
        return _libvector.Predictor_SetFeatureNames(self, featureNames)

    def FeatureNames(self):
        return _libvector.Predictor_FeatureNames(self)

    def SetFeatureGainVec(self, *args):
        return _libvector.Predictor_SetFeatureGainVec(self, *args)
Predictor_swigregister = _libvector.Predictor_swigregister
Predictor_swigregister(Predictor)

def Predictor_ThirdModelName(file):
    return _libvector.Predictor_ThirdModelName(file)
Predictor_ThirdModelName = _libvector.Predictor_ThirdModelName

def Predictor_loadNormalizerAndCalibrator():
    return _libvector.Predictor_loadNormalizerAndCalibrator()
Predictor_loadNormalizerAndCalibrator = _libvector.Predictor_loadNormalizerAndCalibrator

def Predictor_SetLoadNormalizerAndCalibrator(loadNormalizerAndCalibrator_=True):
    return _libvector.Predictor_SetLoadNormalizerAndCalibrator(loadNormalizerAndCalibrator_)
Predictor_SetLoadNormalizerAndCalibrator = _libvector.Predictor_SetLoadNormalizerAndCalibrator

class ProbabilityPredictor(Predictor):
    __swig_setmethods__ = {}
    for _s in [Predictor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProbabilityPredictor, name, value)
    __swig_getmethods__ = {}
    for _s in [Predictor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProbabilityPredictor, name)
    __repr__ = _swig_repr

    def Predict(self, *args):
        return _libvector.ProbabilityPredictor_Predict(self, *args)

    def __init__(self):
        this = _libvector.new_ProbabilityPredictor()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libvector.delete_ProbabilityPredictor
    __del__ = lambda self: None
ProbabilityPredictor_swigregister = _libvector.ProbabilityPredictor_swigregister
ProbabilityPredictor_swigregister(ProbabilityPredictor)

class PredictorFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PredictorFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PredictorFactory, name)
    __repr__ = _swig_repr
    __swig_getmethods__["CreatePredictor"] = lambda x: _libvector.PredictorFactory_CreatePredictor
    if _newclass:
        CreatePredictor = staticmethod(_libvector.PredictorFactory_CreatePredictor)
    __swig_getmethods__["LoadPredictor"] = lambda x: _libvector.PredictorFactory_LoadPredictor
    if _newclass:
        LoadPredictor = staticmethod(_libvector.PredictorFactory_LoadPredictor)
    __swig_getmethods__["CreatePredictorFromTextFormat"] = lambda x: _libvector.PredictorFactory_CreatePredictorFromTextFormat
    if _newclass:
        CreatePredictorFromTextFormat = staticmethod(_libvector.PredictorFactory_CreatePredictorFromTextFormat)
    __swig_getmethods__["LoadTextPredictor"] = lambda x: _libvector.PredictorFactory_LoadTextPredictor
    if _newclass:
        LoadTextPredictor = staticmethod(_libvector.PredictorFactory_LoadTextPredictor)
    __swig_getmethods__["LoadPredictors"] = lambda x: _libvector.PredictorFactory_LoadPredictors
    if _newclass:
        LoadPredictors = staticmethod(_libvector.PredictorFactory_LoadPredictors)

    def __init__(self):
        this = _libvector.new_PredictorFactory()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libvector.delete_PredictorFactory
    __del__ = lambda self: None
PredictorFactory_swigregister = _libvector.PredictorFactory_swigregister
PredictorFactory_swigregister(PredictorFactory)

def PredictorFactory_CreatePredictor(*args):
    return _libvector.PredictorFactory_CreatePredictor(*args)
PredictorFactory_CreatePredictor = _libvector.PredictorFactory_CreatePredictor

def PredictorFactory_LoadPredictor(path, useCustomModel=False):
    return _libvector.PredictorFactory_LoadPredictor(path, useCustomModel)
PredictorFactory_LoadPredictor = _libvector.PredictorFactory_LoadPredictor

def PredictorFactory_CreatePredictorFromTextFormat(name, path):
    return _libvector.PredictorFactory_CreatePredictorFromTextFormat(name, path)
PredictorFactory_CreatePredictorFromTextFormat = _libvector.PredictorFactory_CreatePredictorFromTextFormat

def PredictorFactory_LoadTextPredictor(path):
    return _libvector.PredictorFactory_LoadTextPredictor(path)
PredictorFactory_LoadTextPredictor = _libvector.PredictorFactory_LoadTextPredictor

def PredictorFactory_LoadPredictors(paths):
    return _libvector.PredictorFactory_LoadPredictors(paths)
PredictorFactory_LoadPredictors = _libvector.PredictorFactory_LoadPredictors

# This file is compatible with both classic and new-style classes.


